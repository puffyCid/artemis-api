"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[1150],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}},82838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"API/API Scenarios/timelines","title":"Timelines","description":"Timelining artifacts","source":"@site/docs/API/API Scenarios/timelines.md","sourceDirName":"API/API Scenarios","slug":"/API/API Scenarios/timelines","permalink":"/artemis-api/docs/API/API Scenarios/timelines","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/API/API Scenarios/timelines.md","tags":[],"version":"current","lastUpdatedBy":"puffycid","lastUpdatedAt":1748157447000,"frontMatter":{"description":"Timelining artifacts"},"sidebar":"artemisAPI","previous":{"title":"Outlook Interaction","permalink":"/artemis-api/docs/API/API Scenarios/outlook"},"next":{"title":"Timesketch","permalink":"/artemis-api/docs/API/API Scenarios/timesketch"}}');var s=n(74848),r=n(28453);const a={description:"Timelining artifacts"},o="Timelines",c={},m=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"timelines",children:"Timelines"})}),"\n",(0,s.jsxs)(t.p,{children:["Using the artemis API you may timeline artifacts into a standard JSONL (or JSON)\nformat. Artemis uses the timeline format based on\n",(0,s.jsx)(t.a,{href:"https://timesketch.org/",children:"Timesketch"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The format is defind below:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export interface TimesketchTimeline {\n  /** **Required by Timeskech** ISO8601 timestamp format: YYYY-MM-DD HH:mm:ss. All times are in UTC */\n  datetime: string;\n  /** **Required by Timeskech** Description of the timestamp. Ex: FileCreated */\n  timestamp_desc: string;\n  /** **Required by Timeskech** Timeline message data */\n  message: string;\n  /**The type of artifact that was timelined */\n  artifact: string;\n  /**\n   * Artifact data type. Based on plaso definition\n   * (its kind of freeform, https://github.com/log2timeline/plaso/blob/main/docs/sources/user/Scribbles-about-events.md).\n   * Looks like: `source:artifact:artifact:data`. With first artifact most generic and second one more specific\n   * :artifact: can be nested. Ex: `windows:registry:explorer:programcache`\n   */\n  data_type: string;\n  /**Include any other valid JSON data */\n  [key: string]: unknown;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The API function ",(0,s.jsx)(t.strong,{children:"timelineArtifact"})," can be used to timeline supported\nartifacts. You can also timeline your own custom artifacts, you just need to\nensure the output follows ",(0,s.jsx)(t.strong,{children:"TimesketchTimeline"})," object above."]}),"\n",(0,s.jsx)(t.p,{children:"A sample script below shows how to timeline launchdaemon data."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { dumpData, getLaunchdDaemons } from "../../Projects/artemis-api/mod";\nimport { MacosError } from "../../Projects/artemis-api/src/macos/errors";\nimport {\n  Format,\n  Output,\n  OutputType,\n} from "../../Projects/artemis-api/src/system/output";\n\nimport { TimesketchError } from "../../Projects/artemis-api/src/timesketch/error";\nimport { timelineArtifact } from "../../Projects/artemis-api/src/timesketch/timeline";\nimport { TimesketchArtifact } from "../../Projects/artemis-api/types/timesketch/timeline";\n\nfunction main() {\n  const out: Output = {\n    name: "launchd",\n    directory: "./tmp",\n    format: Format.JSONL,\n    compress: false,\n    timeline: false,\n    endpoint_id: "abc",\n    collection_id: 0,\n    output: OutputType.LOCAL,\n  };\n\n  const daemons = getLaunchdDaemons();\n  if (daemons instanceof MacosError) {\n    return;\n  }\n\n  const results = timelineArtifact(daemons, TimesketchArtifact.LAUNCHD);\n  if (status instanceof TimesketchError) {\n    return;\n  }\n  dumpData(results, "launchd", out);\n}\n\nmain();\n'})}),"\n",(0,s.jsx)(t.p,{children:"A quick walkthrough for this script:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Output"})," define our output object as documented in\n",(0,s.jsx)(t.a,{href:"/artemis-api/docs/Intro/Collections/format",children:"format documentation"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"getLaunchdDaemons()"})," parse macOS launchDaemons"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"timelineArtifact(daemons, TimesketchArtifact.LAUNCHD)"})," timeline our parsed\nlaunchDaemons"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:'dumpData(JSON.stringify(results), "launchd", out)'})," Dump the raw JSONL data\nto a file. This will skip the metadata that artemis adds to artifact output"]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);