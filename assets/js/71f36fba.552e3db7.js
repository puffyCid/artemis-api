"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[4592],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>k});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),s=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=s(t.components);return a.createElement(d.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,d=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),p=s(n),g=r,k=p["".concat(d,".").concat(g)]||p[g]||u[g]||i;return n?a.createElement(k,l(l({ref:e},m),{},{components:n})):a.createElement(k,l({ref:e},m))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[p]="string"==typeof t?t:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5546:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={description:"How to make custom parsers"},l="Nom APIs",o={unversionedId:"API/Helper/nom",id:"API/Helper/nom",title:"Nom APIs",description:"How to make custom parsers",source:"@site/docs/API/Helper/nom.md",sourceDirName:"API/Helper",slug:"/API/Helper/nom",permalink:"/docs/API/Helper/nom",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/API/Helper/nom.md",tags:[],version:"current",frontMatter:{description:"How to make custom parsers"},sidebar:"artemisAPI",previous:{title:"Filesystem APIs",permalink:"/docs/API/Helper/filesystem"},next:{title:"System APIs",permalink:"/docs/API/Helper/system"}},d={},s=[{value:"nomUnsignedFourBytes(data, endianess) -&gt; NomUnsigned | Error",id:"nomunsignedfourbytesdata-endianess---nomunsigned--error",level:3},{value:"nomUnsignedEightBytes(data, endianess) -&gt; NomUnsigned | Error",id:"nomunsignedeightbytesdata-endianess---nomunsigned--error",level:3},{value:"nomUnsignedTwoBytes(data, endianess) -&gt; NomUnsigned | Error",id:"nomunsignedtwobytesdata-endianess---nomunsigned--error",level:3},{value:"nomUnsignedOneBytes(data, endianess) -&gt; NomUnsigned | Error",id:"nomunsignedonebytesdata-endianess---nomunsigned--error",level:3},{value:"nomUnsignedSixteenBytes(data, endianess) -&gt; NomUnsignedLarge | Error",id:"nomunsignedsixteenbytesdata-endianess---nomunsignedlarge--error",level:3},{value:"nomSignedFourBytes(data, endianess) -&gt; NomSigned | Error",id:"nomsignedfourbytesdata-endianess---nomsigned--error",level:3},{value:"nomSignedEightBytes(data, endianess) -&gt; NomSigned | Error",id:"nomsignedeightbytesdata-endianess---nomsigned--error",level:3},{value:"nomSignedTwoBytes(data, endianess) -&gt; NomSigned | Error",id:"nomsignedtwobytesdata-endianess---nomsigned--error",level:3},{value:"take(data, input) -&gt; Nom | Error",id:"takedata-input---nom--error",level:3},{value:"takeUntil(data, input) -&gt; Nom | Error",id:"takeuntildata-input---nom--error",level:3},{value:"takeWhile(data, input) -&gt; Nom | Error",id:"takewhiledata-input---nom--error",level:3}],m={toc:s},p="wrapper";function u(t){let{components:e,...n}=t;return(0,r.kt)(p,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nom-apis"},"Nom APIs"),(0,r.kt)("p",null,"Artemis uses the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rust-bakery/nom"},"nom")," Rust library to parse\ndata on the system. Only some of the nom API is exposed to JavaScript runtime.\nIn addition, several nom helper functions are exposed to assist with common\nparsing tasks."),(0,r.kt)("p",null,"Nom is a powerful parsing framework but can be a little complex when first\nstarting. It works on both plaintext and binary data. Artemis mainly uses it for\nbinary data. But parts of the artemis-api will support plaintext as well."),(0,r.kt)("p",null,"An highlevel overview of the way nom works:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'You give nom X bytes and tell nom to "eat" (nom) Y bytes'),(0,r.kt)("li",{parentName:"ol"},"Nom wil consume Y bytes then return Y bytes AND the ",(0,r.kt)("strong",{parentName:"li"},"remaining")," X bytes")),(0,r.kt)("p",null,"So if you give nom 10 bytes and tell it eat/consume 2 bytes. You would get 2\nbytes and 8 bytes returned. Pseudo-code below"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"let input  = [0,1,2,3,4,5,6,7,8,9]; // 10 bytes\nlet take = 2;\n\nlet remaining, consumed = nom(input, take)\n\nassert!(remaining.len(), 8); // We consumed 2 bytes, we have 8 remaining\nassert!(remaining, [2,3,4,5,6,7,8,9]); // our remaining bytes!\nassert!(consumed, [0,1]); // we consumed the first 2 bytes!\n")),(0,r.kt)("h3",{id:"nomunsignedfourbytesdata-endianess---nomunsigned--error"},"nomUnsignedFourBytes(data, endianess) -> NomUnsigned | Error"),(0,r.kt)("p",null,"Nom helper to parse four bytes into unsigned 32 bit integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endianess"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Endian")),(0,r.kt)("td",{parentName:"tr",align:null},"Endian type of ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("h3",{id:"nomunsignedeightbytesdata-endianess---nomunsigned--error"},"nomUnsignedEightBytes(data, endianess) -> NomUnsigned | Error"),(0,r.kt)("p",null,"Nom helper to parse eight bytes into unsigned 64 bit integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endianess"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Endian")),(0,r.kt)("td",{parentName:"tr",align:null},"Endian type of ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("h3",{id:"nomunsignedtwobytesdata-endianess---nomunsigned--error"},"nomUnsignedTwoBytes(data, endianess) -> NomUnsigned | Error"),(0,r.kt)("p",null,"Nom helper to parse two bytes into unsigned 16 bit integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endianess"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Endian")),(0,r.kt)("td",{parentName:"tr",align:null},"Endian type of ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("h3",{id:"nomunsignedonebytesdata-endianess---nomunsigned--error"},"nomUnsignedOneBytes(data, endianess) -> NomUnsigned | Error"),(0,r.kt)("p",null,"Nom helper to parse one bytes into unsigned 8 bit integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endianess"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Endian")),(0,r.kt)("td",{parentName:"tr",align:null},"Endian type of ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("h3",{id:"nomunsignedsixteenbytesdata-endianess---nomunsignedlarge--error"},"nomUnsignedSixteenBytes(data, endianess) -> NomUnsignedLarge | Error"),(0,r.kt)("p",null,"Nom helper to parse sixteen bytes into unsigned 128 bit integer as a string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endianess"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Endian")),(0,r.kt)("td",{parentName:"tr",align:null},"Endian type of ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("h3",{id:"nomsignedfourbytesdata-endianess---nomsigned--error"},"nomSignedFourBytes(data, endianess) -> NomSigned | Error"),(0,r.kt)("p",null,"Nom helper to parse four bytes into signed 32 bit integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endianess"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Endian")),(0,r.kt)("td",{parentName:"tr",align:null},"Endian type of ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("h3",{id:"nomsignedeightbytesdata-endianess---nomsigned--error"},"nomSignedEightBytes(data, endianess) -> NomSigned | Error"),(0,r.kt)("p",null,"Nom helper to parse eight bytes into signed 64 bit integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endianess"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Endian")),(0,r.kt)("td",{parentName:"tr",align:null},"Endian type of ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("h3",{id:"nomsignedtwobytesdata-endianess---nomsigned--error"},"nomSignedTwoBytes(data, endianess) -> NomSigned | Error"),(0,r.kt)("p",null,"Nom helper to parse two bytes into signed 16 bit integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endianess"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Endian")),(0,r.kt)("td",{parentName:"tr",align:null},"Endian type of ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("h3",{id:"takedata-input---nom--error"},"take(data, input) -> Nom | Error"),(0,r.kt)("p",null,"Nom provided string or bytes based on input length. This function exposes the\nnom ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/nom/latest/nom/bytes/complete/fn.take.html"},"take")," function."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string OR Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"String or bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"input"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"How many bytes or characters nom should consume")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function main() {\n  let test = "Hello TypeScript!";\n  let len = "Hello".length;\n  let nom_data: Nom | Error = take(test, len);\n  if (nom_data instanceof Error) {\n    console.error(`Error when parsing data ${nom_data}`);\n    return nom_data;\n  }\n\n  // We nommed ("consumed") the length of `hello`\n  console.assert(nom_data.nommed, "Hello");\n  // We stil have some string data remaining\n  console.assert(nom_data.remaining, " TypeScript!");\n}\n')),(0,r.kt)("p",null,"Pseudo-code below for practical example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'let data = read_file("file.bin");\n// Now have bytes of a file. The file is in Little Endian format\n\n// First four bytes are the file signature\nlet sig = nomUnsignedFourBytes(data, endian.LE);\nif (sig instanceof Error) {\n  return sig;\n}\n\n// Our nom function consumed and converted the first 4 bytes to unsigned integer\nconsole.log(sig.value);\n\n// Next 2 bytes are length of UTF8 string. Our sig object contains the remaining bytes\nlet string_len = nomUnsignedTwoBytes(sig.remaining, endian.LE);\nif (string_len instanceof Error) {\n  return string_len;\n}\n\n// string_len now contains the length of the string that is next\n// Take the length of the string\nlet string_data = take(string_len.remaining, string_len.value);\nif (string_data instanceof Error) {\n  return string_data;\n}\n\n// Extract the string from the raw bytes we consumed\nlet string_value = extractUt8String(string_data.nommed);\n\nconsole.log(string_value);\n\n// Continue parsing remaining bytes with string_data.remaining\n')),(0,r.kt)("h3",{id:"takeuntildata-input---nom--error"},"takeUntil(data, input) -> Nom | Error"),(0,r.kt)("p",null,"Nom data ",(0,r.kt)("strong",{parentName:"p"},"until")," provided input. This function exposes the nom\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/nom/latest/nom/bytes/complete/fn.take_until.html"},"take_until"),"\nfunction. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," does not exist, we will get an error."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string OR Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"String or bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"input"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string OR Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"Nom ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," until input. Must be same type as ",(0,r.kt)("inlineCode",{parentName:"td"},"data"))))),(0,r.kt)("p",null,"Psuedo-code example below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function main() {\n  /** Here we have a very complex artifact. With lots of flags and extra data.\n   * We are only interested in some data.\n   * Luckily the data we want has signatures we can scan for\n   */\n  const data = read_file("complexArtifact.bin");\n\n  let first_sig = [1, 23, 33, 56];\n  const first_data = takeUntil(data, first_sig);\n  if (first_data instanceof Error) {\n    console.error(`Got error searching for first_data ${first_data}`);\n    return first_data;\n  }\n\n  // Now we have arrived at first_data sig. We dont care about anything we consumed to get here\n  // We have **NOT** consumed the signature yet!\n  const sig = nomUnsignedFourBytes(first_data.remaining, Endian.Le);\n  // Could technically skip this since, `takUntil` has guaranteed that we have 4 bytes remaining. Since we searched for `[1, 23, 33, 56]`\n  if (sig instanceof Error) {\n    return sig;\n  }\n\n  // Now lets get FILETIME timestamp\n  const time_data = nomUnsignedEightBytes(sig.remaining, Endian.Le);\n  if (time_data instanceof Error) {\n    return time_data;\n  }\n\n  // Convert FILETIME unsigned 64 bit value to unixepoch seconds\n  let unix_time = filetimeToUnixEpoch(time_data.value);\n  const pretty_data = new Date(unix_time * 1000);\n  const utcString = pretty_data.toUtcString();\n  console.log(`${utcString}`);\n\n  const second_sig = [83, 134, 54, 99];\n  const second_data = takeUntil(time_data.remaining, second_sig);\n  // Repeat same process above\n}\n')),(0,r.kt)("h3",{id:"takewhiledata-input---nom--error"},"takeWhile(data, input) -> Nom | Error"),(0,r.kt)("p",null,"Nom data while data ",(0,r.kt)("strong",{parentName:"p"},"IS")," equal to input. This function exposes the nom\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/nom/latest/nom/bytes/complete/fn.take_while.html"},"take_while"),"\nfunction."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string OR Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:null},"String or bytes to provide to nom")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"input"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string OR number")),(0,r.kt)("td",{parentName:"tr",align:null},"Nom ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," until input. Must be single character if ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," or a number <= 255 if ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array"))))),(0,r.kt)("p",null,"Psuedo-code example below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function main() {\n  // This file has an unknown amount of padding we have to deal with\n  const data = read_file("complexFile.bin");\n\n  const sig = nomUnsignedTwoBytes(data, Endian.Be);\n  if (sig instanceof Error) {\n    return sig;\n  }\n\n  // The next interesting piece of the file we want is a timestamp.\n  // But after the sig there is an unknown amount of zero padding we need to consume\n  // We **cannot** use `takeUntil` because our timestamp bytes can be anything\n\n  const pad = 0;\n  const padding_data = takeWhile(sig.remaining, pad);\n  if (padding_data instanceof Error) {\n    return padding_data;\n  }\n\n  // Our complex file uses both Big and Little Endian!\n  const time_data = nomUnsignedEightBytes(padding_data.remaining, Endian.Le);\n  const time = filetimeToUnixEpoch(time_data.value);\n  console.lot(time);\n\n  const unknown_data = nomUnsignedFourBytes(time_data.remaining, Endian.Be);\n  // Continue parsing the file\n}\n')))}u.isMDXComponent=!0}}]);