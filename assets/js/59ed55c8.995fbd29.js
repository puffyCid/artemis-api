"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[9060],{5128:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=t(7624),n=t(2172);const r={description:"Services installed on Windows",keywords:["windows","registry","persistence"]},c="Services",o={id:"Artifacts/Windows Artfacts/services",title:"Services",description:"Services installed on Windows",source:"@site/docs/Artifacts/Windows Artfacts/services.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/services",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/services",draft:!1,unlisted:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/services.md",tags:[],version:"current",lastUpdatedBy:"puffyCid",lastUpdatedAt:1718419793e3,frontMatter:{description:"Services installed on Windows",keywords:["windows","registry","persistence"]},sidebar:"artemisArtifacts",previous:{title:"Search",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/search"},next:{title:"Shellbags",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/shellbags"}},a={},l=[];function d(e){const i={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"services",children:"Services"}),"\n",(0,s.jsxs)(i.p,{children:["Windows ",(0,s.jsx)(i.code,{children:"Services"})," are a common form of persistence and privilege escalation on\nWindows systems. Service data is stored in the SYSTEM Registry file.",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(i.code,{children:"Services"})," run with SYSTEM level privileges."]}),"\n",(0,s.jsx)(i.p,{children:"Other Parsers:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Any tool that can read the Registry"}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://docs.velociraptor.app/artifact_references/pages/windows.system.services/",children:"Velociraptor"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"References:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://forensafe.com/blogs/windowsservices.html",children:"Services"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://github.com/Velocidex/velociraptor/blob/master/artifacts/definitions/Windows/System/Services.yaml",children:"Velociraptor"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://winreg-kb.readthedocs.io/en/latest/sources/system-keys/Services-and-drivers.html",children:"Libyal"})}),"\n"]}),"\n",(0,s.jsx)(i.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-toml",children:'system = "windows"\n\n[output]\nname = "services_collection"\ndirectory = "./tmp"\nformat = "jsonl"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "services"\n[artifacts.services]\n# alt_file = "C:\\\\Artifacts\\\\SYSTEM"\n'})}),"\n",(0,s.jsx)(i.h1,{id:"collection-options",children:"Collection Options"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"alt_file"})," Full path to alternative SYSTEM Registry file. This configuration\nis ",(0,s.jsx)(i.strong,{children:"optional"}),". By default artemis will parse the SYSTEM Registry at the\ndefault location."]}),"\n"]}),"\n",(0,s.jsx)(i.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,s.jsxs)(i.p,{children:["An array of ",(0,s.jsx)(i.code,{children:"Services"})," entries"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"export interface Services {\n  /**Current State of the Service */\n  state: string;\n  /**Name of Service */\n  name: string;\n  /**Display name of Service */\n  display_name: string;\n  /**Service description */\n  description: string;\n  /**Start mode of Service */\n  start_mode: string;\n  /**Path to executable for Service */\n  path: string;\n  /**Service types. Ex: KernelDriver */\n  service_type: string[];\n  /**Account associated with Service */\n  account: string;\n  /**Registry modified timestamp. May be used to determine when the Service was created */\n  modified: string;\n  /**DLL associated with Service */\n  service_dll: string;\n  /**Service command upon failure */\n  failure_command: string;\n  /**Reset period associated with Service */\n  reset_period: number;\n  /**Service actions upon failure */\n  failure_actions: FailureActions[];\n  /**Privileges associated with Service */\n  required_privileges: string[];\n  /**Error associated with Service */\n  error_control: string;\n  /**Registry path associated with Service */\n  reg_path: string;\n}\n\n/**\n * Failure actions executed when Service fails\n */\ninterface FailureActions {\n  /**Action executed upon failure */\n  action: string;\n  /**Delay in seconds on failure */\n  delay: number;\n}\n"})})]})}function p(e={}){const{wrapper:i}={...(0,n.M)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},2172:(e,i,t)=>{t.d(i,{I:()=>o,M:()=>c});var s=t(1504);const n={},r=s.createContext(n);function c(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);