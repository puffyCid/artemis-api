"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[3232],{8964:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=n(7624),a=n(2172);const s={description:"Windows execution tracker",keywords:["windows","registry"]},r="Amcache",c={id:"Artifacts/Windows Artfacts/amcache",title:"Amcache",description:"Windows execution tracker",source:"@site/docs/Artifacts/Windows Artfacts/amcache.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/amcache",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/amcache",draft:!1,unlisted:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/amcache.md",tags:[],version:"current",lastUpdatedBy:"puffyCid",lastUpdatedAt:1718419793e3,frontMatter:{description:"Windows execution tracker",keywords:["windows","registry"]},sidebar:"artemisArtifacts",previous:{title:"Windows Artifacts",permalink:"/artemis-api/docs/category/windows-artifacts"},next:{title:"BITS",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/bits"}},o={},l=[];function d(t){const e={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.M)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"amcache",children:"Amcache"}),"\n",(0,i.jsxs)(e.p,{children:["Windows ",(0,i.jsx)(e.code,{children:"Amcache"})," stores metadata related to execution of Windows applications.\nData is stored in the ",(0,i.jsx)(e.code,{children:"C:\\Windows\\appcompat\\Programs\\Amcache.hve"})," Registry file.\nThis Registry file also contains other metadata such as OS, hardware, and\napplication info. However, the Amcache artifact will only collect data related\nto the possible execution of Windows applications."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)("sup",{children:"*"})," While an entry in Amcache often implies the application was\nexecuted, Windows may pre-populate Amcache with entries based on a user browsing\nto a directory that contains an application."]}),"\n",(0,i.jsxs)(e.p,{children:["You can use the ",(0,i.jsx)(e.a,{href:"/artemis-api/docs/Artifacts/Windows%20Artfacts/registry",children:"Registry"})," artifact to parse the Amcache file if\nyou want to view other metadata such as OS, hardware, more."]}),"\n",(0,i.jsx)(e.p,{children:"Other Parsers:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://docs.velociraptor.app/artifact_references/pages/windows.detection.amcache/",children:"Velociraptor"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://ericzimmerman.github.io/#!index.md",children:"AmcacheParser"})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"References:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/libyal/dtformats/blob/main/documentation/AMCache%20file%20(AMCache.hve)%20format.asciidoc",children:"Libyal"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://www.ssi.gouv.fr/uploads/2019/01/anssi-coriin_2019-analysis_amcache.pdf",children:"ANSSI"})}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'system = "windows"\n\n[output]\nname = "amcache_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "amcache"\n[artifacts.amcache]\n# Optional\n# alt_file = \'D:\\\\data\\\\Amcache.hve\'\n'})}),"\n",(0,i.jsx)(e.h1,{id:"collection-options",children:"Collection Options"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"alt_file"})," Full path to an alternative Amcache.hve file. This configuration is\n",(0,i.jsx)(e.strong,{children:"optional"}),". By default artemis will parse the default Amcache.hve on the\nsystem"]}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,i.jsxs)(e.p,{children:["An array of ",(0,i.jsx)(e.code,{children:"Amcache"})," entries"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"export interface Amcache {\n  /**Last modified time for Registry key */\n  last_modified: string;\n  /**Path to application */\n  path: string;\n  /**Name of application */\n  name: string;\n  /**Original name of application from PE metadata */\n  original_name: string;\n  /**Version of application from PE metadata */\n  version: string;\n  /**Executable type and arch information */\n  binary_type: string;\n  /**Application product version from PE metadata */\n  product_version: string;\n  /**Application product name from PE metadata */\n  product_name: string;\n  /**Application language */\n  language: string;\n  /**Application file ID. This is also the SHA1 hash */\n  file_id: string;\n  /**Application linking timestamp as MM/DD/YYYY HH:mm:ss*/\n  link_date: string;\n  /**Hash of application path */\n  path_hash: string;\n  /**Program ID associated with the application */\n  program_id: string;\n  /**Size of application */\n  size: string;\n  /**Application publisher from PE metadata */\n  publisher: string;\n  /**Application Update Seqeuence Number (USN) */\n  usn: string;\n  /**SHA1 hash of the first ~31MBs of the application */\n  sha1: string;\n  /**Path in the Amcache.hve file */\n  reg_path: string;\n}\n"})})]})}function h(t={}){const{wrapper:e}={...(0,a.M)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},2172:(t,e,n)=>{n.d(e,{I:()=>c,M:()=>r});var i=n(1504);const a={},s=i.createContext(a);function r(t){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:r(t.components),i.createElement(s.Provider,{value:e},t.children)}}}]);