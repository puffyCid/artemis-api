"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[6906],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,f=d["".concat(c,".").concat(u)]||d[u]||p[u]||i;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={description:"Emond jobs on macOS",keywords:["macOS","persistence","plaintext"]},o="Emond",s={unversionedId:"Artifacts/macOS Artifacts/emond",id:"Artifacts/macOS Artifacts/emond",title:"Emond",description:"Emond jobs on macOS",source:"@site/docs/Artifacts/macOS Artifacts/emond.md",sourceDirName:"Artifacts/macOS Artifacts",slug:"/Artifacts/macOS Artifacts/emond",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/emond",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/macOS Artifacts/emond.md",tags:[],version:"current",frontMatter:{description:"Emond jobs on macOS",keywords:["macOS","persistence","plaintext"]},sidebar:"artemisArtifacts",previous:{title:"Cron",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/cron"},next:{title:"ExecPolicy",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/execpolicy"}},c={},l=[],m={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"emond"},"Emond"),(0,a.kt)("p",null,"macOS Event Monitor Daemon (",(0,a.kt)("inlineCode",{parentName:"p"},"Emond"),') is a srvices that allows users to register\nrules to perform actions when specific events are triggered, for example "system\nstartup". ',(0,a.kt)("inlineCode",{parentName:"p"},"Emond")," can be leveraged to acheive persistence on macOS. Starting on\nmacOS Ventura (13) ",(0,a.kt)("inlineCode",{parentName:"p"},"emond")," has been removed."),(0,a.kt)("p",null,"Other Parsers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"References:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://magnusviri.com/what-is-emond.html"},"What is emond")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.xorrior.com/emond-persistence/"},"Emond for Persistence"))),(0,a.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'system = "macos"\n\n[output]\nname = "emond_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "abdc"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "emond"\n')),(0,a.kt)("h1",{id:"collection-options"},"Collection Options"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"N/A")),(0,a.kt)("h1",{id:"output-structure"},"Output Structure"),(0,a.kt)("p",null,"An array of ",(0,a.kt)("inlineCode",{parentName:"p"},"Emond")," entries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Emond {\n  /**Name of `Emond` rule */\n  name: string;\n  /**Is rule enabled */\n  enabled: boolean;\n  /**Event types associated with the rule */\n  event_types: string[];\n  /**Start time of the rule */\n  start_tiem: string;\n  /**If partial criteria match should trigger the rule */\n  allow_partial_criterion_match: boolean;\n  /**Array of commad actions if rule is triggered */\n  command_actions: Command[];\n  /**Array of log actions if rule is triggered  */\n  log_actions: Log[];\n  /**Array of send email actions if rule is triggered */\n  send_email_actions: SendEmailSms[];\n  /**Array of send sms actions if rule is triggered. Has same structure as send email */\n  send_sms_actions: SendEmailSms[];\n  /**Criteria for the `Emond` rule */\n  criterion: Record<string, unknown>[];\n  /**Variables associated with the criterion  */\n  variables: Record<string, unknown>[];\n  /**If the emond client is enabled */\n  emond_clients_enabled: boolean;\n}\n\n/**\n * Commands to execute if rule is triggered\n */\ninterface Command {\n  /**Command name */\n  command: string;\n  /**User associated with command */\n  user: string;\n  /**Group associated with command */\n  group: string;\n  /**Arguments associated with command */\n  arguments: string[];\n}\n\n/**\n * Log settings if rule is triggered\n */\ninterface Log {\n  /**Log message content */\n  message: string;\n  /**Facility associated with log action */\n  facility: string;\n  /**Level of log */\n  log_level: string;\n  /**Log type */\n  log_type: string;\n  /**Parameters associated with log action */\n  parameters: Record<string, unknown>;\n}\n\n/**\n * Email or SMS to send if rule is triggered\n */\ninterface SendEmailSms {\n  /**Content of the email/sms */\n  message: string;\n  /**Subject of the email/sms */\n  subject: string;\n  /**Path to local binary */\n  localization_bundle_path: string;\n  /**Remote URL to send the message */\n  relay_host: string;\n  /**Email associated with email/sms action */\n  admin_email: string;\n  /**Targerts to receive email/sms */\n  recipient_addresses: string[];\n}\n")))}p.isMDXComponent=!0}}]);