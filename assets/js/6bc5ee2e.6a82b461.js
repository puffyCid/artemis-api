"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[4088],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>y});var r=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},s=Object.keys(t);for(r=0;r<s.length;r++)n=s[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(r=0;r<s.length;r++)n=s[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var c=r.createContext({}),l=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(c.Provider,{value:e},t.children)},d="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,s=t.originalType,c=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),d=l(n),p=i,y=d["".concat(c,".").concat(p)]||d[p]||m[p]||s;return n?r.createElement(y,a(a({ref:e},u),{},{components:n})):r.createElement(y,a({ref:e},u))}));function y(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var s=n.length,a=new Array(s);a[0]=p;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=t,o[d]="string"==typeof t?t:i,a[1]=o;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},229:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const s={description:"Systemd logging files",keywords:["linux","logs","binary"]},a="Journals",o={unversionedId:"Artifacts/Linux Artifacts/journals",id:"Artifacts/Linux Artifacts/journals",title:"Journals",description:"Systemd logging files",source:"@site/docs/Artifacts/Linux Artifacts/journals.md",sourceDirName:"Artifacts/Linux Artifacts",slug:"/Artifacts/Linux Artifacts/journals",permalink:"/docs/Artifacts/Linux Artifacts/journals",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Linux Artifacts/journals.md",tags:[],version:"current",frontMatter:{description:"Systemd logging files",keywords:["linux","logs","binary"]},sidebar:"artemisArtifacts",previous:{title:"Files",permalink:"/docs/Artifacts/Linux Artifacts/files"},next:{title:"Logons",permalink:"/docs/Artifacts/Linux Artifacts/logons"}},c={},l=[],u={toc:l},d="wrapper";function m(t){let{components:e,...n}=t;return(0,i.kt)(d,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"journals"},"Journals"),(0,i.kt)("p",null,"Linux ",(0,i.kt)("inlineCode",{parentName:"p"},"Journals")," are the log files associated with the systemd service. Systemd\nis a popular system service that is common on most Linux distros. The logs can\ncontain data related to application activity, sudo commands, and much more."),(0,i.kt)("p",null,"Other Parsers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"None")),(0,i.kt)("p",null,"References:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://systemd.io/JOURNAL_FILE_FORMAT/"},"Journal format")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://wiki.archlinux.org/title/Systemd/Journal"},"Arch Wiki"))),(0,i.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'system = "linux"\n\n[output]\nname = "journals_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "abdc"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "journals"\n')),(0,i.kt)("h1",{id:"collection-options"},"Collection Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"N/A")),(0,i.kt)("h1",{id:"output-structure"},"Output Structure"),(0,i.kt)("p",null,"An array of ",(0,i.kt)("inlineCode",{parentName:"p"},"Journal")," entries"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'export interface Journal {\n  /**User ID associated with entry */\n  uid: number;\n  /**Group ID associated with entry */\n  gid: number;\n  /**Process ID associated with entry */\n  pid: number;\n  /**Thread ID associated with entry */\n  thread_id: number;\n  /**Command associated with entry */\n  comm: string;\n  /**Priority associated with entry */\n  priority: string;\n  /**Syslog facility associated with entry */\n  syslog_facility: string;\n  /**Executable file associated with entry */\n  executable: string;\n  /**Cmdline args associated with entry */\n  cmdline: string;\n  /**Effective capabilities of process associated with entry */\n  cap_effective: string;\n  /**Session of the process associated with entry */\n  audit_session: number;\n  /**Login UID of the process associated with entry */\n  audit_loginuid: number;\n  /**Systemd Countrol Group associated with entry */\n  systemd_cgroup: string;\n  /**Systemd owner UID associated with entry */\n  systemd_owner_uid: number;\n  /**Systemd unit associated with entry */\n  systemd_unit: string;\n  /**Systemd user unit associated with entry */\n  systemd_user_unit: string;\n  /**Systemd slice associated with entry */\n  systemd_slice: string;\n  /**Sysemd user slice associated with entry */\n  systemd_user_slice: string;\n  /**Systemd invocation ID associated with entry */\n  systemd_invocation_id: string;\n  /**Kernel Boot ID associated with entry */\n  boot_id: string;\n  /**Machine ID of host associated with entry */\n  machine_id: string;\n  /**Hostname associated with entry */\n  hostname: string;\n  /**Runtime scope associated with entry */\n  runtime_scope: string;\n  /**Trused Timestamp associated with entry in UNIXEPOCH microseconds */\n  source_realtime: number;\n  /**Timestamp associated with entry in UNIXEPOCH microseconds */\n  realtime: number;\n  /**How entry was received by the Journal service */\n  transport: string;\n  /**Journal message entry */\n  message: string;\n  /**Message ID associated with Journal Catalog */\n  message_id: string;\n  /**Unit result associated with entry */\n  unit_result: string;\n  /**Code line for file associated with entry */\n  code_line: number;\n  /**Code function for file associated with entry */\n  code_function: string;\n  /**Code file associated with entry */\n  code_file: string;\n  /**User invocation ID associated with entry */\n  user_invocation_id: string;\n  /**User unit associated with entry */\n  user_unit: string;\n  /**\n   * Custom fields associated with entry.\n   * Example:\n   * ```\n   * "custom": {\n   *            "_SOURCE_MONOTONIC_TIMESTAMP": "536995",\n   *            "_UDEV_SYSNAME": "0000:00:1c.3",\n   *            "_KERNEL_DEVICE": "+pci:0000:00:1c.3",\n   *            "_KERNEL_SUBSYSTEM": "pci"\n   *        }\n   * ```\n   */\n  custom: Record<string, string>;\n  /**Sequence Number associated with entry */\n  seqnum: number;\n}\n')))}m.isMDXComponent=!0}}]);