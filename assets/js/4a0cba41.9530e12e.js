"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[9380],{3905:(t,e,r)=>{r.d(e,{Zo:()=>s,kt:()=>k});var a=r(7294);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},l=Object.keys(t);for(a=0;a<l.length;a++)r=l[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)r=l[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var p=a.createContext({}),d=function(t){var e=a.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},s=function(t){var e=d(t.components);return a.createElement(p.Provider,{value:e},t.children)},m="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,l=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),m=d(r),h=n,k=m["".concat(p,".").concat(h)]||m[h]||u[h]||l;return r?a.createElement(k,i(i({ref:e},s),{},{components:r})):a.createElement(k,i({ref:e},s))}));function k(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=r.length,i=new Array(l);i[0]=h;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[m]="string"==typeof t?t:n,i[1]=o;for(var d=2;d<l;d++)i[d]=r[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},3346:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=r(7462),n=(r(7294),r(3905));const l={description:"Interacting with the Filesystem"},i="Filesystem APIs",o={unversionedId:"API/Helper/filesystem",id:"API/Helper/filesystem",title:"Filesystem APIs",description:"Interacting with the Filesystem",source:"@site/docs/API/Helper/filesystem.md",sourceDirName:"API/Helper",slug:"/API/Helper/filesystem",permalink:"/docs/API/Helper/filesystem",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/API/Helper/filesystem.md",tags:[],version:"current",frontMatter:{description:"Interacting with the Filesystem"},sidebar:"artemisAPI",previous:{title:"Environment APIs",permalink:"/docs/API/Helper/environment"},next:{title:"Nom APIs",permalink:"/docs/API/Helper/nom"}},p={},d=[{value:"stat(path) -&gt; <code>FileInfo | Error</code>",id:"statpath---fileinfo--error",level:3},{value:"hash(path, md5, sha1, sha256) -&gt; <code>Hashes | Error</code>",id:"hashpath-md5-sha1-sha256---hashes--error",level:3},{value:"readTextFile(path) -&gt; <code>string | Error</code>",id:"readtextfilepath---string--error",level:3},{value:"readFile(path) -&gt; <code>Uint8Array | Error</code>",id:"readfilepath---uint8array--error",level:3},{value:"glob(pattern) -&gt; <code>GlobInfo[] | Error</code>",id:"globpattern---globinfo--error",level:3},{value:"readDir(path) -&gt; <code>Promise&lt;FileInfo[]&gt; | Error</code>",id:"readdirpath---promisefileinfo--error",level:3}],s={toc:d},m="wrapper";function u(t){let{components:e,...r}=t;return(0,n.kt)(m,(0,a.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"filesystem-apis"},"Filesystem APIs"),(0,n.kt)("p",null,"The artemis API contains several functions that can be used to interact with the\nfilesystem."),(0,n.kt)("h3",{id:"statpath---fileinfo--error"},"stat(path) -> ",(0,n.kt)("inlineCode",{parentName:"h3"},"FileInfo | Error")),(0,n.kt)("p",null,"Return basic metadata about a file or directory"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Param"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"path"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"File or directory to get metadata about")))),(0,n.kt)("h3",{id:"hashpath-md5-sha1-sha256---hashes--error"},"hash(path, md5, sha1, sha256) -> ",(0,n.kt)("inlineCode",{parentName:"h3"},"Hashes | Error")),(0,n.kt)("p",null,"Return hashes for a single file"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Param"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"path"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"File to hash")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"md5"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"Enable MD5 hashing")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"sha1"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"Enable SHA1 hashing")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"sha256"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"boolean")),(0,n.kt)("td",{parentName:"tr",align:null},"Enable SHA256 hashing")))),(0,n.kt)("h3",{id:"readtextfilepath---string--error"},"readTextFile(path) -> ",(0,n.kt)("inlineCode",{parentName:"h3"},"string | Error")),(0,n.kt)("p",null,"Read a text file. Currently only files less than 2GB in size can be read"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Param"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"path"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Text file to read")))),(0,n.kt)("h3",{id:"readfilepath---uint8array--error"},"readFile(path) -> ",(0,n.kt)("inlineCode",{parentName:"h3"},"Uint8Array | Error")),(0,n.kt)("p",null,"Read a file using regular OS APIs. Currently only files less than 2GB in size\ncan be read"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Param"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"path"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"File to read")))),(0,n.kt)("h3",{id:"globpattern---globinfo--error"},"glob(pattern) -> ",(0,n.kt)("inlineCode",{parentName:"h3"},"GlobInfo[] | Error")),(0,n.kt)("p",null,"Parse glob patterns based on Rust ",(0,n.kt)("a",{parentName:"p",href:"https://docs.rs/glob/latest/glob/"},"glob"),"\nsupport"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Param"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"pattern"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Glob pattern to parse. Ex: ",(0,n.kt)("inlineCode",{parentName:"td"},"C:\\\\*")," to get all files and directories at Windows C directory")))),(0,n.kt)("h3",{id:"readdirpath---promisefileinfo--error"},"readDir(path) -> ",(0,n.kt)("inlineCode",{parentName:"h3"},"Promise<FileInfo[]> | Error")),(0,n.kt)("p",null,"Read a provided directory and get list of files. This function is ",(0,n.kt)("inlineCode",{parentName:"p"},"async"),"!"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Param"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"path"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Directory to read")))))}u.isMDXComponent=!0}}]);