"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[5343],{3366:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"API/API Scenarios/ese","title":"ESE Databases","description":"How to extract data from ESE databases","source":"@site/docs/API/API Scenarios/ese.md","sourceDirName":"API/API Scenarios","slug":"/API/API Scenarios/ese","permalink":"/artemis-api/docs/API/API Scenarios/ese","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/API/API Scenarios/ese.md","tags":[],"version":"current","lastUpdatedBy":"puffyCid","lastUpdatedAt":1739135633000,"frontMatter":{"description":"How to extract data from ESE databases"},"sidebar":"artemisAPI","previous":{"title":"Acquiring Files","permalink":"/artemis-api/docs/API/API Scenarios/acquire_files"},"next":{"title":"iTunes Backup Extraction","permalink":"/artemis-api/docs/API/API Scenarios/itunes"}}');var s=a(4848),o=a(8453);const i={description:"How to extract data from ESE databases"},r="ESE Databases",l={},c=[{value:"ESE Parsing Guide",id:"ese-parsing-guide",level:2},{value:"Create an EseDatabase class instance",id:"create-an-esedatabase-class-instance",level:3},{value:"Extract the Catalog",id:"extract-the-catalog",level:3},{value:"Getting Table information",id:"getting-table-information",level:3},{value:"Get Pages associated with Table",id:"get-pages-associated-with-table",level:3},{value:"Getting our data",id:"getting-our-data",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ese-databases",children:"ESE Databases"})}),"\n",(0,s.jsxs)(n.p,{children:["The Windows Extensible Storage Engine\n(",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Extensible_Storage_Engine",children:"ESE"}),") is an open\nsource database file used by several Windows components. It is used by several\ndifferent types of interesting forensic artifacts such as:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Windows BITS"}),"\n",(0,s.jsx)(n.li,{children:"Windows Search"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Artemis allows analysts to extract and explorer ESE databases using the\nTypeScript API. However, these database files may become very large. For\nexample, the Windows Search database can range from 200MBs to 8GBs in size."}),"\n",(0,s.jsx)(n.p,{children:"So we must careful that we do not read all of the data into memory."}),"\n",(0,s.jsx)(n.p,{children:"Artemis provides a TypeScript EseDatabase class to help us parse and interact\nwith ESE databases."}),"\n",(0,s.jsx)(n.h2,{id:"ese-parsing-guide",children:"ESE Parsing Guide"}),"\n",(0,s.jsxs)(n.p,{children:["Let walkthrough a scenario where we can leverage the artemis API to extract data\nfrom the Windows\n",(0,s.jsx)(n.a,{href:"https://www.crowdstrike.com/blog/user-access-logging-ual-overview/",children:"User Access Logging database"}),"\n(UAL). The guide below assumes you have cloned the artemis API repository to\nyour local system. However, you may also import the API remotely, you will just\nneed to change the imports paths."]}),"\n",(0,s.jsxs)(n.p,{children:["The functions in this guide are documented\n",(0,s.jsx)(n.a,{href:"/artemis-api/docs/API/Artifacts/windows#ese-database-class",children:"here"})]}),"\n",(0,s.jsx)(n.h3,{id:"create-an-esedatabase-class-instance",children:"Create an EseDatabase class instance"}),"\n",(0,s.jsx)(n.p,{children:"Before we can parse an ESE database we need to initialize an instance of the\nEseDatabase class. This is not too difficult :)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { EseDatabase } from "./artemis-api/src/windows/ese.ts";\n\nfunction main() {\n  // Provide path to the UAL file\n  const path = "C:\\\\Windows\\\\System32\\\\LogFiles\\\\sum\\\\Current.mdb";\n\n  const ese = new EseDatabase(path);\n}\n\nmain();\n'})}),"\n",(0,s.jsx)(n.p,{children:"The above code initializes a new EseDatabase instance that we will use to parse\nthe UAL database."}),"\n",(0,s.jsx)(n.h3,{id:"extract-the-catalog",children:"Extract the Catalog"}),"\n",(0,s.jsx)(n.p,{children:"Before we can do any parsing of the database we must get the Catalog. The\nCatalog is a special table in all ESE databases that contains metadata on all\ntables and columns in the database."}),"\n",(0,s.jsx)(n.p,{children:"There are 4 high level steps required in order to extract data from an ESE\ndatabase:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Parse and extract the Catalog"}),"\n",(0,s.jsx)(n.li,{children:"Get the metadata associated with the ESE table(s) we are interested in"}),"\n",(0,s.jsx)(n.li,{children:"Get an array of pages associated with the table. Pages contain the table data"}),"\n",(0,s.jsx)(n.li,{children:"Extract the table data based on the pages provided"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The code below shows how to extract the Catalog from the Current.mdb database."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { EseDatabase } from "./artemis-api/src/windows/ese.ts";\nimport { WindowsError } from "./artemis-api/src/windows/errors.ts";\n\nfunction main() {\n  // Provide path to the UAL file\n  const path = "C:\\\\Windows\\\\System32\\\\LogFiles\\\\sum\\\\Current.mdb";\n\n  const ese = new EseDatabase(path);\n\n  // Get array of Catalog entries\n  const catalog = ese.catalogInfo();\n  if (catalog instanceof WindowsError) {\n    return catalog;\n  }\n}\n\nmain();\n'})}),"\n",(0,s.jsx)(n.p,{children:"As mentioned the Catalog contains metadata on all Tables and Columns in an ESE\ndatabase. We can use this the help explore what kind of data exists in the\ndatabase."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { EseDatabase } from "./artemis-api/src/windows/ese.ts";\nimport { WindowsError } from "./artemis-api/src/windows/errors.ts";\n\nfunction main() {\n  // Provide path to the UAL file\n  const path = "C:\\\\Windows\\\\System32\\\\LogFiles\\\\sum\\\\Current.mdb";\n\n  const ese = new EseDatabase(path);\n\n  // Get array of Catalog entries\n  const catalog = ese.catalogInfo();\n  if (catalog instanceof WindowsError) {\n    return catalog;\n  }\n\n  for (const entry of catalog) {\n    console.log(`${entry.name} - Catalog Type: ${entry.catalog_type}`);\n  }\n}\n\nmain();\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Make sure you are checking for errors when parsing the ESE database. If artemis\nencounters an error you will probably not be able to parse the entire database.\nIf artemis fails to parse the Catalog, then you will not be able to parse the\ndatabase."})}),"\n",(0,s.jsx)(n.p,{children:"The code above loops through the Catalog and prints out probably the most\ninteresting properties in the object:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The name of the Catalog entry"}),"\n",(0,s.jsx)(n.li,{children:"The CatalogType for that entry."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The CatalogType will be one of the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'export enum CatalogType {\n  Table = "Table",\n  Column = "Column",\n  Index = "Index",\n  LongValue = "LongValue",\n  Callback = "Callback",\n  SlvAvail = "SlvAvail",\n  SlvSpaceMap = "SlvSpaceMap",\n  Unknown = "Unknown",\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Only the enums Table and Column are the most interesting. The remaining types\nare associated with the database internals."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["All ESE objects that artemis returns are defined in the\n",(0,s.jsx)(n.a,{href:"/artemis-api/docs/Artifacts/Windows%20Artfacts/ese",children:"ESE"})," artifact. Do not worry too much\nabout the large amount of objects, artemis will handle all of the complexity and\nheavy lifting for parsing the data."]})}),"\n",(0,s.jsx)(n.h3,{id:"getting-table-information",children:"Getting Table information"}),"\n",(0,s.jsx)(n.p,{children:"Since we are parsing the Current.mdb database, we are mainly interested the\nCLIENTS table."}),"\n",(0,s.jsx)(n.p,{children:"The code below shows how to extract metadata associated with the CLIENTS table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { EseDatabase } from "./artemis-api/src/windows/ese.ts";\nimport { WindowsError } from "./artemis-api/src/windows/errors.ts";\n\nfunction main() {\n  // Provide path to the UAL file\n  const path = "C:\\\\Windows\\\\System32\\\\LogFiles\\\\sum\\\\Current.mdb";\n\n  const ese = new EseDatabase(path);\n\n  // Get array of Catalog entries\n  const catalog = ese.catalogInfo();\n  if (catalog instanceof WindowsError) {\n    return catalog;\n  }\n\n  const name = "CLIENTS";\n  const info = ese.tableInfo(catalog, name);\n  console.log(info);\n}\n\nmain();\n'})}),"\n",(0,s.jsx)(n.p,{children:"The tableInfo function will extract all metadata from the Catalog that is\nassociated with our table name (CLIENTS)."}),"\n",(0,s.jsx)(n.h3,{id:"get-pages-associated-with-table",children:"Get Pages associated with Table"}),"\n",(0,s.jsx)(n.p,{children:"We are now at step 3 of the 4 step process. We now must get all of the pages\nassociated with our table (CLIENTS). These pages will point to where our data\nis."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { EseDatabase } from "./artemis-api/src/windows/ese.ts";\nimport { WindowsError } from "./artemis-api/src/windows/errors.ts";\n\nfunction main() {\n  // Provide path to the UAL file\n  const path = "C:\\\\Windows\\\\System32\\\\LogFiles\\\\sum\\\\Current.mdb";\n\n  const ese = new EseDatabase(path);\n\n  // Get array of Catalog entries\n  const catalog = ese.catalogInfo();\n  if (catalog instanceof WindowsError) {\n    return catalog;\n  }\n\n  const name = "CLIENTS";\n  const info = ese.tableInfo(catalog, name);\n\n  const pages = ese.getPages(info.table_page);\n  if (pages instanceof WindowsError) {\n    return;\n  }\n\n  console.log(pages.length);\n}\n\nmain();\n'})}),"\n",(0,s.jsx)(n.p,{children:"The code above will now get all of the pages associated with the table CLIENTS!"}),"\n",(0,s.jsx)(n.h3,{id:"getting-our-data",children:"Getting our data"}),"\n",(0,s.jsxs)(n.p,{children:["We are now at the last step in order to get our data! This last step is the most\nimportant, because ",(0,s.jsx)(n.strong,{children:"you"})," will decide how much memory artemis will use in order\nto parse the database to get our data."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { EseDatabase } from "./artemis-api/src/windows/ese.ts";\nimport { WindowsError } from "./artemis-api/src/windows/errors.ts";\n\nfunction main() {\n  // Provide path to the UAL file\n  const path = "C:\\\\Windows\\\\System32\\\\LogFiles\\\\sum\\\\Current.mdb";\n\n  const ese = new EseDatabase(path);\n\n  // Get array of Catalog entries\n  const catalog = ese.catalogInfo();\n  if (catalog instanceof WindowsError) {\n    return catalog;\n  }\n\n  const name = "CLIENTS";\n  const info = ese.tableInfo(catalog, name);\n\n  const pages = ese.getPages(info.table_page);\n  if (pages instanceof WindowsError) {\n    return;\n  }\n\n  console.log(pages.length);\n\n  // getRows() returns Record<string, EseTable[][]>\n  const data = ese.getRows(pages, info);\n  if (data instanceof WindowsError) {\n    return;\n  }\n\n  console.log(data["CLIENTS"].length);\n}\n\nmain();\n'})}),"\n",(0,s.jsx)(n.p,{children:"The code above calls the function getRows() which will get our data associated\nwith CLIENTS table."}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:"The number of pages and table content will determine the amount of memory\nartemis uses."}),(0,s.jsxs)(n.p,{children:["Ex: If a table has 5 columns and 1000 pages and you provide 1000 pages to\ngetRows(), artemis will return back all of the data. This ",(0,s.jsx)(n.strong,{children:"may"})," be ok. If the\n5 columns only have numbers or small text then it ",(0,s.jsx)(n.strong,{children:"probably"})," will not require\na lot of memory."]}),(0,s.jsx)(n.p,{children:"However, if each column contain 1MB of data and there are 1000 rows, then\nartemis will end up using a lot of memory."})]}),"\n",(0,s.jsx)(n.p,{children:"Since the Current.mdb database can potentially be very large we do not want to\nparse all pages at once. We will need to parse them in chunks."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { EseDatabase } from "./artemis-api/src/windows/ese.ts";\nimport { WindowsError } from "./artemis-api/src/windows/errors.ts";\n\nfunction main() {\n  // Provide path to the UAL file\n  const path = "C:\\\\Windows\\\\System32\\\\LogFiles\\\\sum\\\\Current.mdb";\n\n  const ese = new EseDatabase(path);\n\n  // Get array of Catalog entries\n  const catalog = ese.catalogInfo();\n  if (catalog instanceof WindowsError) {\n    return catalog;\n  }\n\n  const name = "CLIENTS";\n  const info = ese.tableInfo(catalog, name);\n\n  const pages = ese.getPages(info.table_page);\n  if (pages instanceof WindowsError) {\n    return;\n  }\n\n  console.log(pages.length);\n\n  const chunk_limit = 80;\n  let page_chunks = [];\n\n  // Instead of using all pages at once. Divide the pages into smaller chunks and parse them\n  for (const page of pages) {\n    if (page_chunks.length != chunk_limit) {\n      page_chunks.push(page);\n      continue;\n    }\n    // getRows() returns Record<string, EseTable[][]>\n    const data = ese.getRows(page_chunks, info);\n    if (data instanceof WindowsError) {\n      return;\n    }\n\n    console.log(data["CLIENTS"].length);\n\n    // Go through all rows\n    for (const row of data["CLIENTS"]) {\n      // Go through all columns\n      for (const column of row) {\n        console.log(\n          `Name: ${column.column_name} - Type: ${column.column_type} - Data: ${column.column_data}`,\n        );\n      }\n    }\n\n    page_chunks = [];\n  }\n\n  // Just in case we have any leftover pages\n  if (page_chunks.length != 0) {\n    const data = ese.getRows(page_chunks, info);\n    if (data instanceof WindowsError) {\n      return;\n    }\n\n    console.log(data["CLIENTS"].length);\n  }\n}\n\nmain();\n'})}),"\n",(0,s.jsx)(n.p,{children:"The above code puts our pages into smaller chunks before calling the function\ngetRows(), this allows to us to get all of the data associated with the CLIENTS\ntable while keeping memory usage low."}),"\n",(0,s.jsxs)(n.p,{children:["Additional details on ColumnTypes and EseTable structure can be found\n",(0,s.jsx)(n.a,{href:"/artemis-api/docs/Artifacts/Windows%20Artfacts/ese",children:"here"})]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"There is no perfect number when deciding the number of pages to provide to\ngetRows(). In general the higher the page number the faster artemis will be when\nparsing the database but at the cost of memory usage."}),(0,s.jsx)(n.p,{children:"If you do not know what kind of data is an ESE database table:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Review the TableInfo object!"}),"\n",(0,s.jsx)(n.li,{children:"A safe page number would probably be between 50-100"}),"\n"]}),(0,s.jsx)(n.p,{children:"For additional background, the Windows Search database contains almost 600\ncolumns and can grow to be very very large. Artemis uses 400 page chunks to\nparse the Search database, which uses ~800-900MBs of memory."})]}),"\n",(0,s.jsx)(n.h1,{id:"ese-references",children:"ESE References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/ese-deep-dive-part-1-the-anatomy-of-an-ese-database/ba-p/400496",children:"https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/ese-deep-dive-part-1-the-anatomy-of-an-ese-database/ba-p/400496"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/libyal/libesedb/blob/main/documentation/Extensible%20Storage%20Engine%20(ESE)%20Database%20File%20(EDB)%20format.asciidoc",children:"https://github.com/libyal/libesedb/blob/main/documentation/Extensible%20Storage%20Engine%20(ESE)%20Database%20File%20(EDB)%20format.asciidoc"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var t=a(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);