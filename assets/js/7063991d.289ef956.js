"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[4846],{21096:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Artifacts/FreeBSD Artifacts/files","title":"Files","description":"FreeBSD file metadata","source":"@site/docs/Artifacts/FreeBSD Artifacts/files.md","sourceDirName":"Artifacts/FreeBSD Artifacts","slug":"/Artifacts/FreeBSD Artifacts/files","permalink":"/artemis/docs/Artifacts/FreeBSD Artifacts/files","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/FreeBSD Artifacts/files.md","tags":[],"version":"current","lastUpdatedBy":"puffyCid","lastUpdatedAt":1748155945000,"frontMatter":{"description":"FreeBSD file metadata","keywords":["freebsd"]},"sidebar":"artemisArtifacts","previous":{"title":"ELF","permalink":"/artemis/docs/Artifacts/FreeBSD Artifacts/elf"},"next":{"title":"Packages","permalink":"/artemis/docs/Artifacts/FreeBSD Artifacts/packages"}}');var s=t(74848),r=t(28453);const a={description:"FreeBSD file metadata",keywords:["freebsd"]},l="Files",o={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"files",children:"Files"})}),"\n",(0,s.jsxs)(n.p,{children:["A regular FreeBSD filelisting. Artemis uses the\n",(0,s.jsx)(n.a,{href:"https://crates.io/crates/walkdir",children:"walkdir"})," crate to recursively walk the files\nand directories on the system."]}),"\n",(0,s.jsx)(n.p,{children:"Since a filelisting can be extremely large, every 100k entries artemis will\noutput the data and then continue."}),"\n",(0,s.jsx)(n.p,{children:"Other Parsers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Any tool that can recursively list files and directories"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"References:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"N/A"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[output]\nname = "files_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "abdc"\ncollection_id = 1\noutput = "local"\ntimeline = false\n\n[[artifacts]]\nartifact_name = "files" # Name of artifact\n[artifacts.files]\nstart_path = "/usr/bin" # Start of file listing\n# Optional\ndepth = 5 # How many sub directories to descend\n# Optional\nmetadata = true # Get executable metadata\n# Optional\nmd5 = true # MD5 all files\n# Optional\nsha1 = false # SHA1 all files\n# Optional\nsha256 = false # SHA256 all files\n# Optional\npath_regex = "" # Regex for paths\n# Optional\nfile_regex = "" # Regex for files\n'})}),"\n",(0,s.jsx)(n.h1,{id:"collection-options",children:"Collection Options"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"start_path"})," Where to start the file listing. Must exist on the endpoint. To\nstart at root use ",(0,s.jsx)(n.code,{children:"/"}),". This configuration is ",(0,s.jsx)(n.strong,{children:"required"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"depth"})," Specify how many directories to descend from the ",(0,s.jsx)(n.code,{children:"start_path"}),". Default\nis one (1). Must be a postive number. Max value is 255. This configuration is\n",(0,s.jsx)(n.strong,{children:"optional"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"metadata"})," Get ",(0,s.jsx)(n.a,{href:"/artemis/docs/Artifacts/FreeBSD%20Artifacts/elf",children:"ELF"})," data from ",(0,s.jsx)(n.code,{children:"ELF"})," files. This configuration is\n",(0,s.jsx)(n.strong,{children:"optional"}),". Default is ",(0,s.jsx)(n.strong,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"md5"})," Boolean value to enable MD5 hashing on all files. This configuration is\n",(0,s.jsx)(n.strong,{children:"optional"}),". Default is ",(0,s.jsx)(n.strong,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sha1"})," Boolean value to enable SHA1 hashing on all files. This configuration\nis ",(0,s.jsx)(n.strong,{children:"optional"}),". Default is ",(0,s.jsx)(n.strong,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sha256"})," Boolean value to enable SHA256 hashing on all files. This\nconfiguration is ",(0,s.jsx)(n.strong,{children:"optional"}),". Default is ",(0,s.jsx)(n.strong,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"path_regex"})," Only descend into paths (directories) that match the provided\nregex. This configuration is ",(0,s.jsx)(n.strong,{children:"optional"}),". Default is no Regex"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file_regex"})," Only return entries that match the provided regex. This\nconfiguration is ",(0,s.jsx)(n.strong,{children:"optional"}),". Default is no Regex"]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,s.jsxs)(n.p,{children:["An array of ",(0,s.jsx)(n.code,{children:"LinuxFileInfo"})," entries"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export interface LinuxFileInfo {\n  /**Full path to file or directory */\n  full_path: string;\n  /**Directory path */\n  directory: string;\n  /**Filename */\n  filename: string;\n  /**Extension of file if any */\n  extension: string;\n  /**Created timestamp */\n  created: string;\n  /**Modified timestamp */\n  modified: string;\n  /**Changed timestamp */\n  changed: string;\n  /**Accessed timestamp */\n  accessed: string;\n  /**Size of file in bytes */\n  size: number;\n  /**Inode associated with entry */\n  inode: number;\n  /**Mode of file entry */\n  mode: number;\n  /**User ID associated with file */\n  uid: number;\n  /**Group ID associated with file */\n  gid: number;\n  /**MD5 of file */\n  md5: string;\n  /**SHA1 of file */\n  sha1: string;\n  /**SHA256 of file */\n  sha256: string;\n  /**Is the entry a file */\n  is_file: boolean;\n  /**Is the entry a directory */\n  is_directory: boolean;\n  /**Is the entry a symbolic links */\n  is_symlink: boolean;\n  /**Depth the file from provided start point */\n  depth: number;\n  /**ELF binary metadata */\n  binary_info: ElfInfo;\n}\n"})})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);