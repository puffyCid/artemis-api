"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[2800],{184:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=r(7624),i=r(2172);const s={description:"macOS BIOME data",keywords:["macos","protobuf","binary"]},n="Bill of Materials",c={id:"Artifacts/macOS Artifacts/biome",title:"Bill of Materials",description:"macOS BIOME data",source:"@site/docs/Artifacts/macOS Artifacts/biome.md",sourceDirName:"Artifacts/macOS Artifacts",slug:"/Artifacts/macOS Artifacts/biome",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/biome",draft:!1,unlisted:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/macOS Artifacts/biome.md",tags:[],version:"current",frontMatter:{description:"macOS BIOME data",keywords:["macos","protobuf","binary"]},sidebar:"artemisArtifacts",previous:{title:"Applications",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/apps"},next:{title:"Bill of Materials",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/bom"}},o={},d=[];function l(t){const e={a:"a",br:"br",code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.M)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,a.jsxs)(e.p,{children:["macOS BIOME data contains data related to application runtime. It partially\nreplaces the KnowledgeC.db.",(0,a.jsx)(e.br,{}),"\n","Its kind of similar to Windows SRUM"]}),"\n",(0,a.jsx)(e.h1,{id:"collection",children:"Collection"}),"\n",(0,a.jsxs)(e.p,{children:["You have to use the artemis ",(0,a.jsx)(e.a,{href:"/artemis-api/docs/API/overview",children:"api"})," in order to parse\n",(0,a.jsx)(e.code,{children:"BIOME"})," data."]}),"\n",(0,a.jsx)(e.h1,{id:"sample-api-script",children:"Sample API Script"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'import { parseBiome } from "https://raw.githubusercontent.com/puffycid/artemis-api/master/mod.ts";\n\nfunction main() {\n  const results = parseBom();\n  console.log(results);\n}\n'})}),"\n",(0,a.jsx)(e.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,a.jsxs)(e.p,{children:["A ",(0,a.jsx)(e.code,{children:"Biome"})," object structure"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"export interface Biome {\n  path: string;\n  /**\n   * BIOME files contain Protobuf data. Each type of BIOME needs to be extracted.\n   * Further research could be done to extract raw data into specific interfaces\n   * If parsing fails, we base64 encode the protobuf data and include that\n   */\n  raw: Record<string, unknown>[];\n}\n"})})]})}function p(t={}){const{wrapper:e}={...(0,i.M)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(l,{...t})}):l(t)}},2172:(t,e,r)=>{r.d(e,{I:()=>c,M:()=>n});var a=r(1504);const i={},s=a.createContext(i);function n(t){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:n(t.components),a.createElement(s.Provider,{value:e},t.children)}}}]);