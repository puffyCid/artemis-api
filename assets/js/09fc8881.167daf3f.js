"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[4244],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>d});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},f=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,f=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,d=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?i.createElement(d,l(l({ref:t},f),{},{components:n})):i.createElement(d,l({ref:t},f))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={description:"Linux file metadata",keywords:["linux","file meta"]},l="Files",o={unversionedId:"Artifacts/Linux Artifacts/files",id:"Artifacts/Linux Artifacts/files",title:"Files",description:"Linux file metadata",source:"@site/docs/Artifacts/Linux Artifacts/files.md",sourceDirName:"Artifacts/Linux Artifacts",slug:"/Artifacts/Linux Artifacts/files",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/files",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Linux Artifacts/files.md",tags:[],version:"current",frontMatter:{description:"Linux file metadata",keywords:["linux","file meta"]},sidebar:"artemisArtifacts",previous:{title:"ELF",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/elf"},next:{title:"Journals",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/journals"}},s={},c=[],f={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"files"},"Files"),(0,a.kt)("p",null,"A regular Linux filelisting. artemis uses the\n",(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/walkdir"},"walkdir")," crate to recursively walk the files\nand directories on the system. Since a filelisting can be extremely large every\n100k entries artemis will output the data and then continue."),(0,a.kt)("p",null,"Other Parsers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Any tool that can recursively list files and directories")),(0,a.kt)("p",null,"References:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"N/A")),(0,a.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'system = "linux"\n\n[output]\nname = "files_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "abdc"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "files" # Name of artifact\n[artifacts.files]\nstart_path = "/usr/bin" # Start of file listing\n# Optional\ndepth = 5 # How many sub directories to descend\n# Optional\nmetadata = true # Get executable metadata\n# Optional\nmd5 = true # MD5 all files\n# Optional\nsha1 = false # SHA1 all files\n# Optional\nsha256 = false # SHA256 all files\n# Optional\npath_regex = "" # Regex for paths\n# Optional\nfile_regex = "" # Regex for files\n')),(0,a.kt)("h1",{id:"collection-options"},"Collection Options"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_path")," Where to start the file listing. Must exist on the endpoint. To\nstart at root use ",(0,a.kt)("inlineCode",{parentName:"li"},"/"),". This configuration is ",(0,a.kt)("strong",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"depth")," Specify how many directories to descend from the ",(0,a.kt)("inlineCode",{parentName:"li"},"start_path"),". Default\nis one (1). Must be a postive number. Max value is 255. This configuration is\n",(0,a.kt)("strong",{parentName:"li"},"optional")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metadata")," Get ",(0,a.kt)("a",{parentName:"li",href:"/artemis-api/docs/Artifacts/Linux%20Artifacts/elf"},"ELF")," data from ",(0,a.kt)("inlineCode",{parentName:"li"},"ELF")," files. This configuration is\n",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is ",(0,a.kt)("strong",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"md5")," Boolean value to enable MD5 hashing on all files. This configuration is\n",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is ",(0,a.kt)("strong",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sha1")," Boolean value to enable SHA1 hashing on all files. This configuration\nis ",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is ",(0,a.kt)("strong",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sha256")," Boolean value to enable SHA256 hashing on all files. This\nconfiguration is ",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is ",(0,a.kt)("strong",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"path_regex")," Only descend into paths (directories) that match the provided\nregex. This configuration is ",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is no Regex"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"file_regex")," Only return entres that match the provided regex. This\nconfiguration is ",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is no Regex")),(0,a.kt)("h1",{id:"output-structure"},"Output Structure"),(0,a.kt)("p",null,"An array of ",(0,a.kt)("inlineCode",{parentName:"p"},"LinuxFileInfo")," entries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface LinuxFileInfo {\n  /**Full path to file or directory */\n  full_path: string;\n  /**Directory path */\n  directory: string;\n  /**Filename */\n  filename: string;\n  /**Extension of file if any */\n  extension: string;\n  /**Created timestamp in UNIXEPOCH seconds */\n  created: number;\n  /**Modified timestamp in UNIXEPOCH seconds */\n  modified: number;\n  /**Changed timestamp in UNIXEPOCH seconds */\n  changed: number;\n  /**Accessed timestamp in UNIXEPOCH seconds */\n  accessed: number;\n  /**Size of file in bytes */\n  size: number;\n  /**Inode associated with entry */\n  inode: number;\n  /**Mode of file entry */\n  mode: number;\n  /**User ID associated with file */\n  uid: number;\n  /**Group ID associated with file */\n  gid: number;\n  /**MD5 of file */\n  md5: string;\n  /**SHA1 of file */\n  sha1: string;\n  /**SHA256 of file */\n  sha256: string;\n  /**Is the entry a file */\n  is_file: boolean;\n  /**Is the entry a directory */\n  is_directory: boolean;\n  /**Is the entry a symbolic links */\n  is_symlink: boolean;\n  /**Depth the file from provided start point */\n  depth: number;\n  /**ELF binary metadata */\n  binary_info: ElfInfo[];\n}\n")))}u.isMDXComponent=!0}}]);