"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[6374],{28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var r=t(96540);const i={},a=r.createContext(i);function s(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(a.Provider,{value:e},n.children)}},66988:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Intro/Scripting/typescript","title":"TypeScript","description":"Using TypeScript","source":"@site/docs/Intro/Scripting/typescript.md","sourceDirName":"Intro/Scripting","slug":"/Intro/Scripting/typescript","permalink":"/artemis-api/docs/Intro/Scripting/typescript","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Intro/Scripting/typescript.md","tags":[],"version":"current","lastUpdatedBy":"puffycid","lastUpdatedAt":1748157447000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"Using TypeScript"},"sidebar":"artemisStart","previous":{"title":"Overview","permalink":"/artemis-api/docs/Intro/Scripting/boa"},"next":{"title":"Bundling","permalink":"/artemis-api/docs/Intro/Scripting/bundling"}}');var i=t(74848),a=t(28453);const s={sidebar_position:2,description:"Using TypeScript"},o="TypeScript",l={},c=[];function p(n){const e={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"typescript",children:"TypeScript"})}),"\n",(0,i.jsx)(e.p,{children:"A TypeScrpt library is provided instead of JavaScript due to the enhanced\nfeatures and ease of use TypeScrpt provides over plain JavaScript."}),"\n",(0,i.jsxs)(e.p,{children:["Continuing from ",(0,i.jsx)(e.code,{children:"get_registry()"})," example:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"export interface Registry {\n  /**\n   * Full path to `Registry` key and name.\n   * Ex: ` ROOT\\...\\CurrentVersion\\Run`\n   */\n  path: string;\n  /**\n   * Path to Key\n   * Ex: ` ROOT\\...\\CurrentVersion`\n   */\n  key: string;\n  /**\n   * Key name\n   * Ex: `Run`\n   */\n  name: string;\n  /**\n   * Values associated with key name\n   * Ex: `Run => Vmware`. Where Run is the `key` name and `Vmware` is the value name\n   */\n  values: Value[];\n  /**Timestamp of when the path was last modified */\n  last_modified: number;\n  /**Depth of key name */\n  depth: number;\n}\n\n/**\n * The value data associated with Registry key\n * References:\n *   https://github.com/libyal/libregf\n *   https://github.com/msuhanov/regf/blob/master/Windows%20registry%20file%20format%20specification.md\n */\nexport interface Value {\n  /**Name of Value */\n  value: string;\n  /**\n   * Data associated with value.  Type can be determiend by `data_type`.\n   * `REG_BINARY` is base64 encoded string\n   */\n  data: string;\n  /**Value type */\n  data_type: string;\n}\n\n/**\n * Function to parse a `Registry` file\n * @param path Full path to a `Registry` file\n * @returns Array of `Registry` entries\n */\nexport function get_registry(path: string): Registry[] {\n  // Array of JSON objects\n  const data = js_get_registry(path);\n  const reg_array: Registry[] = JSON.parse(data);\n\n  return reg_array;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["The above TypeScrpt code shows that we can access our registered ",(0,i.jsx)(e.code,{children:"get_registry"}),"\nfunction by calling it via ",(0,i.jsx)(e.code,{children:"js_get_registry(path);"})]}),"\n",(0,i.jsxs)(e.p,{children:["To make scripting even easier a simple ",(0,i.jsx)(e.strong,{children:"artemis-api"})," library is available to\nimport into your scripts. This allows users to create scripts without needing to\nknow what functions are registered. There are two ways to use the\n",(0,i.jsx)(e.strong,{children:"artemis-api"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Import from GitHub remotely:\n./artemis-api/mod.ts"}),"\n",(0,i.jsxs)(e.li,{children:["Clone the API (",(0,i.jsx)(e.a,{href:"https://github.com/puffyCid/artemis-api",children:"https://github.com/puffyCid/artemis-api"}),") and import locally"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["The example script below shows TypeScrpt code that imports the ",(0,i.jsx)(e.strong,{children:"artemis-api"}),"\nlibrary to parse the SOFTWARE ",(0,i.jsx)(e.code,{children:"Registry"})," file to get a list of installed\nprograms"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'import { getRegistry } from "./artemis-api/mod";\nimport { Registry } from "./artemis-api/src/windows/registry";\n\ninterface InstalledPrograms {\n  name: string;\n  version: string;\n  install_location: string;\n  install_source: string;\n  language: string;\n  publisher: string;\n  install_string: string;\n  install_date: string;\n  uninstall_string: string;\n  url_info: string;\n  reg_path: string;\n}\n\nfunction grab_info(reg: Registry[]): InstalledPrograms[] {\n  const programs: InstalledPrograms[] = [];\n  const min_size = 3;\n  for (const entries of reg) {\n    if (entries.values.length < min_size) {\n      continue;\n    }\n    const program: InstalledPrograms = {\n      name: "",\n      version: "",\n      install_location: "",\n      install_source: "",\n      language: "",\n      publisher: "",\n      install_string: "",\n      install_date: "",\n      uninstall_string: "",\n      url_info: "",\n      reg_path: entries.path,\n    };\n\n    for (const value of entries.values) {\n      switch (value.value) {\n        case "DisplayName":\n          program.name = value.data;\n          break;\n        case "DisplayVersion":\n          program.version = value.data;\n          break;\n        case "InstallDate":\n          program.install_date = value.data;\n          break;\n        case "InstallLocation":\n          program.install_location = value.data;\n          break;\n        case "InstallSource":\n          program.install_source = value.data;\n          break;\n        case "Language":\n          program.language = value.data;\n          break;\n        case "Publisher":\n          program.publisher = value.data;\n          break;\n        case "UninstallString":\n          program.uninstall_string = value.data;\n          break;\n        case "URLInfoAbout":\n          program.url_info = value.data;\n          break;\n        default:\n          continue;\n      }\n    }\n    programs.push(program);\n  }\n  return programs;\n}\n\nfunction main() {\n  const path = "C:\\\\Windows\\\\System32\\\\config\\\\SOFTWARE";\n\n  const reg = getRegistry(path);\n  const programs: Registry[] = [];\n  for (const entries of reg) {\n    if (\n      !entries.path.includes(\n        "Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall",\n      )\n    ) {\n      continue;\n    }\n    programs.push(entries);\n  }\n  return grab_info(programs);\n}\n\nmain();\n'})}),"\n",(0,i.jsx)(e.p,{children:"We can then compile and bundle this TypeScrpt code to JavaScript and execute\nusing artemis!"})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}}}]);