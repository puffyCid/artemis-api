"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[4003],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=c(n),p=a,m=f["".concat(l,".").concat(p)]||f[p]||d[p]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[f]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={description:"The default macOS browser",keywords:["browser","apple"]},o="Safari",s={unversionedId:"Artifacts/Application Artifacts/safari",id:"Artifacts/Application Artifacts/safari",title:"Safari",description:"The default macOS browser",source:"@site/docs/Artifacts/Application Artifacts/safari.md",sourceDirName:"Artifacts/Application Artifacts",slug:"/Artifacts/Application Artifacts/safari",permalink:"/docs/Artifacts/Application Artifacts/safari",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Application Artifacts/safari.md",tags:[],version:"current",frontMatter:{description:"The default macOS browser",keywords:["browser","apple"]},sidebar:"artemisArtifacts",previous:{title:"Firefox",permalink:"/docs/Artifacts/Application Artifacts/firefox"},next:{title:"Linux Artifacts",permalink:"/docs/category/linux-artifacts"}},l={},c=[],u={toc:c},f="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"safari"},"Safari"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Safari")," is the builtin web browser an Apple devices. artemis supports parsing\nbrowsing history and downloads from ",(0,a.kt)("inlineCode",{parentName:"p"},"Safari"),". History data is stored in a SQLITE\nfile while downloads data is stored PLIST file and then stored in\n",(0,a.kt)("a",{parentName:"p",href:"https://mac-alias.readthedocs.io/en/latest/index.html"},"Bookmark")," format"),(0,a.kt)("p",null,"Other Parsers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Any program that read a SQLITE database for History data")),(0,a.kt)("p",null,"References:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gist.github.com/l1x/68e206f56bcc22cde3d76cc8fed49f3f"},"History Schema"))),(0,a.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'system = "macos"\n\n[output]\nname = "safari_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "abdc"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "safari-history"\n\n[[artifacts]]\nartifact_name = "safari-downloads"\n')),(0,a.kt)("h1",{id:"collection-options"},"Collection Options"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"N/A")),(0,a.kt)("h1",{id:"output-structure"},"Output Structure"),(0,a.kt)("p",null,"An array of ",(0,a.kt)("inlineCode",{parentName:"p"},"SafariHistory")," for history data and ",(0,a.kt)("inlineCode",{parentName:"p"},"SafariDownloads")," for downloads\ndata per user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface SafariHistory {\n  /**Array of history entries */\n  history: RawSafariHistory[];\n  /**Path associated with the history file */\n  path: string;\n  /**User associated with the history file */\n  user: string;\n}\n\n/**\n * An interface representing the Safari SQLITE tables: `history_items` and `history_visits`\n */\nexport interface RawSafariHistory {\n  /**Row ID value */\n  id: number;\n  /**Page URL */\n  url: string;\n  /**Expansion for domain */\n  domain_expansion: string;\n  /**Page visit count */\n  visit_count: number;\n  /**Daily visist in raw bytes */\n  daily_visit_counts: number[];\n  /**Weekly visist in raw bytes */\n  weekly_visit_counts: number[];\n  /**Autocomplete triggers for page */\n  autocomplete_triggers: number[];\n  /**Recompute visits count */\n  should_recompute_derived_visit_counts: number;\n  /**Visit score value */\n  visit_count_score: number;\n  /**Status code value */\n  status_code: number;\n  /**Visit time in UNIXEPOCH seconds */\n  visit_time: number;\n  /**Load successful value */\n  load_successful: boolean;\n  /**Page title */\n  title: string;\n  /**Attributes value */\n  attributes: number;\n  /**Score value */\n  score: number;\n}\n\nexport interface SafariDownloads {\n  /**Array of downloads entries */\n  downloads: RawSafariDownloads[];\n  /**Path associated with the downloads file */\n  path: string;\n  /**User associated with the downloads file */\n  user: string;\n}\n\n/**\n * An interface representing Safari downloads data\n */\nexport interface RawSafariDownloads {\n  /**Source URL for download */\n  source_url: string;\n  /**File download path */\n  download_path: string;\n  /**Sandbox ID value */\n  sandbox_id: string;\n  /**Downloaded bytes */\n  download_bytes: number;\n  /**Download ID value */\n  download_id: string;\n  /**Download start date in UNIXEPOCH seconds */\n  download_entry_date: number;\n  /**Download finish date in UNIXEPOCH seoconds */\n  download_entry_finish: number;\n  /**Path to file to run */\n  path: string[];\n  /**Path represented as Catalog Node ID */\n  cnid_path: number[];\n  /**Created timestamp of target file in UNIXEPOCH seconds */\n  created: number;\n  /**Path to the volume of target file */\n  volume_path: string;\n  /**Target file URL type */\n  volume_url: string;\n  /**Name of volume target file is on */\n  volume_name: string;\n  /**Volume UUID */\n  volume_uuid: string;\n  /**Size of target volume in bytes */\n  volume_size: number;\n  /**Created timestamp of volume in UNIXEPOCH seconds */\n  volume_created: number;\n  /**Volume Property flags */\n  volume_flag: number[];\n  /**Flag if volume if the root filesystem */\n  volume_root: boolean;\n  /**Localized name of target file */\n  localized_name: string;\n  /**Read-Write security extension of target file */\n  security_extension_rw: string;\n  /**Read-Only security extension of target file */\n  security_extension_ro: string;\n  /**File property flags */\n  target_flags: number[];\n  /**Username associated with `Bookmark` */\n  username: string;\n  /**Folder index number associated with target file */\n  folder_index: number;\n  /**UID associated with `LoginItem` */\n  uid: number;\n  /**`LoginItem` creation flags */\n  creation_options: number;\n  /**Is target file executable */\n  is_executable: boolean;\n  /**Does target file have file reference flag */\n  file_ref_flag: boolean;\n}\n")))}d.isMDXComponent=!0}}]);