"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[7742],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(r),m=i,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},511:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const a={description:"Services installed on Windows",keywords:["windows","registry","persistence"]},s="Services",o={unversionedId:"Artifacts/Windows Artfacts/services",id:"Artifacts/Windows Artfacts/services",title:"Services",description:"Services installed on Windows",source:"@site/docs/Artifacts/Windows Artfacts/services.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/services",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/services",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/services.md",tags:[],version:"current",frontMatter:{description:"Services installed on Windows",keywords:["windows","registry","persistence"]},sidebar:"artemisArtifacts",previous:{title:"Search",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/search"},next:{title:"Shellbags",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/shellbags"}},c={},l=[],p={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"services"},"Services"),(0,i.kt)("p",null,"Windows ",(0,i.kt)("inlineCode",{parentName:"p"},"Services")," are a common form of persistence and privilege escalation on\nWindows systems. Service data is stored in the SYSTEM Registry file.\\\n",(0,i.kt)("inlineCode",{parentName:"p"},"Services")," run with SYSTEM level privileges."),(0,i.kt)("p",null,"Other Parsers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Any tool that can read the Registry"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.velociraptor.app/artifact_references/pages/windows.system.services/"},"Velociraptor"))),(0,i.kt)("p",null,"References:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://forensafe.com/blogs/windowsservices.html"},"Services")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Velocidex/velociraptor/blob/master/artifacts/definitions/Windows/System/Services.yaml"},"Velociraptor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://winreg-kb.readthedocs.io/en/latest/sources/system-keys/Services-and-drivers.html"},"Libyal"))),(0,i.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'system = "windows"\n\n[output]\nname = "services_collection"\ndirectory = "./tmp"\nformat = "jsonl"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "services"\n[artifacts.services]\nalt_drive = \'C\'\n')),(0,i.kt)("h1",{id:"collection-options"},"Collection Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"alt_drive")," Expects a single character value. Will use an alternative drive\nletter when parsing ",(0,i.kt)("inlineCode",{parentName:"li"},"Services"),". This configuration is ",(0,i.kt)("strong",{parentName:"li"},"optional"),". By default\nartemis will use the ",(0,i.kt)("inlineCode",{parentName:"li"},"%systemdrive%")," value (typically ",(0,i.kt)("inlineCode",{parentName:"li"},"C"),")")),(0,i.kt)("h1",{id:"output-structure"},"Output Structure"),(0,i.kt)("p",null,"An array of ",(0,i.kt)("inlineCode",{parentName:"p"},"Services")," entries"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Services {\n  /**Current State of the Service */\n  state: string;\n  /**Name of Service */\n  name: string;\n  /**Display name of Service */\n  display_name: string;\n  /**Service description */\n  description: string;\n  /**Start mode of Service */\n  start_mode: string;\n  /**Path to executable for Service */\n  path: string;\n  /**Service types. Ex: KernelDriver */\n  service_type: string[];\n  /**Account associated with Service */\n  account: string;\n  /**Registry modified timestamp in UNIXEPOCH seconds. May be used to determine when the Service was created */\n  modified: number;\n  /**DLL associated with Service */\n  service_dll: string;\n  /**Service command upon failure */\n  failure_command: string;\n  /**Reset period associated with Service */\n  reset_period: number;\n  /**Service actions upon failure */\n  failure_actions: FailureActions[];\n  /**Privileges associated with Service */\n  required_privileges: string[];\n  /**Error associated with Service */\n  error_control: string;\n  /**Registry path associated with Service */\n  reg_path: string;\n}\n\n/**\n * Failure actions executed when Service fails\n */\ninterface FailureActions {\n  /**Action executed upon failure */\n  action: string;\n  /**Delay in seconds on failure */\n  delay: number;\n}\n")))}u.isMDXComponent=!0}}]);