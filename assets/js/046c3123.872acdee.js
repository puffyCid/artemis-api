"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[3079],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},56256:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Artifacts/Windows Artfacts/wmipersist","title":"WMI","description":"The Windows Management Instrumentation (WMI) Repository","source":"@site/docs/Artifacts/Windows Artfacts/wmipersist.md","sourceDirName":"Artifacts/Windows Artfacts","slug":"/Artifacts/Windows Artfacts/wmipersist","permalink":"/artemis-api/docs/Artifacts/Windows Artfacts/wmipersist","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/wmipersist.md","tags":[],"version":"current","lastUpdatedBy":"puffycid","lastUpdatedAt":1748157447000,"frontMatter":{"description":"The Windows Management Instrumentation (WMI) Repository","keywords":["windows","wmi"]},"sidebar":"artemisArtifacts","previous":{"title":"UsnJrnl","permalink":"/artemis-api/docs/Artifacts/Windows Artfacts/usnjrnl"},"next":{"title":"WordWheel","permalink":"/artemis-api/docs/Artifacts/Windows Artfacts/wordwheel"}}');var r=t(74848),s=t(28453);const o={description:"The Windows Management Instrumentation (WMI) Repository",keywords:["windows","wmi"]},a="WMI",c={},l=[];function m(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"wmi",children:"WMI"})}),"\n",(0,r.jsx)(n.p,{children:"The Windows Management Instrumentation (WMI) Repository is a collection of tools\nthat allow users to interact and manage Windows systems. Malware can also use\nWMI to persist on a Windows system. Malware the persist via WMI is typically\nlocated in the WMI Repository."}),"\n",(0,r.jsx)(n.p,{children:"Default location: C:\\Windows\\System32\\wbem\\Repository"}),"\n",(0,r.jsx)(n.p,{children:"Artemis supports parsing WMI Repository on Windows 7+ and will parse all WMI\nNamespaces to look for evidence of persistence."}),"\n",(0,r.jsx)(n.p,{children:"Other Parsers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/Velocidex/velociraptor",children:"velociraptor"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/fox-it/dissect.cim",children:"dissect"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"References:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/libyal/dtformats/blob/main/documentation/WMI%20repository%20file%20format.asciidoc",children:"libyal"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.velociraptor.app/blog/2022/2022-01-12-wmi-eventing",children:"velociraptor blog"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://redcanary.com/threat-detection-report/techniques/windows-management-instrumentation",children:"WMI hunting blog"})}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[output]\nname = "wmipersist_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\ntimeline = false\n\n[[artifacts]]\nartifact_name = "wmipersist"\n[artifacts.wmipersist]\n# Optional\n# alt_dir = "D:\\\\Evidence\\\\WMI"\n'})}),"\n",(0,r.jsx)(n.h1,{id:"collection-options",children:"Collection Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"alt_dir"})," An alternative directory to use containing the WMI Repository. This\ndirectory needs to contain MAPPING*.MAP, OBJECTS.DATA, INDEX.BTR files"]}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,r.jsxs)(n.p,{children:["An array of ",(0,r.jsx)(n.code,{children:"WmiPersist"})," entries"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export interface WmiPersist {\n  /**SID associated with the WMI entry */\n  sid: string;\n  /**Name of WMI class */\n  class: string;\n  /**Query that triggers the WMI entry */\n  query: string;\n  /**Filter associated with WMI entry */\n  filter: string;\n  /**Consumer associated with WMI entry */\n  consumer: string;\n  /**Name of the Consumer */\n  consumer_name: string;\n  /** Data associated with the WMI entry. Can use `class` to determine what the type is.\n   * Most common ones are defined, however users can create their own class\n   */\n  values:\n    | EventLogConsumer\n    | ActiveScriptConsumer\n    | CommandLineConsumer\n    | LogFileConsumer\n    | SmtpConsumer\n    | Record<string, unknown>;\n}\n\n/**\n * Consumer that logs a message to the Windows EventLogs when an event is triggered\n */\nexport interface EventLogConsumer {\n  /**Creator of Consumer in bytes */\n  CreatorSID: Uint8Array;\n  /**Name of system where WMI sends events */\n  MachineName: string;\n  /**Max queue for consumer in bytes */\n  MaximumQueueSize: number;\n  /**Unique ID for consumer */\n  Name: string;\n  /**Event category */\n  Category: number;\n  /**Name of the event property that contains data */\n  NameOfRawDataProperty: string;\n  /**Event message in the message DLL */\n  EvenID: number;\n  /**Type of event */\n  EventType: number;\n  /**Array of strings to insert for an event log entry */\n  InsertionStringTemplates: string[];\n  /**Number of strings in `InsertionStringTemplates` */\n  NumberOfInsertionStrings: number;\n  /**SID associated with event */\n  NameOfUserSidProperty: string | Uint8Array;\n  /**Source name where message is located */\n  SourceName: string;\n  /**Name of system on which to log an event */\n  UNCServerName: string;\n}\n\n/**\n * Consumer to execute a script when an event is triggered\n */\nexport interface ActiveScriptConsumer {\n  /**Creator of Consumer in bytes */\n  CreatorSID: Uint8Array;\n  /**Name of system where WMI sends events */\n  MachineName: string;\n  /**Max queue for consumer in bytes */\n  MaximumQueueSize: number;\n  /**Unique ID for consumer */\n  Name: string;\n  /**How many seconds to wait until process is killed. Zero (0) means process will not be killed */\n  KillTimeOut: number;\n  /**Name of scripting engine to use */\n  ScriptingEngine: string;\n  /**Name of file to execute script. Must be NULL if `ScriptText` is NOT NULL */\n  ScriptFileName: string;\n  /**Contents of script to execute. Must be NULL if `ScriptFileName` is NOT NULL */\n  ScriptText: string;\n}\n\n/**\n * Consumer to start a process when an event is triggered\n */\nexport interface CommandLineConsumer {\n  /**Creator of Consumer in bytes */\n  CreatorSID: Uint8Array;\n  /**Name of system where WMI sends events */\n  MachineName: string;\n  /**Max queue for consumer in bytes */\n  MaximumQueueSize: number;\n  /**Unique ID for consumer */\n  Name: string;\n  /**Specifies command to execute */\n  CommandLineTemplate: string;\n  /**Unused */\n  CreateNewConsole: boolean;\n  /**Will create a new process group */\n  CreateNewProcessGroup: boolean;\n  /**New process will run in Virtual DOS Machine (VDM) */\n  CreateSeparateWowVdm: boolean;\n  /**New process will run in shared Virtual DOS Machine (VDM) */\n  CreateSharedWowVdm: boolean;\n  /**Unused */\n  DesktopName: string;\n  /**Specifies the file to execute */\n  ExecutablePath: string;\n  /**Color to use if new console is window is created */\n  FillAttributes: number;\n  /**Cursor feedback is disabled */\n  ForceOffFeedback: boolean;\n  /**Cursor feedback is enabled */\n  ForceOnFeedback: boolean;\n  /**How many seconds to wait until process is killed. Zero (0) means process will not be killed */\n  KillTimeout: number;\n  /**Priority of process threads */\n  Priority: number;\n  /**Determines if process is launched with interactive WinStation or default WinStation */\n  RunInteractively: boolean;\n  /**Determines Window show state */\n  ShowWindowCommand: number;\n  /**Whether to use default error mode */\n  UseDefaultErrorMode: boolean;\n  /**Title to use for process */\n  WindowTitle: string;\n  /**Working directory for the process */\n  WorkingDirectory: string;\n  /**X-offset, in pixels, from the left edge of the screen to the left edge of the window, if a new window is created. */\n  XCoordinate: number;\n  /**Screen buffer width, in character columns, if a new console window is created. This property is ignored in a GUI process. */\n  XNumCharacters: number;\n  /**Width, in pixels, of a new window, if a new window is created. */\n  XSize: number;\n  /**Y-offset, in pixels, from the top edge of the screen to the top edge of the window, if a new window is created. */\n  YCoordinate: number;\n  /**Screen buffer height, in character rows, if a new console window is created. This property is ignored in a GUI process. */\n  YNumCharacters: number;\n  /**Height, in pixels, of the new window, if a new window is created. */\n  YSize: number;\n  /**Specifies the initial text and background colors if a new console window is created in a console application */\n  FillAttribute: number;\n}\n\n/**\n * Consumer to write customer strings to text file (log) when an event is triggered\n */\nexport interface LogFileConsumer {\n  /**Creator of Consumer in bytes */\n  CreatorSID: Uint8Array;\n  /**Name of system where WMI sends events */\n  MachineName: string;\n  /**Max queue for consumer in bytes */\n  MaximumQueueSize: number;\n  /**Unique ID for consumer */\n  Name: string;\n  /**Whether log file is Unicode or multibyte code file */\n  IsUnicode: boolean;\n  /**Max log file size */\n  MaximumFileSize: bigint;\n  /**String to write to log file */\n  Text: string;\n}\n\n/**\n * Consumer that sends an email when an event is triggered\n */\nexport interface SmtpConsumer {\n  /**Creator of Consumer in bytes */\n  CreatorSID: Uint8Array;\n  /**Name of system where WMI sends events */\n  MachineName: string;\n  /**Max queue for consumer in bytes */\n  MaximumQueueSize: number;\n  /**Unique ID for consumer */\n  Name: string;\n  /**Addresses to send email (BCC) */\n  BccLine: string;\n  /**Addresses to send email (CC) */\n  CcLine: string;\n  /**From address to use to send email. Default is: `WinMgmt@MachineName` */\n  FromLine: string;\n  /**Headers to insert into email */\n  HeaderFields: string[];\n  /**Body of email */\n  Message: string;\n  /**Reply-to line of an email message */\n  ReplyToLine: string;\n  /**SMTP server to use to send emails */\n  SMTPServer: string;\n  /**Subject line for email */\n  Subject: string;\n  /**Addresses to send email to */\n  ToLine: string;\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);