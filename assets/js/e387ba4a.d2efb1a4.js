"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[4110],{27423:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"API/API Scenarios/itunes","title":"iTunes Backup Extraction","description":"How to parse unencrypted iTunes backups!","source":"@site/docs/API/API Scenarios/itunes.md","sourceDirName":"API/API Scenarios","slug":"/API/API Scenarios/itunes","permalink":"/artemis/docs/API/API Scenarios/itunes","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/API/API Scenarios/itunes.md","tags":[],"version":"current","lastUpdatedBy":"puffyCid","lastUpdatedAt":1748155945000,"frontMatter":{"description":"How to parse unencrypted iTunes backups!"},"sidebar":"artemisAPI","previous":{"title":"ESE Databases","permalink":"/artemis/docs/API/API Scenarios/ese"},"next":{"title":"Outlook Interaction","permalink":"/artemis/docs/API/API Scenarios/outlook"}}');var a=n(74848),r=n(28453);const s={description:"How to parse unencrypted iTunes backups!"},o="iTunes Backup Extraction",c={},p=[{value:"Creating the script",id:"creating-the-script",level:2},{value:"Script Output",id:"script-output",level:2},{value:"Adding new apps or artifacts",id:"adding-new-apps-or-artifacts",level:2},{value:"App or artifact code structure",id:"app-or-artifact-code-structure",level:2},{value:"Research!",id:"research",level:2},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"itunes-backup-extraction",children:"iTunes Backup Extraction"})}),"\n",(0,a.jsx)(t.p,{children:"You can use the artemis API to parse and extract information from unencrypted\niTunes backups! Creating an iOS backup is a common way to collect data from an\niOS device for forensic analysis."}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:["Support for iOS/iTunes is extremely new and limited. Artemis only supports a few\napps and iOS features. A list of support artifacts/apps can be found\n",(0,a.jsx)(t.a,{href:"/artemis/docs/Artifacts/ios",children:"here"})]}),(0,a.jsxs)(t.p,{children:["If you are looking for a more mature tool, checkout\n",(0,a.jsx)(t.a,{href:"https://github.com/abrignoni/iLEAPP",children:"iLeapp"})]})]}),"\n",(0,a.jsx)(t.h2,{id:"creating-the-script",children:"Creating the script"}),"\n",(0,a.jsx)(t.p,{children:"Its really easy to start reviewing iTunes backups using the API."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'import { extractBackup } from "./artemis-api/src/ios/itunes/backup";\nimport { Format, Output, OutputType } from "./artemis-api/src/system/output";\n\nfunction main() {\n    const out: Output = {\n        name: "iOS_deviceName",\n        directory: "./tmp",\n        // JSON format is **strongly** recommended for now\n        format: Format.JSON,\n        compress: false,\n        endpoint_id: "",\n        collection_id: 0,\n        output: OutputType.LOCAL,\n    };\n    const result = extractBackup(\n        "./iTunesBackup/00008112-000429AE0C07401E",\n        out,\n    );\n}\n\nmain();\n'})}),"\n",(0,a.jsx)(t.p,{children:"The script above will read the iTunes backup directory and parse all supported\napps and backup artifacts in the backup collection."}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:["Do not forget to transpile the script above to JavaScript as mentioned in\n",(0,a.jsx)(t.a,{href:"/artemis/docs/Intro/Scripting/bundling",children:"API"})," section!"]}),(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Strongly"})," suggest you ",(0,a.jsx)(t.code,{children:"minify"})," the transpiled script.",(0,a.jsx)(t.br,{}),"\n","It will make it alot smaller!"]})]}),"\n",(0,a.jsx)(t.h2,{id:"script-output",children:"Script Output"}),"\n",(0,a.jsxs)(t.p,{children:["The way artemis outputs data is unique for the iTunes API. Normally, artemis\nwill output all data to single folder provided in the ",(0,a.jsx)(t.code,{children:"Output"})," object."]}),"\n",(0,a.jsx)(t.p,{children:"However, since artemis is parsing multiple apps and other artifacts, parsed data\nwill placed in its own sub-directory."}),"\n",(0,a.jsx)(t.p,{children:"If you run the script above the output structure will look like the following:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Root folder - ",(0,a.jsx)(t.strong,{children:"./tmp"})]}),"\n",(0,a.jsxs)(t.li,{children:["Subfolders:","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"./tmp/iOS_deviceName: Contains metadata associated with iTunes backup"}),"\n",(0,a.jsxs)(t.li,{children:["./tmp/apps/iOS_deviceName_app_or_artifact_name. Ex:\n",(0,a.jsx)(t.code,{children:"iOS_deviceName_com.zhiliaoapp.musically"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Each subfolder will contain you JSON output"}),"\n",(0,a.jsx)(t.h2,{id:"adding-new-apps-or-artifacts",children:"Adding new apps or artifacts"}),"\n",(0,a.jsx)(t.p,{children:"Adding support for new apps or artifacts is not too challenging :)"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Make sure you have the tool prerequisites installed (Ex: TypeScript text editor)"}),"\n",(0,a.jsxs)(t.li,{children:["Clone the artemis-api repo (",(0,a.jsx)(t.a,{href:"https://github.com/puffyCid/artemis-api.git",children:"https://github.com/puffyCid/artemis-api.git"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:["To add support for a new app, create a folder under\n",(0,a.jsx)(t.code,{children:"./src/ios/apps/<app name>"}),(0,a.jsx)(t.br,{}),"\n","To add support for a new artifact, create a folder under\n",(0,a.jsx)(t.code,{children:"./src/ios/domains/<artifact domain name>"})]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"app-or-artifact-code-structure",children:"App or artifact code structure"}),"\n",(0,a.jsx)(t.p,{children:"Once you have identified an app you want to parse you will need to write some\nTypeScript code in order to plug it in to the artemis API."}),"\n",(0,a.jsxs)(t.p,{children:["Lets say we want to add support for the DuckDuckGo browser app. We would create\na typescript (ts) file under ",(0,a.jsx)(t.code,{children:"./src/ios/apps/duckduckgo/duck.ts"}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"You can name you folder and ts file anything you want"})}),"\n",(0,a.jsx)(t.p,{children:"In our new file we would add the following code"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'import {\n    FileType,\n    ManifestApp,\n} from "../../../../types/ios/itunes/manifest";\nimport { Output, outputResults } from "../../../system/output";\nimport { IosError } from "../../error";\nimport { parseManifestAppPlist } from "../../itunes/apps";\n\n/**\n * Function to extract DuckDuckGo browser info\n * @param app_paths Array of `ManifestApp`\n * @param db_path iTunes backup directory\n * @param output `Output` configuration object\n */\nexport function extractDuckDuckGo(\n    app_paths: ManifestApp[],\n    db_path: string,\n    output: Output,\n) {\n    for (const path of app_paths) {\n        if (path.file_type != FileType.IsFile) {\n            continue;\n        }\n        // Function to parse the binary plist in the Manifest.db file. Contains FileMetadata\n        const info = parseManifestAppPlist(path.file);\n        if (info instanceof IosError) {\n            continue;\n        }\n\n        const target = `${db_path}/${path.directory}/${path.fileID}`;\n        console.log(info.path);\n        console.log(target);\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The code above registers a function called ",(0,a.jsx)(t.code,{children:"extractDuckDuckGo"})," and pass several\nparameters to the function. We will review the parameters later, but you do not\nneed to know how to obtain them."]}),"\n",(0,a.jsxs)(t.p,{children:["Afte register our function, we start to loop through our array of app_paths.\nThese paths are the directories associated withe our app. Each directory should\nhave an associated binary plist that we need to parse using\n",(0,a.jsx)(t.code,{children:"parseManifestAppPlist"}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"We only want to parse files! So we skip non-file related entries such as\ndirectories"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["iTunes backup files and directories names are hashed! In order to determine the\noriginal name we need to call ",(0,a.jsx)(t.code,{children:"parseManifestAppPlist"}),"!"]})}),"\n",(0,a.jsxs)(t.p,{children:["Next we specify the target iTunes backup file:\n",(0,a.jsx)(t.code,{children:"const target = `${db_path}/${path.directory}/${path.fileID}`;"})]}),"\n",(0,a.jsx)(t.p,{children:"Then we print the target file (path of hashed names and directories) and the\nun-hashed names"}),"\n",(0,a.jsx)(t.p,{children:"If you transpile and run the code above you should see something like below:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'[runtime]: "Library/Preferences/com.duckduckgo.blocker-list.etags.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/7e/7e65b6f36849e8431a36186ddf98019af8487f1d"\n[runtime]: "Library/Preferences/com.apple.EmojiCache.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/96/962a40518bc47a929fa53a208b2250e4937add6a"\n[runtime]: "Library/Preferences/com.duckduckgo.app.adClickAttribution.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/0a/0a54b7c56e482059cfb55968b1305a15e948453a"\n[runtime]: "Library/WebKit/WebsiteData/Default/QkkulCe8Q-EdXJ986IlKrwKGIychU0X2UP4JUpfNScs/QkkulCe8Q-EdXJ986IlKrwKGIychU0X2UP4JUpfNScs/origin"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/cd/cd330b4833dbc9f7630c774f45ea1ec746eaec01"\n[runtime]: "Library/WebKit/WebsiteData/Default/salt"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/05/05fd1262114b7103c4a5fbb1b6e08e52d40d546f"\n[runtime]: "Library/WebKit/GeolocationSites.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/88/8888b54a27c0f79e99567e6329b95378f8901a0c"\n[runtime]: "Library/WebKit/WebsiteData/SearchHistory/RecentSearches.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/c7/c77e5f0c616494ccfee9c7fa381646c54bfb13b8"\n[runtime]: "Library/WebKit/ContentRuleLists/ContentRuleList-blockImageRules"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/a0/a08cfdf4b2d3cdce9fbf6bc7afbcf7565b65492a"\n[runtime]: "Library/Preferences/group.com.duckduckgo.app.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/d9/d956029361b6990e109d1d8cc47c8b0780fa0758"\n[runtime]: "Library/Application Support/.tipkit/tips-store.db"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/2b/2bb3cd6079dac3dc4fbd757e1a9730458056f6a3"\n[runtime]: "Library/WebKit/ContentRuleLists/ContentRuleList-%22TrackerDataSet%22%22A_%2275cff4e36f76d9a81af0643d775008c9%22%22cbc7891482cdc5656356758fbf4df7d672ce2933%22%2265d5e346d5f4b32b8b5f813d753c8718%22%22%22"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/27/272f7a61c6b687508c7a9c30f91cc955a1d418cd"\n[runtime]: "Library/Preferences/HKE973VLUW.com.duckduckgo.subscriptions.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/34/346893e9861467096e4bd75a103ec913e000a9c8"\n[runtime]: "Library/Application Support/atb-present.marker"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/95/95d9c13c5075b50fe82e77a63dc33a49edd9698d"\n[runtime]: "Library/WebKit/WebsiteData/Default/QkkulCe8Q-EdXJ986IlKrwKGIychU0X2UP4JUpfNScs/QkkulCe8Q-EdXJ986IlKrwKGIychU0X2UP4JUpfNScs/CacheStorage/salt"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/28/284d57dd57fbb5b2ba47df75061d54b029d349cd"\n[runtime]: "Library/Preferences/com.duckduckgo.mobile.ios.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/f8/f881608e2754551e1695a1bab51b8b11c8b5a3bc"\n[runtime]: "Library/Preferences/com.duckduckgo.unique.pixel.storage.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/7e/7ee08df288b84e89aba7e642620731b032be42d5"\n[runtime]: "Library/Preferences/com.duckduckgo.pixel.storage.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/68/68a54dda6529c4364087fa47776d8bf312cb6a71"\n[runtime]: "Library/WebKit/ContentRuleLists/ContentRuleList-%22Attribution_TrackerDataSet%22%22A_%2275cff4e36f76d9a81af0643d775008c9%22%22cbc7891482cdc5656356758fbf4df7d672ce2933%22%2265d5e346d5f4b32b8b5f813d753c8718%22%22%22"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/b6/b641cda8a7bb7d542d604e2441ca05b0a7b3cad9"\n[runtime]: "Library/WebKit/WebsiteData/ResourceLoadStatistics/observations.db"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/0e/0eeba21e901d1c692c861fa478d3b9021352f5be"\n[runtime]: "Library/Application Support/ad-attribution-successful.marker"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/3c/3c73a053786b0cfbddb873791a5af1ff575686a8"\n[runtime]: "Library/Preferences/com.duckduckgo.daily.pixel.storage.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/0e/0e7c2c955a0e18fe284fa6a96787d9db7e2257d7"\n[runtime]: "Library/Cookies/Cookies.binarycookies"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/1c/1c2937886859a739a9746411d9a25d3907de4ac1"\n[runtime]: "Library/Application Support/History.sqlite"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/2a/2a984202263e5aedd67a20d6233f115783cddd65"\n[runtime]: "Library/Preferences/com.duckduckgo.app.toggleProtectionsCounter.plist"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/f1/f1b0e539a2f0d8a3897fe0331882bc07f3ef82ed"\n[runtime]: "Library/WebKit/WebsiteData/MediaKeys/v1/salt"\n[runtime]: "./itunesBackupDirectory/00008112-000429AE0C07401E/ca/caa12f6b21d5beb6938d79a9ea8d4b2b503d0223"\n'})}),"\n",(0,a.jsx)(t.h2,{id:"research",children:"Research!"}),"\n",(0,a.jsx)(t.p,{children:"Now is the challenging part! We need to research what file we may want to parse!\nThe most common types of files you will encouter are JSON, plist, and sqlite\ndatabases."}),"\n",(0,a.jsxs)(t.p,{children:["Lets look at the ",(0,a.jsx)(t.code,{children:"GeolocationSites.plist"})," file. It looks interesting. Since its\na plist file we will need to import the plist parsing function to our code"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'for (const path of app_paths) {\n    if (path.file_type != FileType.IsFile) {\n        continue;\n    }\n    // Function to parse the binary plist in the Manifest.db file. Contains FileMetadata\n    const info = parseManifestAppPlist(path.file);\n    if (info instanceof IosError) {\n        continue;\n    }\n\n    const target = `${db_path}/${path.directory}/${path.fileID}`;\n    if (info.path.includes("GeolocationSites.plist")) {\n        // Make sure to provide the target variable! This the full path the to iTunes backup hashed filename\n        const result = getPlist(target);\n        outputResults(result, "duckduckgo_geosites", output);\n    }\n    console.log(info.path);\n    console.log(target);\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The additional code we added will parse the ",(0,a.jsx)(t.code,{children:"GeolocationSites.plist"})," file and\noutput the results to a JSON file!"]}),"\n",(0,a.jsx)(t.p,{children:"We would repeat this process for each file we are interested for the DuckDuckGo\napp."}),"\n",(0,a.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsxs)(t.p,{children:["The final step is to make artemis aware of the ",(0,a.jsx)(t.code,{children:"extractDuckDuckGo"})," function.",(0,a.jsx)(t.br,{}),"\n","Navigate to the file ",(0,a.jsx)(t.code,{children:"./src/ios/itunes/apps.ts"})," and to ",(0,a.jsx)(t.code,{children:"extractAppInfo"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"You should see something like below:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'/**\n * Function to parse supported apps and domains\n * @param paths Array of `ManifestApp`\n * @param namespace App or domain name\n * @param db_path iTunes backup directory\n * @param output `Output` object\n */\nexport function extractAppInfo(\n    paths: ManifestApp[],\n    namespace: string,\n    db_path: string,\n    output: Output,\n) {\n    switch (namespace) {\n        case "com.amazon.echo":\n            extractAmazonEcho(paths, db_path, output);\n            break;\n        case "us.zoom.videomeetings":\n            extractZoom(paths, db_path, output);\n            break;\n        case "co.hinge.mobile.ios":\n            extractHingeInfo(paths, db_path, output);\n            break;\n        case "HomeDomain":\n            extractHomeDomain(paths, db_path, output);\n            break;\n        case "RootDomain":\n            extractRootDomain(paths, db_path, output);\n            break;\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"We just need to insert domain name for the DuckDuckGo app and add our function!"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'switch (namespace) {\n    case "com.amazon.echo":\n        extractAmazonEcho(paths, db_path, output);\n        break;\n    case "us.zoom.videomeetings":\n        extractZoom(paths, db_path, output);\n        break;\n    case "com.duckduckgo.mobile.ios": // <-------------- Our function is registered!\n        extractDuckDuckGo(paths, db_path, output);\n        break;\n    case "co.hinge.mobile.ios":\n        extractHingeInfo(paths, db_path, output);\n        break;\n    case "HomeDomain":\n        extractHomeDomain(paths, db_path, output);\n        break;\n    case "RootDomain":\n        extractRootDomain(paths, db_path, output);\n        break;\n}\n'})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["If you do not know the domain name of the app. You can find it in the output\nafter running your script and calling ",(0,a.jsx)(t.code,{children:"extractBackup"})," once."]})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(96540);const a={},r=i.createContext(a);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);