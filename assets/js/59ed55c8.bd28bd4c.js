"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[3153],{28453:(e,s,i)=>{i.d(s,{R:()=>c,x:()=>a});var t=i(96540);const n={},r=t.createContext(n);function c(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(r.Provider,{value:s},e.children)}},68705:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Artifacts/Windows Artfacts/services","title":"Services","description":"Services installed on Windows","source":"@site/docs/Artifacts/Windows Artfacts/services.md","sourceDirName":"Artifacts/Windows Artfacts","slug":"/Artifacts/Windows Artfacts/services","permalink":"/artemis/docs/Artifacts/Windows Artfacts/services","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/services.md","tags":[],"version":"current","lastUpdatedBy":"puffycid","lastUpdatedAt":1748156846000,"frontMatter":{"description":"Services installed on Windows","keywords":["windows","registry","persistence"]},"sidebar":"artemisArtifacts","previous":{"title":"Service Installs","permalink":"/artemis/docs/Artifacts/Windows Artfacts/serviceinstall"},"next":{"title":"Shellbags","permalink":"/artemis/docs/Artifacts/Windows Artfacts/shellbags"}}');var n=i(74848),r=i(28453);const c={description:"Services installed on Windows",keywords:["windows","registry","persistence"]},a="Services",o={},l=[];function d(e){const s={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"services",children:"Services"})}),"\n",(0,n.jsxs)(s.p,{children:["Windows ",(0,n.jsx)(s.code,{children:"Services"})," are a common form of persistence and privilege escalation on\nWindows systems. Service data is stored in the SYSTEM Registry file.",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(s.code,{children:"Services"})," run with SYSTEM level privileges."]}),"\n",(0,n.jsx)(s.p,{children:"Other Parsers:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Any tool that can read the Registry"}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://docs.velociraptor.app/artifact_references/pages/windows.system.services/",children:"Velociraptor"})}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"References:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://forensafe.com/blogs/windowsservices.html",children:"Services"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/Velocidex/velociraptor/blob/master/artifacts/definitions/Windows/System/Services.yaml",children:"Velociraptor"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://winreg-kb.readthedocs.io/en/latest/sources/system-keys/Services-and-drivers.html",children:"Libyal"})}),"\n"]}),"\n",(0,n.jsx)(s.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-toml",children:'[output]\nname = "services_collection"\ndirectory = "./tmp"\nformat = "jsonl"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\ntimeline = false\n\n[[artifacts]]\nartifact_name = "services"\n[artifacts.services]\n# alt_file = "C:\\\\Artifacts\\\\SYSTEM"\n'})}),"\n",(0,n.jsx)(s.h1,{id:"collection-options",children:"Collection Options"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"alt_file"})," Full path to alternative SYSTEM Registry file. This configuration\nis ",(0,n.jsx)(s.strong,{children:"optional"}),". By default artemis will parse the SYSTEM Registry at the\ndefault location."]}),"\n"]}),"\n",(0,n.jsx)(s.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,n.jsxs)(s.p,{children:["An array of ",(0,n.jsx)(s.code,{children:"Services"})," entries"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"export interface Services {\n  /**Current State of the Service */\n  state: string;\n  /**Name of Service */\n  name: string;\n  /**Display name of Service */\n  display_name: string;\n  /**Service description */\n  description: string;\n  /**Start mode of Service */\n  start_mode: string;\n  /**Path to executable for Service */\n  path: string;\n  /**Service types. Ex: KernelDriver */\n  service_type: string[];\n  /**Account associated with Service */\n  account: string;\n  /**Registry modified timestamp. May be used to determine when the Service was created */\n  modified: string;\n  /**DLL associated with Service */\n  service_dll: string;\n  /**Service command upon failure */\n  failure_command: string;\n  /**Reset period associated with Service */\n  reset_period: number;\n  /**Service actions upon failure */\n  failure_actions: FailureActions[];\n  /**Privileges associated with Service */\n  required_privileges: string[];\n  /**Error associated with Service */\n  error_control: string;\n  /**Registry path associated with Service */\n  reg_path: string;\n}\n\n/**\n * Failure actions executed when Service fails\n */\ninterface FailureActions {\n  /**Action executed upon failure */\n  action: string;\n  /**Delay in seconds on failure */\n  delay: number;\n}\n"})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);