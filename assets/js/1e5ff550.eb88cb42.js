"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[5625],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=u(n),p=i,y=d["".concat(c,".").concat(p)]||d[p]||m[p]||s;return n?r.createElement(y,o(o({ref:t},l),{},{components:n})):r.createElement(y,o({ref:t},l))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[d]="string"==typeof e?e:i,o[1]=a;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9993:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const s={description:"Linux sudo records",keywords:["linux","logs","binary"]},o="Sudo Logs",a={unversionedId:"Artifacts/Linux Artifacts/sudo",id:"Artifacts/Linux Artifacts/sudo",title:"Sudo Logs",description:"Linux sudo records",source:"@site/docs/Artifacts/Linux Artifacts/sudo.md",sourceDirName:"Artifacts/Linux Artifacts",slug:"/Artifacts/Linux Artifacts/sudo",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/sudo",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Linux Artifacts/sudo.md",tags:[],version:"current",frontMatter:{description:"Linux sudo records",keywords:["linux","logs","binary"]},sidebar:"artemisArtifacts",previous:{title:"Shell History",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/shellhistory"},next:{title:"SystemInfo",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/systeminfo"}},c={},u=[],l={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sudo-logs"},"Sudo Logs"),(0,i.kt)("p",null,"Unix ",(0,i.kt)("inlineCode",{parentName:"p"},"SudoLogs"),' are the log files associated with sudo execution. Sudo ("super\nuser do" or "substitute user") is used to run programs with elevated privileges.'),(0,i.kt)("p",null,"macOS ",(0,i.kt)("inlineCode",{parentName:"p"},"SudoLogs")," are stored in the Unified Log files.",(0,i.kt)("br",null)," Linux ",(0,i.kt)("inlineCode",{parentName:"p"},"SudoLogs")," are\nstored in the Systemd Journal files.",(0,i.kt)("br",null)," The log entries show evidence of\ncommands executed with elevated privileges"),(0,i.kt)("p",null,"Other Parsers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"None")),(0,i.kt)("p",null,"References:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"N/A")),(0,i.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'system = "linux" # or "macos"\n\n[output]\nname = "sudologs_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "abdc"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "sudologs"\n')),(0,i.kt)("h1",{id:"collection-options"},"Collection Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"N/A")),(0,i.kt)("h1",{id:"output-structure"},"Output Structure"),(0,i.kt)("p",null,"On a Linux system ",(0,i.kt)("inlineCode",{parentName:"p"},"SudoLogs")," return an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"Journal")," entries"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'export interface Journal {\n  /**User ID associated with entry */\n  uid: number;\n  /**Group ID associated with entry */\n  gid: number;\n  /**Process ID associated with entry */\n  pid: number;\n  /**Thread ID associated with entry */\n  thread_id: number;\n  /**Command associated with entry */\n  comm: string;\n  /**Priority associated with entry */\n  priority: string;\n  /**Syslog facility associated with entry */\n  syslog_facility: string;\n  /**Executable file associated with entry */\n  executable: string;\n  /**Cmdline args associated with entry */\n  cmdline: string;\n  /**Effective capabilities of process associated with entry */\n  cap_effective: string;\n  /**Session of the process associated with entry */\n  audit_session: number;\n  /**Login UID of the process associated with entry */\n  audit_loginuid: number;\n  /**Systemd Countrol Group associated with entry */\n  systemd_cgroup: string;\n  /**Systemd owner UID associated with entry */\n  systemd_owner_uid: number;\n  /**Systemd unit associated with entry */\n  systemd_unit: string;\n  /**Systemd user unit associated with entry */\n  systemd_user_unit: string;\n  /**Systemd slice associated with entry */\n  systemd_slice: string;\n  /**Sysemd user slice associated with entry */\n  systemd_user_slice: string;\n  /**Systemd invocation ID associated with entry */\n  systemd_invocation_id: string;\n  /**Kernel Boot ID associated with entry */\n  boot_id: string;\n  /**Machine ID of host associated with entry */\n  machine_id: string;\n  /**Hostname associated with entry */\n  hostname: string;\n  /**Runtime scope associated with entry */\n  runtime_scope: string;\n  /**Trused Timestamp associated with entry in UNIXEPOCH microseconds */\n  source_realtime: number;\n  /**Timestamp associated with entry in UNIXEPOCH microseconds */\n  realtime: number;\n  /**How entry was received by the Journal service */\n  transport: string;\n  /**Journal message entry */\n  message: string;\n  /**Message ID associated with Journal Catalog */\n  message_id: string;\n  /**Unit result associated with entry */\n  unit_result: string;\n  /**Code line for file associated with entry */\n  code_line: number;\n  /**Code function for file associated with entry */\n  code_function: string;\n  /**Code file associated with entry */\n  code_file: string;\n  /**User invocation ID associated with entry */\n  user_invocation_id: string;\n  /**User unit associated with entry */\n  user_unit: string;\n  /**\n   * Custom fields associated with entry.\n   * Example:\n   * ```\n   * "custom": {\n   *            "_SOURCE_MONOTONIC_TIMESTAMP": "536995",\n   *            "_UDEV_SYSNAME": "0000:00:1c.3",\n   *            "_KERNEL_DEVICE": "+pci:0000:00:1c.3",\n   *            "_KERNEL_SUBSYSTEM": "pci"\n   *        }\n   * ```\n   */\n  custom: Record<string, string>;\n  /**Sequence Number associated with entry */\n  seqnum: number;\n}\n')))}m.isMDXComponent=!0}}]);