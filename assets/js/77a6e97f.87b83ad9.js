"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[2132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1335:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={description:"Primary source of logs on Windows",keywords:["windows","logs","binary"]},a="Event Logs",s={unversionedId:"Artifacts/Windows Artfacts/eventlogs",id:"Artifacts/Windows Artfacts/eventlogs",title:"Event Logs",description:"Primary source of logs on Windows",source:"@site/docs/Artifacts/Windows Artfacts/eventlogs.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/eventlogs",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/eventlogs",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/eventlogs.md",tags:[],version:"current",frontMatter:{description:"Primary source of logs on Windows",keywords:["windows","logs","binary"]},sidebar:"artemisArtifacts",previous:{title:"BITS",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/bits"},next:{title:"Files",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/files"}},l={},c=[],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"event-logs"},"Event Logs"),(0,o.kt)("p",null,"Windows ",(0,o.kt)("inlineCode",{parentName:"p"},"Event Logs")," are the primary files associated with logging system\nactivity. They are stored in a binary format, typically at\n",(0,o.kt)("inlineCode",{parentName:"p"},"C:\\Windows\\System32\\winevt\\Logs")),(0,o.kt)("p",null,"Other Parsers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.evtx/"},"Velociraptor"))),(0,o.kt)("p",null,"References:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/libyal/libevtx/blob/main/documentation/Windows%20XML%20Event%20Log%20(EVTX).asciidoc"},"Libyal"))),(0,o.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'system = "windows"\n\n[output]\nname = "eventlog_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "eventlogs"\n[artifacts.eventlogs]\n# Optional\n# alt_drive = \'C\'\n')),(0,o.kt)("h1",{id:"collection-options"},"Collection Options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"alt_drive")," Expects a single character value. Will use an alternative drive\nletter when parsing ",(0,o.kt)("inlineCode",{parentName:"li"},"Event Logs"),". This configuration is ",(0,o.kt)("strong",{parentName:"li"},"optional"),". By\ndefault artemis will use the ",(0,o.kt)("inlineCode",{parentName:"li"},"%systemdrive%")," value (typically ",(0,o.kt)("inlineCode",{parentName:"li"},"C"),")")),(0,o.kt)("h1",{id:"output-structure"},"Output Structure"),(0,o.kt)("p",null,"An array of ",(0,o.kt)("inlineCode",{parentName:"p"},"EventLogRecord")," entries"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'export interface EventLogRecord {\n  /**Event record number */\n  record_id: number;\n  /**Timestamp of eventlog message in UNIXEPOCH nanoseconds */\n  timestamp: number;\n  /**\n   * JSON object representation of the Eventlog message\n   * Depending on the log the JSON object may have different types of keys\n   * Example entry:\n   * ```\n   * "data": {\n   *     "Event": {\n   *         "#attributes": {\n   *             "xmlns": "http://schemas.microsoft.com/win/2004/08/events/event"\n   *         },\n   *         "System": {\n   *            "Provider": {\n   *               "#attributes": {\n   *                   "Name": "Microsoft-Windows-Bits-Client",\n   *                   "Guid": "EF1CC15B-46C1-414E-BB95-E76B077BD51E"\n   *                 }\n   *             },\n   *             "EventID": 3,\n   *             "Version": 3,\n   *             "Level": 4,\n   *             "Task": 0,\n   *             "Opcode": 0,\n   *             "Keywords": "0x4000000000000000",\n   *             "TimeCreated": {\n   *                 "#attributes": {\n   *                   "SystemTime": "2022-10-31T04:24:19.946430Z"\n   *                  }\n   *              },\n   *             "EventRecordID": 2,\n   *             "Correlation": null,\n   *             "Execution": {\n   *                 "#attributes": {\n   *                     "ProcessID": 1332,\n   *                     "ThreadID": 780\n   *                 }\n   *             },\n   *             "Channel": "Microsoft-Windows-Bits-Client/Operational",\n   *             "Computer": "DESKTOP-EIS938N",\n   *             "Security": {\n   *                 "#attributes": {\n   *                     "UserID": "S-1-5-18"\n   *                 }\n   *             }\n   *         },\n   *         "EventData": {\n   *             "jobTitle": "Font Download",\n   *             "jobId": "174718A5-F630-43D9-B378-728240ECE152",\n   *             "jobOwner": "NT AUTHORITY\\\\LOCAL SERVICE",\n   *             "processPath": "C:\\\\Windows\\\\System32\\\\svchost.exe",\n   *             "processId": 1456,\n   *             "ClientProcessStartKey": 844424930132016\n   *         }\n   *     }\n   * }\n   * ```\n   */\n  data: Record<string, unknown>;\n}\n')))}u.isMDXComponent=!0}}]);