"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[3232],{9044:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=t(7624),a=t(2172);const s={description:"Windows execution tracker",keywords:["windows","registry"]},c="Amcache",r={id:"Artifacts/Windows Artfacts/amcache",title:"Amcache",description:"Windows execution tracker",source:"@site/docs/Artifacts/Windows Artfacts/amcache.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/amcache",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/amcache",draft:!1,unlisted:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/amcache.md",tags:[],version:"current",frontMatter:{description:"Windows execution tracker",keywords:["windows","registry"]},sidebar:"artemisArtifacts",previous:{title:"Windows Artifacts",permalink:"/artemis-api/docs/category/windows-artifacts"},next:{title:"BITS",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/bits"}},o={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"amcache",children:"Amcache"}),"\n",(0,i.jsxs)(n.p,{children:["Windows ",(0,i.jsx)(n.code,{children:"Amcache"})," stores metadata related to execution of Windows applications.\nData is stored in the ",(0,i.jsx)(n.code,{children:"C:\\Windows\\appcompat\\Programs\\Amcache.hve"})," Registry file.\nThis Registry file also contains other metadata such as OS, hardware, and\napplication info. However, artemis will only collect data related to the\nexecution of Windows applications."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Registry"})," artifact may be used if you want to collect the full ",(0,i.jsx)(n.code,{children:"Registry"}),"\ndata from ",(0,i.jsx)(n.code,{children:"Amcache.hve"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Other Parsers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.velociraptor.app/artifact_references/pages/windows.detection.amcache/",children:"Velociraptor"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://ericzimmerman.github.io/#!index.md",children:"AmcacheParser"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"References:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/libyal/dtformats/blob/main/documentation/AMCache%20file%20(AMCache.hve)%20format.asciidoc",children:"Libyal"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.ssi.gouv.fr/uploads/2019/01/anssi-coriin_2019-analysis_amcache.pdf",children:"ANSSI"})}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'system = "windows"\n\n[output]\nname = "amcache_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "amcache"\n[artifacts.amcache]\n# Optional\n# alt_drive = \'D\'\n'})}),"\n",(0,i.jsx)(n.h1,{id:"collection-options",children:"Collection Options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"alt_drive"})," Expects a single character value. Will use an alternative drive\nletter when parsing ",(0,i.jsx)(n.code,{children:"Amcache"}),". This configuration is ",(0,i.jsx)(n.strong,{children:"optional"}),". By default\nartemis will use the ",(0,i.jsx)(n.code,{children:"%systemdrive%"})," value (typically ",(0,i.jsx)(n.code,{children:"C"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,i.jsxs)(n.p,{children:["An array of ",(0,i.jsx)(n.code,{children:"Amcache"})," entries"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface Amcache {\n  /**Timestamp when the application was first executed in UNIXEPOCH seconds */\n  first_execution: number;\n  /**Path to application */\n  path: string;\n  /**Name of application */\n  name: string;\n  /**Original name of application from PE metadata */\n  original_name: string;\n  /**Version of application from PE metadata */\n  version: string;\n  /**Executable type and arch information */\n  binary_type: string;\n  /**Application product version from PE metadata */\n  product_version: string;\n  /**Application product name from PE metadata */\n  product_name: string;\n  /**Application language */\n  language: string;\n  /**Application file ID. This is also the SHA1 hash */\n  file_id: string;\n  /**Application linking timestamp as MM/DD/YYYY HH:mm:ss*/\n  link_date: string;\n  /**Hash of application path */\n  path_hash: string;\n  /**Program ID associated with the application */\n  program_id: string;\n  /**Size of application */\n  size: string;\n  /**Application publisher from PE metadata */\n  publisher: string;\n  /**Application Update Seqeuence Number (USN) */\n  usn: string;\n  /**SHA1 hash of the first ~31MBs of the application */\n  sha1: string;\n  /**Path in the Amcache.hve file */\n  reg_path: string;\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>r,M:()=>c});var i=t(1504);const a={},s=i.createContext(a);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);