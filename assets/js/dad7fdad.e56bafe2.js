"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[4036],{28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>c});var i=r(96540);const s={},n=i.createContext(s);function a(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(n.Provider,{value:t},e.children)}},31449:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Artifacts/FreeBSD Artifacts/elf","title":"ELF","description":"The native executable format for FreeBSD","source":"@site/docs/Artifacts/FreeBSD Artifacts/elf.md","sourceDirName":"Artifacts/FreeBSD Artifacts","slug":"/Artifacts/FreeBSD Artifacts/elf","permalink":"/artemis-api/docs/Artifacts/FreeBSD Artifacts/elf","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/FreeBSD Artifacts/elf.md","tags":[],"version":"current","lastUpdatedBy":"puffyCid","lastUpdatedAt":1743403591000,"frontMatter":{"description":"The native executable format for FreeBSD","keywords":["freebsd","executable","binary"]},"sidebar":"artemisArtifacts","previous":{"title":"Cron","permalink":"/artemis-api/docs/Artifacts/FreeBSD Artifacts/cron"},"next":{"title":"Files","permalink":"/artemis-api/docs/Artifacts/FreeBSD Artifacts/files"}}');var s=r(74848),n=r(28453);const a={description:"The native executable format for FreeBSD",keywords:["freebsd","executable","binary"]},c="ELF",o={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"elf",children:"ELF"})}),"\n",(0,s.jsxs)(t.p,{children:["The Executable Linkable Format (",(0,s.jsx)(t.code,{children:"ELF"}),") is the executable format for\napplications on FreeBSD systems."]}),"\n",(0,s.jsxs)(t.p,{children:["Artemis is able to parse basic metadata from ",(0,s.jsx)(t.code,{children:"ELF"})," files."]}),"\n",(0,s.jsx)(t.p,{children:"Other Parsers:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://rada.re/n/",children:"radare2"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://lief-project.github.io/",children:"LIEF"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"References:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://lief-project.github.io/",children:"LIEF"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format",children:"ELF"})}),"\n"]}),"\n",(0,s.jsx)(t.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,s.jsxs)(t.p,{children:["There is no way to collect just ELF data with artemis instead it is an optional\nfeature for the ",(0,s.jsx)(t.a,{href:"/artemis-api/docs/Artifacts/FreeBSD%20Artifacts/files",children:"filelisting"})," and ",(0,s.jsx)(t.a,{href:"/artemis-api/docs/Artifacts/FreeBSD%20Artifacts/processes",children:"processes"}),"\nartifacts."]}),"\n",(0,s.jsxs)(t.p,{children:["However, it is possible to directly parse ELF files by using JavaScript. See the\n",(0,s.jsx)(t.a,{href:"/artemis-api/docs/Intro/Scripting/scripts",children:"scripts"})," chapter for examples."]}),"\n",(0,s.jsx)(t.h1,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsx)(t.p,{children:"N/A"}),"\n",(0,s.jsx)(t.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,s.jsxs)(t.p,{children:["An array of ",(0,s.jsx)(t.code,{children:"ElfInfo"})," entries"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export interface ElfInfo {\n  /**Array of symbols in ELF binary */\n  symbols: string[];\n  /**Array of sections in ELF binary */\n  sections: string[];\n  /**Machine type information in ELF binary */\n  machine_type: string;\n}\n"})})]})}function f(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);