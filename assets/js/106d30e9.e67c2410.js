"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[1409],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(r),f=s,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||a;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:s,i[1]=o;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2732:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var n=r(7462),s=(r(7294),r(3905));const a={description:"Linux process metadata",keywords:["linux","proc meta"]},i="Processes",o={unversionedId:"Artifacts/Linux Artifacts/processes",id:"Artifacts/Linux Artifacts/processes",title:"Processes",description:"Linux process metadata",source:"@site/docs/Artifacts/Linux Artifacts/processes.md",sourceDirName:"Artifacts/Linux Artifacts",slug:"/Artifacts/Linux Artifacts/processes",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/processes",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Linux Artifacts/processes.md",tags:[],version:"current",frontMatter:{description:"Linux process metadata",keywords:["linux","proc meta"]},sidebar:"artemisArtifacts",previous:{title:"Logons",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/logons"},next:{title:"Shell History",permalink:"/artemis-api/docs/Artifacts/Linux Artifacts/shellhistory"}},c={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,s.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"processes"},"Processes"),(0,s.kt)("p",null,"Gets a standard process listing using the Linux API"),(0,s.kt)("p",null,"Other Parsers:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Any tool that calls the Linux API")),(0,s.kt)("p",null,"References:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"N/A")),(0,s.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-toml"},'system = "Linux"\n\n[output]\nname = "process_collection"\ndirectory = "./tmp"\nformat = "jsonl"\ncompress = false\nendpoint_id = "abdc"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "processes" # Name of artifact\n[artifacts.processes]\n# Get executable metadata\nmetadata = true \n# MD5 hash process binary\nmd5 = true \n # SHA1 hash process binary\nsha1 = false\n# SHA256 hash process binary\nsha256 = false\n')),(0,s.kt)("h1",{id:"collection-options"},"Collection Options"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"metadata")," Get ",(0,s.kt)("a",{parentName:"li",href:"/artemis-api/docs/Artifacts/Linux%20Artifacts/elf"},"ELF")," data from process binary."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"md5")," Boolean value to MD5 hash process binary"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"sha1")," Boolean value to SHA1 hash process binary"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"sha256")," Boolean value to SHA256 hash process binary")),(0,s.kt)("h1",{id:"output-structure"},"Output Structure"),(0,s.kt)("p",null,"An array of ",(0,s.kt)("inlineCode",{parentName:"p"},"LinuxProcessInfo")," entries"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface LinuxProcessInfo {\n  /**Full path to the process binary */\n  full_path: string;\n  /**Name of process */\n  name: string;\n  /**Path to process binary */\n  path: string;\n  /** Process ID */\n  pid: number;\n  /** Parent Process ID */\n  ppid: number;\n  /**Environment variables associated with process */\n  environment: string;\n  /**Status of the process */\n  status: string;\n  /**Process arguments */\n  arguments: string;\n  /**Process memory usage */\n  memory_usage: number;\n  /**Process virtual memory usage */\n  virtual_memory_usage: number;\n  /**Process start time in UNIXEPOCH seconds*/\n  start_time: number;\n  /** User ID associated with process */\n  uid: string;\n  /**Group ID associated with process */\n  gid: string;\n  /**MD5 hash of process binary */\n  md5: string;\n  /**SHA1 hash of process binary */\n  sha1: string;\n  /**SHA256 hash of process binary */\n  sha256: string;\n  /**ELF metadata asssociated with process binary */\n  binary_info: ElfInfo[];\n}\n")))}m.isMDXComponent=!0}}]);