"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[7262],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[m]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={description:"Windows execution tracker",keywords:["windows","registry"]},o="Amcache",c={unversionedId:"Artifacts/Windows Artfacts/amcache",id:"Artifacts/Windows Artfacts/amcache",title:"Amcache",description:"Windows execution tracker",source:"@site/docs/Artifacts/Windows Artfacts/amcache.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/amcache",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/amcache",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/amcache.md",tags:[],version:"current",frontMatter:{description:"Windows execution tracker",keywords:["windows","registry"]},sidebar:"artemisArtifacts",previous:{title:"Windows Artifacts",permalink:"/artemis-api/docs/category/windows-artifacts"},next:{title:"BITS",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/bits"}},s={},l=[],p={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"amcache"},"Amcache"),(0,r.kt)("p",null,"Windows ",(0,r.kt)("inlineCode",{parentName:"p"},"Amcache")," stores metadata related to execution of Windows applications.\nData is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"C:\\Windows\\appcompat\\Programs\\Amcache.hve")," Registry file.\nThis Registry file also contains other metadata such as OS, hardware, and\napplication info. However, artemis will only collect data related to the\nexecution of Windows applications."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Registry")," artifact may be used if you want to collect the full ",(0,r.kt)("inlineCode",{parentName:"p"},"Registry"),"\ndata from ",(0,r.kt)("inlineCode",{parentName:"p"},"Amcache.hve"),"."),(0,r.kt)("p",null,"Other Parsers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.velociraptor.app/artifact_references/pages/windows.detection.amcache/"},"Velociraptor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://ericzimmerman.github.io/#!index.md"},"AmcacheParser"))),(0,r.kt)("p",null,"References:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/libyal/dtformats/blob/main/documentation/AMCache%20file%20(AMCache.hve)%20format.asciidoc"},"Libyal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.ssi.gouv.fr/uploads/2019/01/anssi-coriin_2019-analysis_amcache.pdf"},"ANSSI"))),(0,r.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'system = "windows"\n\n[output]\nname = "amcache_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "amcache"\n[artifacts.amcache]\n# Optional\n# alt_drive = \'D\'\n')),(0,r.kt)("h1",{id:"collection-options"},"Collection Options"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"alt_drive")," Expects a single character value. Will use an alternative drive\nletter when parsing ",(0,r.kt)("inlineCode",{parentName:"li"},"Amcache"),". This configuration is ",(0,r.kt)("strong",{parentName:"li"},"optional"),". By default\nartemis will use the ",(0,r.kt)("inlineCode",{parentName:"li"},"%systemdrive%")," value (typically ",(0,r.kt)("inlineCode",{parentName:"li"},"C"),")")),(0,r.kt)("h1",{id:"output-structure"},"Output Structure"),(0,r.kt)("p",null,"An array of ",(0,r.kt)("inlineCode",{parentName:"p"},"Amcache")," entries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Amcache {\n  /**Timestamp when the application was first executed in UNIXEPOCH seconds */\n  first_execution: number;\n  /**Path to application */\n  path: string;\n  /**Name of application */\n  name: string;\n  /**Original name of application from PE metadata */\n  original_name: string;\n  /**Version of application from PE metadata */\n  version: string;\n  /**Executable type and arch information */\n  binary_type: string;\n  /**Application product version from PE metadata */\n  product_version: string;\n  /**Application product name from PE metadata */\n  product_name: string;\n  /**Application language */\n  language: string;\n  /**Application file ID. This is also the SHA1 hash */\n  file_id: string;\n  /**Application linking timestamp as MM/DD/YYYY HH:mm:ss*/\n  link_date: string;\n  /**Hash of application path */\n  path_hash: string;\n  /**Program ID associated with the application */\n  program_id: string;\n  /**Size of application */\n  size: string;\n  /**Application publisher from PE metadata */\n  publisher: string;\n  /**Application Update Seqeuence Number (USN) */\n  usn: string;\n  /**SHA1 hash of the first ~31MBs of the application */\n  sha1: string;\n  /**Path in the Amcache.hve file */\n  reg_path: string;\n}\n")))}d.isMDXComponent=!0}}]);