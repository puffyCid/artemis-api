"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[9889],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},89209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Artifacts/Windows Artfacts/eventlogs","title":"Event Logs","description":"Primary source of logs on Windows","source":"@site/docs/Artifacts/Windows Artfacts/eventlogs.md","sourceDirName":"Artifacts/Windows Artfacts","slug":"/Artifacts/Windows Artfacts/eventlogs","permalink":"/artemis/docs/Artifacts/Windows Artfacts/eventlogs","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/eventlogs.md","tags":[],"version":"current","lastUpdatedBy":"puffycid","lastUpdatedAt":1748156846000,"frontMatter":{"description":"Primary source of logs on Windows","keywords":["windows","logs","binary"]},"sidebar":"artemisArtifacts","previous":{"title":"Extensible Storage Engine","permalink":"/artemis/docs/Artifacts/Windows Artfacts/ese"},"next":{"title":"Files","permalink":"/artemis/docs/Artifacts/Windows Artfacts/files"}}');var i=t(74848),r=t(28453);const o={description:"Primary source of logs on Windows",keywords:["windows","logs","binary"]},a="Event Logs",l={},d=[{value:"Template Parsing Caveats",id:"template-parsing-caveats",level:2},{value:"Template Files",id:"template-files",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"event-logs",children:"Event Logs"})}),"\n",(0,i.jsxs)(n.p,{children:["Windows ",(0,i.jsx)(n.code,{children:"EventLogs"})," are the primary files associated with logging system\nactivity. They are stored in a binary format, typically at\nC:\\Windows\\System32\\winevt\\Logs"]}),"\n",(0,i.jsx)(n.p,{children:"Artemis also has the capability to extract EventLog template data from PE files.\nThis is a powerful (but complex) feature that allows an analyst to potentially\nobtain the full EventLog message instead of just the data found in evtx files."}),"\n",(0,i.jsx)(n.p,{children:"Other Parsers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.evtx/",children:"Velociraptor"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"References:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/libyal/libevtx/blob/main/documentation/Windows%20XML%20Event%20Log%20(EVTX).asciidoc",children:"Libyal"})}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[output]\nname = "eventlog_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\ntimeline = false\n\n[[artifacts]]\nartifact_name = "eventlogs"\n[artifacts.eventlogs]\n# Optional\n# alt_file = "C:\\\\Artifacts\\\\Security.evtx"\n# alt_dir = "C:\\\\LogFiles" # Optional\n# alt_template_file = "C:\\\\Resources\\\\templates.json" # Optional \ninclude_templates = false\ndump_templates = false # Works only on Windows\nonly_templates = false # Works only on Windows\n'})}),"\n",(0,i.jsx)(n.h1,{id:"collection-options",children:"Collection Options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"alt_file"})," Full path to an EventLog file. This configuration is ",(0,i.jsx)(n.strong,{children:"optional"}),".\nBy default artemis will parse all Event Logs on the system under the default\npath"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"alt_dir"})," Full path to a directory containing EventLogs. This configuration is\n",(0,i.jsx)(n.strong,{children:"optional"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"include_templates"})," Whether artemis should parse PE files and extract EventLog\ntemplate strings. This configuration is ",(0,i.jsx)(n.strong,{children:"required"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dump_templates"})," Whether artemis should output the parsed EventLog template\nfiles. This output file can then be used to the evtx files on a different\nsystem. This configuration is ",(0,i.jsx)(n.strong,{children:"required"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"only_templates"})," Whether artemis should only output the parsed EventLog\ntemplate files and skip evtx files. This configuration is ",(0,i.jsx)(n.strong,{children:"required"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"template-parsing",children:"Template Parsing"}),"\n",(0,i.jsxs)(n.p,{children:["Artemis uses the popular ",(0,i.jsx)(n.a,{href:"https://github.com/omerbenamram/evtx",children:"evtx"})," crate to\nparse EventLog files. However, this library does not completely return the log\nmessage. It only returns the data found in the EventLog file. For example, the\nevtx crate will output the following message data from an EventLog file"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"EventData": {\n    "SubjectUserSid": "S-1-5-21-549467458-3727351111-1684278619-1001",\n    "SubjectUserName": "bob",\n    "SubjectDomainName": "DESKTOP-9FSUKAJ",\n    "SubjectLogonId": "0x3311b1",\n    "TargetName": "MicrosoftAccount:user=testemail@outlook.com",\n    "Type": 0,\n    "CountOfCredentialsReturned": 1,\n    "ReadOperation": "%%8100",\n    "ReturnCode": 0,\n    "ProcessCreationTime": "2024-10-01T02:49:28.150359Z",\n    "ClientProcessId": 1848\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"now compared to the Event Viewer on Windows"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Credential Manager credentials were read.\n\nSubject:\n\tSecurity ID:\t\tDESKTOP-9FSUKAJ\\bob\n\tAccount Name:\t\tbob\n\tAccount Domain:\t\tDESKTOP-9FSUKAJ\n\tLogon ID:\t\t0x3311b1\n\tRead Operation:\t\tEnumerate Credentials\n\nThis event occurs when a user performs a read operation on stored credentials in Credential Manager.\n"})}),"\n",(0,i.jsx)(n.p,{children:"In order to get the entire EventLog message, we need to parse EventLog provider\nfiles (PE files) and extract resource data. The Windows Registry contains\ninformation about EventLog providers. Artemis will perform the following high\nlevel actions to attempt to extract EventLog template strings:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Read and parse the SOFTWARE and SYSTEM Registry files to identify EventLog\nproviders. The provider information includes information about the PE file\nthat provides the EventLog template strings"}),"\n",(0,i.jsx)(n.li,{children:"Read and parse all PE files associated with EventLog providers"}),"\n",(0,i.jsx)(n.li,{children:"Extract and parse MUI, MESSAGETABLE, and WEVT_TEMPLATE resources from the PE\nfiles"}),"\n",(0,i.jsx)(n.li,{children:"Attempt to use: MESSAGETABLE, WEVT_TEMPLATE, and the EventLog data above to\nassemble the full EventLog message"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If parsing is successful artemis should return a more detailed EventLog message\nif you use the ",(0,i.jsx)(n.code,{children:"include_templates"})," option \ud83e\udd73 :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Credential Manager credentials were read.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-549467458-3727351111-1684278619-1001\n\tAccount Name:\t\tbob\n\tAccount Domain:\t\tDESKTOP-9FSUKAJ\n\tLogon ID:\t\t0x3311b1\n\tRead Operation:\t\tEnumerate Credentials\n\n\nThis event occurs when a user performs a read operation on stored credentials in Credential Manager.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"template-parsing-caveats",children:"Template Parsing Caveats"}),"\n",(0,i.jsxs)(n.p,{children:["Trying to include template strings in the EventLog messages is very complex.\nThere are a number of caveats and limitations you should be aware of. More can\nalso be found in several\n",(0,i.jsx)(n.a,{href:"https://docs.velociraptor.app/blog/2019/2019-11-12_windows-event-logs-d8d8e615c9ca/",children:"velociratpor"}),"\n",(0,i.jsx)(n.a,{href:"https://docs.velociraptor.app/docs/forensic/event_logs/",children:"blogs"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["No support for enum lookups. Artemis cannot lookup enum EventLog data values.\nEx: ",(0,i.jsx)(n.code,{children:'IntendedPackageState - 5112. 5112 = "Installed"'}),'. The enum number 5512\nis converted to the value "Installed" in Event Viewer']}),"\n",(0,i.jsxs)(n.li,{children:["You should not try parsing EventLog files on different Windows platforms. For\nexample, if you acquire a ",(0,i.jsx)(n.code,{children:"Security.evtx"})," on a Windows 11 system, you should\nnot try to parse the evtx file on a Windows 10 system. Microsoft updates the\ntemplate strings on different versions of Windows. If you try to parse evtx\nfiles on a different version of Windows you may get odd results!","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If you do try to parse an evtx file on a different artemis will still try\nto complete the EventLog message, but if it fails it will return the raw\nEventData"}),"\n",(0,i.jsxs)(n.li,{children:["It may ok to parse older evtx on newer Windows versions. For example,\nacquiring ",(0,i.jsx)(n.code,{children:"System.evtx"})," on Windows 10 and then parsing on Windows 11 may be\nok. Typically Windows will also contain older versions of template strings."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["If you acquire only an evtx file such as ",(0,i.jsx)(n.code,{children:"System.evtx"})," you must use a Windows\nsystem (or VM) in order to include template strings. You cannot use Linux or\nmacOS. If you want to include template strings on Linux or macOS you must\nalso provide a template file"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"template-files",children:"Template Files"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"dump_templates"})," option will make artemis dump the parse EventLog templates\nto a JSON file. This option also requires ",(0,i.jsx)(n.code,{children:"include_templates"}),". You must be on a\nWindows system in order for this to work."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["To dump templates easily using the artemis binary you run the following on\nWindows.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"artemis.exe acquire eventlogs --include-templates --dump-templates"})]}),(0,i.jsxs)(n.p,{children:["If you only want at template file (and not evtx data) you can run the following\non Windows.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"artemis.exe acquire eventlogs --include-templates --dump-templates --only-templates"})]})]}),"\n",(0,i.jsx)(n.p,{children:"Dumping the template data will return a single JSON file that can then be used\nto parse evtx files on different platforms. Example scenario:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["You dump templates on a Windows server via\n",(0,i.jsx)(n.code,{children:"artemis.exe acquire eventlogs --include-templates --dump-templates --only-templates"}),".\nSize will vary but ~90MBs seems normal"]}),"\n",(0,i.jsx)(n.li,{children:"You acquire the template file and move it to your Linux workstation"}),"\n",(0,i.jsxs)(n.li,{children:["You acquire a 2GB ",(0,i.jsx)(n.code,{children:"Application.evtx"})," file from the ",(0,i.jsx)(n.strong,{children:"same"})," Windows server\nand copy it to your Linux workstation"]}),"\n",(0,i.jsxs)(n.li,{children:["Run\n",(0,i.jsx)(n.code,{children:"artemis acquire eventlogs --include-templates --alt-template-file <PATH to TEMPLATE JSON FILE> --alt-file <PATH to Application.evtx>"}),"\non Linux and you should hopefully get the full EventLog message!"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If artemis fails to assemble the full EventLog message for any reason, it will\nfallback to the raw EventLog data obtained from the evtx file."}),"\n",(0,i.jsx)(n.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,i.jsx)(n.p,{children:"Depending on options provided there are several different structures that\nartemis can produce."}),"\n",(0,i.jsxs)(n.p,{children:["By default artemis will return an array of ",(0,i.jsx)(n.code,{children:"EventLogRecord"})," entries. This is the\nraw data obtained from the evtx file. Artemis will also fallback to\nEventLogRecord entries if it fails to create an ",(0,i.jsx)(n.code,{children:"EventLogMessage"})," structure"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'export interface EventLogRecord {\n  /**Event record number */\n  record_id: number;\n  /**Timestamp of eventlog message */\n  timestamp: string;\n  /**\n   * JSON object representation of the Eventlog message\n   * Depending on the log the JSON object may have different types of keys\n   * Example entry:\n   * ```\n   * "data": {\n   *     "Event": {\n   *         "#attributes": {\n   *             "xmlns": "http://schemas.microsoft.com/win/2004/08/events/event"\n   *         },\n   *         "System": {\n   *            "Provider": {\n   *               "#attributes": {\n   *                   "Name": "Microsoft-Windows-Bits-Client",\n   *                   "Guid": "EF1CC15B-46C1-414E-BB95-E76B077BD51E"\n   *                 }\n   *             },\n   *             "EventID": 3,\n   *             "Version": 3,\n   *             "Level": 4,\n   *             "Task": 0,\n   *             "Opcode": 0,\n   *             "Keywords": "0x4000000000000000",\n   *             "TimeCreated": {\n   *                 "#attributes": {\n   *                   "SystemTime": "2022-10-31T04:24:19.946430Z"\n   *                  }\n   *              },\n   *             "EventRecordID": 2,\n   *             "Correlation": null,\n   *             "Execution": {\n   *                 "#attributes": {\n   *                     "ProcessID": 1332,\n   *                     "ThreadID": 780\n   *                 }\n   *             },\n   *             "Channel": "Microsoft-Windows-Bits-Client/Operational",\n   *             "Computer": "DESKTOP-EIS938N",\n   *             "Security": {\n   *                 "#attributes": {\n   *                     "UserID": "S-1-5-18"\n   *                 }\n   *             }\n   *         },\n   *         "EventData": {\n   *             "jobTitle": "Font Download",\n   *             "jobId": "174718A5-F630-43D9-B378-728240ECE152",\n   *             "jobOwner": "NT AUTHORITY\\\\LOCAL SERVICE",\n   *             "processPath": "C:\\\\Windows\\\\System32\\\\svchost.exe",\n   *             "processId": 1456,\n   *             "ClientProcessStartKey": 844424930132016\n   *         }\n   *     }\n   * }\n   * ```\n   */\n  data: Record<string, unknown>;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you choose to include template strings, artemis will output ",(0,i.jsx)(n.code,{children:"EventLogMessage"}),"\nstructure."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"/**\n * Parsed EventLog files with template strings included. A flatten version of `EventLogRecord`\n */\nexport interface EventLogMessage {\n  /**Full EventLog message rendered using both the template string and evtx data */\n  message: string;\n  /**The raw template string */\n  template_message: string;\n  /**The raw evtx event data. Ex: `EventData` or `UserData` */\n  raw_event_data: Record<string, unknown>;\n  /**EventID for the entry */\n  event_id: bigint;\n  /**Qualifier ID for the entry */\n  qualifier: bigint;\n  /**Version number for the entry */\n  version: bigint;\n  /**GUID associated with the provider */\n  guid: string;\n  /**EventLog provider name */\n  provider: string;\n  /**Alternative provider name */\n  source_name: string;\n  /**EventLog record number */\n  record_id: bigint;\n  /**Task number for entry */\n  task: bigint;\n  /**EventLog level value */\n  level: string;\n  /**Opcode number for entry */\n  opcode: bigint;\n  /**Keywords value for entry. Is a hex number */\n  keywords: string;\n  /**Generated timestamp for entry */\n  generated: string;\n  /**System timestamp for entry */\n  system_time: string;\n  /**Activity ID for entry if available */\n  activity_id: string;\n  /**Process ID for entry if available */\n  process_id: bigint;\n  /**Thread ID for entry if available */\n  thread_id: bigint;\n  /**SID value for entry if available */\n  sid: string;\n  /**Channel name for entry */\n  channel: string;\n  /**Hostname of system */\n  computer: string;\n  /**Full path the evtx file that was parsed */\n  source_file: string;\n  /**Full path to the PE file that was used to obtain the template string */\n  message_file: string;\n  /**Full path to the PE file containing parameters for the entry */\n  parameter_file: string;\n  /**Source Registry file used to get provider info */\n  registry_file: string;\n  /**Registry key path to the provider info */\n  registry_path: string;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you choose to dump template strings to a JSON file, artemis will output a\n",(0,i.jsx)(n.code,{children:"TemplateStrings"})," structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"/**\n * A complex structure that represents the parsed EventLog template strings.\n * Can be used to create a full EventLog message\n */\nexport interface TemplateStrings {\n  /**Object containing Template provider info. Key is the provider name or a GUID */\n  providers: Record<string, Provider>;\n  /**Object containing Template string info. Key is the path to the PE file */\n  templates: Record<string, TemplateInfo>;\n}\n\n/**Information about the EventLog provider */\nexport interface Provider {\n  /**Source Registry file used to get provider info */\n  registry_file_path: string;\n  /**Registry key path to the provider info */\n  registry_path: string;\n  /**Name of provider. Might be a GUID */\n  name: string;\n  /**Array of PE files that point to the template strings*/\n  message_file: string[];\n  /**Array of PE files that point to the parameter values for the provider. So far this seems to always be one file */\n  parameter_file: string[];\n}\n\n/**The parsed WEVT_TEMPLATE info */\nexport interface TemplateInfo {\n  /** Path to PE file */\n  path: string;\n  /**Internal data used by artemis when parsing the PE data. These arrays will always be empty */\n  resource_data: {\n    mui_data: number[];\n    wevt_data: number[];\n    message_data: number[];\n    /** Path to PE file */\n    path: string;\n  };\n  /**Info related to the template message string. Key is the `MessageTable` ID */\n  message_table: Record<string, MessageTable>;\n  /**Extreme details on the EventLog provider template. Key is a GUID */\n  wevt_template: Record<string, WevtTemplate>;\n}\n\nexport interface MessageTable {\n  id: bigint;\n  size: number;\n  flags: string;\n  message: string;\n}\n\nexport interface WevtTemplate {\n  offset: number;\n  element_offsets: number[];\n  channels: TemplateData[];\n  keywords: TemplateData[];\n  opcodes: TemplateData[];\n  levels: TemplateData[];\n  maps: Maps[];\n  tasks: TemplateData[];\n  /**Information related to a EventID associated with a provider. Key is combination of the `Definition` ID and version. Ex: The key: `100_0` would be EventID 100 version 0 */\n  definitions: Record<string, Definition>;\n}\n\nexport interface Definition {\n  /**EventID. Makes up the `definitions` key along with the `version` */\n  id: number;\n  /**Version number of the definition object. Makes up the `definitions` key along with the `id`  */\n  version: number;\n  level: number;\n  opcode: number;\n  task: number;\n  keywords: number;\n  message_id: bigint;\n  temp_offset: number;\n  template: Template | null;\n  opcode_offset: number;\n  level_offset: number;\n  task_offset: number;\n}\n\nexport interface Template {\n  template_id: string;\n  event_data_type: string;\n  elements: {\n    token: string;\n    token_number: number;\n    dependency_id: number;\n    size: number;\n    attribute_list: {\n      attribute_token: string;\n      attribute_token_number: number;\n      value: string;\n      value_token: string;\n      value_token_number: number;\n      name: string;\n      input_type: string;\n      substitution: string;\n      substitution_id: number;\n    }[] | null;\n    element_name: string;\n    input_type: string;\n    substitution: string;\n    substitution_id: 0;\n  }[];\n  guid: string;\n}\n\nexport interface TemplateData {\n  message_id: bigint;\n  id: number;\n  value: string;\n  /**Only `Tasks` have this value */\n  guid: string | undefined;\n}\n\nexport interface Maps {\n  name: string;\n  data: Record<string, TemplateData>;\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);