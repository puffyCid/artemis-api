"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[8903],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),b=i,u=m["".concat(l,".").concat(b)]||m[b]||p[b]||o;return n?r.createElement(u,a(a({ref:t},d),{},{components:n})):r.createElement(u,a({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},599:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={description:"The Background Intelligent Transer Service (BITS)",keywords:["windows","ese","persistence"]},a="BITS",s={unversionedId:"Artifacts/Windows Artfacts/bits",id:"Artifacts/Windows Artfacts/bits",title:"BITS",description:"The Background Intelligent Transer Service (BITS)",source:"@site/docs/Artifacts/Windows Artfacts/bits.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/bits",permalink:"/docs/Artifacts/Windows Artfacts/bits",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/bits.md",tags:[],version:"current",frontMatter:{description:"The Background Intelligent Transer Service (BITS)",keywords:["windows","ese","persistence"]},sidebar:"artemisArtifacts",previous:{title:"Amcache",permalink:"/docs/Artifacts/Windows Artfacts/amcache"},next:{title:"Event Logs",permalink:"/docs/Artifacts/Windows Artfacts/eventlogs"}},l={},c=[],d={toc:c},m="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bits"},"BITS"),(0,i.kt)("p",null,"Windows Background Intelligent Transfer Service (",(0,i.kt)("inlineCode",{parentName:"p"},"BITS"),") is a service that\nallows applications and users to register jobs to upload/download file(s).\\\nIt is commonly used by applications to download updates. Starting on Windows 10\nBITS data is stored in an ESE database. Pre-Windows 10 it is stored in a\nproprietary binary format\\\n",(0,i.kt)("inlineCode",{parentName:"p"},"BITS")," data is stored at ",(0,i.kt)("inlineCode",{parentName:"p"},"C:\\ProgramData\\Microsoft\\Network\\Downloader\\qmgr.db")),(0,i.kt)("p",null,"Other Parsers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/fireeye/BitsParser"},"BitsParser")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ANSSI-FR/bits_parser"},"Bits_Parser")," (Only supports\npre-Windows 10 BITS files)")),(0,i.kt)("p",null,"References:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://ss64.com/nt/bitsadmin.html"},"BitsAdmin")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Background_Intelligent_Transfer_Service"},"Background Intelligrent Transfer Service")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.mandiant.com/resources/blog/attacker-use-of-windows-background-intelligent-transfer-service"},"BITS"))),(0,i.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'system = "windows"\n\n[output]\nname = "bits_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "bits"\n[artifacts.bits]\ncarve = true\n# Optional\n# alt_path = "D:\\\\ProgramData\\\\Microsoft\\\\Network\\\\Downloader\\\\qmgr.db"\n')),(0,i.kt)("h1",{id:"collection-options"},"Collection Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"carve")," Boolean value to carve deleted ",(0,i.kt)("inlineCode",{parentName:"li"},"BITS")," jobs and files from ",(0,i.kt)("inlineCode",{parentName:"li"},"qmgr.db")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"alt_path")," Use an alternative path to the ",(0,i.kt)("inlineCode",{parentName:"li"},"qmgr.db")," file. This configuration\nis ",(0,i.kt)("strong",{parentName:"li"},"optional"),". By default artemis will use\n",(0,i.kt)("inlineCode",{parentName:"li"},"%systemdrive%\\ProgramData\\Microsoft\\Network\\Downloader\\qmgr.db"))),(0,i.kt)("h1",{id:"output-structure"},"Output Structure"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Bits")," object that contains an array of jobs and carved jobs and files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Bits {\n  /**Array of data containing BITS info */\n  bits: BitsInfo[];\n  /**Array of carved jobs */\n  carved_jobs: Jobs[];\n  /**Array of carved files */\n  carved_files: Files[];\n}\n\n/**\n * Combination of parsed Jobs and File info from BITS\n */\nexport interface BitsInfo {\n  /**ID for the Job */\n  job_id: string;\n  /**ID for the File */\n  file_id: string;\n  /**SID associated with the Job */\n  owner_sid: string;\n  /**Timestamp when the Job was created in UNIXEPOCH seconds */\n  created: number;\n  /**Timestamp when the Job was modified in UNIXEPOCH seconds */\n  modified: number;\n  /**Timestamp when the Job was completed in UNIXEPOCH seconds */\n  completed: number;\n  /**Timestamp when the Job was expired in UNIXEPOCH seconds */\n  expiration: number;\n  /**Files associated with the Job */\n  files_total: number;\n  /**Number of bytes downloaded */\n  bytes_downloaded: number;\n  /**Number of bytes transferred */\n  bytes_transferred: number;\n  /**Name associated with Job */\n  job_name: string;\n  /**Description associated with Job */\n  job_description: string;\n  /**Commands associated with Job */\n  job_command: string;\n  /**Arguments associated with Job */\n  job_arguments: string;\n  /**Error count with the Job */\n  error_count: number;\n  /**BITS Job type */\n  job_type: string;\n  /**BITS Job state */\n  job_state: string;\n  /**Job priority */\n  priority: string;\n  /**BITS Job flags */\n  flags: string;\n  /**HTTP Method associated with Job */\n  http_method: string;\n  /**Full file path associated with Job */\n  full_path: string;\n  /**Filename associated with Job */\n  filename: string;\n  /**Target file path associated with Job */\n  target_path: string;\n  /**TMP file path associated with the JOb */\n  tmp_file: string;\n  /**Volume path associated with the file */\n  volume: string;\n  /**URL associated with the Job */\n  url: string;\n  /**If the BITS info was carved */\n  carved: boolean;\n  /**Transient error count with Job */\n  transient_error_count: number;\n  /**Permissions associated with the Job */\n  acls: AccessControl[];\n  /**Job timeout in seconds */\n  timeout: number;\n  /**Job retry delay in seconds */\n  retry_delay: number;\n  /**Additional SIDs associated with Job */\n  additional_sids: string[];\n}\n\n/**\n * Jobs from BITS\n */\nexport interface Jobs {\n  /**ID for the Job */\n  job_id: string;\n  /**ID for the File */\n  file_id: string;\n  /**SID associated with the Job */\n  owner_sid: string;\n  /**Timestamp when the Job was created in UNIXEPOCH seconds */\n  created: number;\n  /**Timestamp when the Job was modified in UNIXEPOCH seconds */\n  modified: number;\n  /**Timestamp when the Job was completed in UNIXEPOCH seconds */\n  completed: number;\n  /**Timestamp when the Job was expired in UNIXEPOCH seconds */\n  expiration: number;\n  /**Name associated with Job */\n  job_name: string;\n  /**Description associated with Job */\n  job_description: string;\n  /**Commands associated with Job */\n  job_command: string;\n  /**Arguments associated with Job */\n  job_arguments: string;\n  /**Error count with the Job */\n  error_count: number;\n  /**BITS Job type */\n  job_type: string;\n  /**BITS Job state */\n  job_state: string;\n  /**Job priority */\n  priority: string;\n  /**BITS Job flags */\n  flags: string;\n  /**HTTP Method associated with Job */\n  http_method: string;\n  /**Transient error count with Job */\n  transient_error_count: number;\n  /**Permissions associated with the Job */\n  acls: AccessControl[];\n  /**Job timeout in seconds */\n  timeout: number;\n  /**Job retry delay in seconds */\n  retry_delay: number;\n}\n\n/**\n * File(s) associated with Jobs\n */\nexport interface Files {\n  /**ID for the File */\n  file_id: string;\n  /**Files associated with the JOb */\n  files_transferred: number;\n  /**Number of bytes downloaded */\n  download_bytes_size: number;\n  /**Number of bytes transferred */\n  trasfer_bytes_size: number;\n  /**Fulll file path associated with Job */\n  full_path: string;\n  /**Filename associated with Job */\n  filename: string;\n  /**Target file path associated with Job */\n  target_path: string;\n  /**TMP file path associated with the JOb */\n  tmp_file: string;\n  /**Volume path associated with the file */\n  volume: string;\n  /**URL associated with the Job */\n  url: string;\n}\n")))}p.isMDXComponent=!0}}]);