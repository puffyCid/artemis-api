"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[3462],{10071:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"API/API Scenarios/outlook","title":"Outlook Interaction","description":"How to read emails and attachments!","source":"@site/docs/API/API Scenarios/outlook.md","sourceDirName":"API/API Scenarios","slug":"/API/API Scenarios/outlook","permalink":"/artemis-api/docs/API/API Scenarios/outlook","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/API/API Scenarios/outlook.md","tags":[],"version":"current","lastUpdatedBy":"puffyCid","lastUpdatedAt":1743403591000,"frontMatter":{"description":"How to read emails and attachments!"},"sidebar":"artemisAPI","previous":{"title":"iTunes Backup Extraction","permalink":"/artemis-api/docs/API/API Scenarios/itunes"},"next":{"title":"Timelines","permalink":"/artemis-api/docs/API/API Scenarios/timelines"}}');var a=n(74848),r=n(28453);const s={description:"How to read emails and attachments!"},l="Outlook Interaction",i={},d=[{value:"Outlook Parsing Guide",id:"outlook-parsing-guide",level:2},{value:"Create an Outlook class instance",id:"create-an-outlook-class-instance",level:3},{value:"Get the Root folder",id:"get-the-root-folder",level:3},{value:"Walkthrough all Folders in an OST file",id:"walkthrough-all-folders-in-an-ost-file",level:3},{value:"Get email messages",id:"get-email-messages",level:3},{value:"Output Message content",id:"output-message-content",level:3},{value:"Read Attachments",id:"read-attachments",level:3},{value:"Extract Attachments",id:"extract-attachments",level:3}];function m(e){const o={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.header,{children:(0,a.jsx)(o.h1,{id:"outlook-interaction",children:"Outlook Interaction"})}),"\n",(0,a.jsxs)(o.p,{children:["Outlook is a popular email client used on Windows and macOS systems. Artemis is\nable to parse the Windows\n",(0,a.jsx)(o.a,{href:"https://support.microsoft.com/en-us/office/introduction-to-outlook-data-files-pst-and-ost-222eaf92-a995-45d9-bde2-f331f60e2790",children:"OST"}),"to\nextract emails and attachments."]}),"\n",(0,a.jsxs)(o.p,{children:["The Artemis TypeScript API allow analyts to extract messages programatically.\nHowever, since OST files can be ",(0,a.jsx)(o.strong,{children:"extremely"})," large, we want to avoid reading\nthe entire file into memory."]}),"\n",(0,a.jsx)(o.p,{children:"Artemis provides a TypeScript Outlook class to help parse and interact with the\nOutlook OST file."}),"\n",(0,a.jsx)(o.h2,{id:"outlook-parsing-guide",children:"Outlook Parsing Guide"}),"\n",(0,a.jsxs)(o.p,{children:["Lets walkthrough a small sample\n",(0,a.jsx)(o.a,{href:"https://github.com/puffyCid/artemis/blob/main/core/tests/test_data/windows/outlook/windows11/test%40outlook.com.ost",children:"test"}),"\nOST file."]}),"\n",(0,a.jsx)(o.p,{children:"The guide below assumes you have cloned the artemis API repository to your local\nsystem."}),"\n",(0,a.jsxs)(o.p,{children:["The functions in this guide are documented\n",(0,a.jsx)(o.a,{href:"/artemis-api/docs/API/Artifacts/windows#outlook-class",children:"here"})]}),"\n",(0,a.jsx)(o.h3,{id:"create-an-outlook-class-instance",children:"Create an Outlook class instance"}),"\n",(0,a.jsx)(o.p,{children:"Before we can parse an OST file we we need to initialize an instance of the\nOutlook class."}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-typescript",children:'import { Outlook } from "./artemis-api/src/windows/outlook";\n\nfunction main() {\n  const path = "<path to test.ost>";\n  // If we wanted to parse an OST file on Windows that was opened by Outlook\n  // We could also provide boolean arg to access the OST file using the NTFS parser\n  // But for this example we do not need that\n  const reader = new Outlook(path);\n}\n\nmain();\n'})}),"\n",(0,a.jsx)(o.p,{children:"The above code initializes a new Outlook instance that we will use to parse the\nOST file."}),"\n",(0,a.jsx)(o.h3,{id:"get-the-root-folder",children:"Get the Root folder"}),"\n",(0,a.jsx)(o.p,{children:"The structure of an OST file is kind of like a filesystem. OST file contains\nfolders (directories) and messages (files). So we ultimately want to walkthrough\nthe folder structure and read messages along the way."}),"\n",(0,a.jsx)(o.p,{children:"First we must get the Root folder of the OST file."}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-typescript",children:'import { Outlook } from "./artemis-api/src/windows/outlook";\n\nfunction main() {\n  const path = "<path to test.ost>";\n  // If we wanted to parse an OST file on Windows that was opened by Outlook\n  // We could also provide boolean arg to access the OST file using the NTFS parser\n  // But for this example we do not need that\n  const reader = new Outlook(path);\n\n  const result = reader.rootFolder();\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  for (const sub of result.subfolders) {\n    console.log(`Name: ${sub.name} - Node: ${sub.node}`);\n  }\n}\n\nmain();\n'})}),"\n",(0,a.jsx)(o.p,{children:"The rootFolder() function returns either a FolderInfo object or a WindowsError.\nThe FolderInfo object contains some interesting data such as:"}),"\n",(0,a.jsxs)(o.ul,{children:["\n",(0,a.jsx)(o.li,{children:"Folder name"}),"\n",(0,a.jsx)(o.li,{children:"Array of subfolders (if it has any)"}),"\n",(0,a.jsx)(o.li,{children:"Array of Properties"}),"\n"]}),"\n",(0,a.jsx)(o.p,{children:"Properties are the primary metadata found in OST files. There over a hundred\ntypes of properties. Common ones are: To, From, Subject, Created, Delivered,\nBody, Attachment Name, mail headers, etc."}),"\n",(0,a.jsx)(o.p,{children:"The code above loops through any subfolders found in the root folder and prints\nthe subfolder name and ID."}),"\n",(0,a.jsx)(o.p,{children:"If you transpile the code to JavaScript and run, you should see the following"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{children:'[artemis] Starting artemis collection!\n[runtime]: "Name: Root - Public - Node: 8194"\n[runtime]: "Name: Root - Mailbox - Node: 8354"\n[artemis] Finished artemis collection!\n'})}),"\n",(0,a.jsxs)(o.p,{children:["The root folder has two subfolders called ",(0,a.jsx)(o.code,{children:"Root - Public"})," and ",(0,a.jsx)(o.code,{children:"Root - Mailbox"})]}),"\n",(0,a.jsxs)(o.ul,{children:["\n",(0,a.jsx)(o.li,{children:"Root - Public: Typically contains empty nested folders"}),"\n",(0,a.jsx)(o.li,{children:"Root - Mailbox: Is the folder that contains bulk of the OST data"}),"\n"]}),"\n",(0,a.jsx)(o.h3,{id:"walkthrough-all-folders-in-an-ost-file",children:"Walkthrough all Folders in an OST file"}),"\n",(0,a.jsxs)(o.p,{children:["Now that we parsed the root folder, we have everything we need to recursively\nwalk the OST file!",(0,a.jsx)(o.br,{}),"\n","Update the your TypeScript script with the code below:"]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-typescript",children:'import { WindowsError } from "./artemis-api/src/windows/errors";\nimport { Outlook } from "./artemis-api/src/windows/outlook";\nimport type { SubFolder } from "./artemis-api/types/windows/outlook";\n\nfunction main() {\n  const path = "<path to test.ost>";\n  const reader = new Outlook(path);\n\n  const result = reader.rootFolder();\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  for (const sub of result.subfolders) {\n    console.log(`Name: ${sub.name} - Node: ${sub.node}`);\n    walkFolders(sub, reader, `/${sub.name}`);\n  }\n}\n\n// Read a folder and then read any subfolders\nfunction walkFolders(folder: SubFolder, reader: Outlook, full_path: string) {\n  const result = reader.readFolder(folder.node);\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  for (const sub of result.subfolders) {\n    const path = `${full_path}/${sub.name}`;\n\n    console.log(\n      `Name: ${sub.name} - Node: ${sub.node} - Folder path: ${path}`,\n    );\n    walkFolders(sub, reader, path);\n  }\n}\n\nmain();\n'})}),"\n",(0,a.jsxs)(o.p,{children:["We create a function ",(0,a.jsx)(o.code,{children:"walkFolders()"})," that takes SubFolder object, our Outlook\nclass instance, and path tracker and it will read the SubFolder object and then\ncontinue to read any other subfolders found. The ",(0,a.jsx)(o.code,{children:"readFolder()"})," functions\nexpects a folder ID (node). It also returns a FolderInfo object just like\n",(0,a.jsx)(o.code,{children:"rootFolder()"})," function."]}),"\n",(0,a.jsx)(o.p,{children:"If you transpile the code to JavaScript and run, you should see the following"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{children:'[artemis] Starting artemis collection!\n[runtime]: "Name: Root - Public - Node: 8194"\n[runtime]: "Name: IPM_SUBTREE - Node: 8226 - Folder path: /Root - Public/IPM_SUBTREE"\n[runtime]: "Name: NON_IPM_SUBTREE - Node: 8258 - Folder path: /Root - Public/NON_IPM_SUBTREE"\n[runtime]: "Name: EFORMS REGISTRY - Node: 8290 - Folder path: /Root - Public/NON_IPM_SUBTREE/EFORMS REGISTRY"\n[runtime]: "Name: Organization Forms - Node: 8322 - Folder path: /Root - Public/NON_IPM_SUBTREE/EFORMS REGISTRY/Organization Forms"\n\n[runtime]: "Name: Root - Mailbox - Node: 8354"\n[runtime]: "Name: Common Views - Node: 8386 - Folder path: /Root - Mailbox/Common Views"\n[runtime]: "Name: Finder - Node: 8418 - Folder path: /Root - Mailbox/Finder"\n[runtime]: "Name: Reminders - Node: 524355 - Folder path: /Root - Mailbox/Finder/Reminders"\n[runtime]: "Name: Tracked Mail Processing - Node: 524387 - Folder path: /Root - Mailbox/Finder/Tracked Mail Processing"\n[runtime]: "Name: To-Do Search - Node: 524419 - Folder path: /Root - Mailbox/Finder/To-Do Search"\n[runtime]: "Name: Shortcuts - Node: 8450 - Folder path: /Root - Mailbox/Shortcuts"\n[runtime]: "Name: Views - Node: 8482 - Folder path: /Root - Mailbox/Views"\n[runtime]: "Name: IPM_SUBTREE - Node: 8514 - Folder path: /Root - Mailbox/IPM_SUBTREE"\n[runtime]: "Name: Deleted Items - Node: 8546 - Folder path: /Root - Mailbox/IPM_SUBTREE/Deleted Items"\n[runtime]: "Name: Inbox - Node: 8578 - Folder path: /Root - Mailbox/IPM_SUBTREE/Inbox"\n[runtime]: "Name: Outbox - Node: 8610 - Folder path: /Root - Mailbox/IPM_SUBTREE/Outbox"\n[runtime]: "Name: Sent Items - Node: 8642 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sent Items"\n[runtime]: "Name: Files - Node: 32802 - Folder path: /Root - Mailbox/IPM_SUBTREE/Files"\n[runtime]: "Name: Archive - Node: 32834 - Folder path: /Root - Mailbox/IPM_SUBTREE/Archive"\n[runtime]: "Name: Yammer Root - Node: 32866 - Folder path: /Root - Mailbox/IPM_SUBTREE/Yammer Root"\n[runtime]: "Name: Inbound - Node: 33378 - Folder path: /Root - Mailbox/IPM_SUBTREE/Yammer Root/Inbound"\n[runtime]: "Name: Outbound - Node: 33410 - Folder path: /Root - Mailbox/IPM_SUBTREE/Yammer Root/Outbound"\n[runtime]: "Name: Feeds - Node: 33442 - Folder path: /Root - Mailbox/IPM_SUBTREE/Yammer Root/Feeds"\n[runtime]: "Name: Conversation History - Node: 32898 - Folder path: /Root - Mailbox/IPM_SUBTREE/Conversation History"\n\n[runtime]: "Name: Team Chat - Node: 33314 - Folder path: /Root - Mailbox/IPM_SUBTREE/Conversation History/Team Chat"\n[runtime]: "Name: Conversation Action Settings - Node: 32930 - Folder path: /Root - Mailbox/IPM_SUBTREE/Conversation Action Settings"\n[runtime]: "Name: ExternalContacts - Node: 32962 - Folder path: /Root - Mailbox/IPM_SUBTREE/ExternalContacts"\n[runtime]: "Name: Junk Email - Node: 32994 - Folder path: /Root - Mailbox/IPM_SUBTREE/Junk Email"\n[runtime]: "Name: Journal - Node: 33026 - Folder path: /Root - Mailbox/IPM_SUBTREE/Journal"\n[runtime]: "Name: Calendar - Node: 33058 - Folder path: /Root - Mailbox/IPM_SUBTREE/Calendar"\n[runtime]: "Name: Notes - Node: 33090 - Folder path: /Root - Mailbox/IPM_SUBTREE/Notes"\n[runtime]: "Name: Contacts - Node: 33122 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts"\n[runtime]: "Name: Organizational Contacts - Node: 33218 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/Organizational Contacts"\n[runtime]: "Name: GAL Contacts - Node: 33250 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/GAL Contacts"\n[runtime]: "Name: Companies - Node: 33282 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/Companies"\n[runtime]: "Name: {06967759-274D-40B2-A3EB-D7F9E73727D7} - Node: 33346 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/{06967759-274D-40B2-A3EB-D7F9E73727D7}"\n[runtime]: "Name: Recipient Cache - Node: 33474 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/Recipient Cache"\n\n[runtime]: "Name: PeopleCentricConversation Buddies - Node: 33506 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/PeopleCentricConversation Buddies"\n[runtime]: "Name: {A9E2BC46-B3A0-4243-B315-60D991004455} - Node: 33538 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/{A9E2BC46-B3A0-4243-B315-60D991004455}"\n[runtime]: "Name: Drafts - Node: 33154 - Folder path: /Root - Mailbox/IPM_SUBTREE/Drafts"\n[runtime]: "Name: Tasks - Node: 33186 - Folder path: /Root - Mailbox/IPM_SUBTREE/Tasks"\n[runtime]: "Name: Sync Issues - Node: 33570 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sync Issues"\n[runtime]: "Name: Conflicts - Node: 33602 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sync Issues/Conflicts"\n[runtime]: "Name: Local Failures - Node: 33634 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sync Issues/Local Failures"\n[runtime]: "Name: Server Failures - Node: 33666 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sync Issues/Server Failures"\n[runtime]: "Name: Quick Step Settings - Node: 33698 - Folder path: /Root - Mailbox/IPM_SUBTREE/Quick Step Settings"\n[runtime]: "Name: ~MAPISP(Internal) - Node: 8674 - Folder path: /Root - Mailbox/~MAPISP(Internal)"\n[runtime]: "Name: Drizzle - Node: 8706 - Folder path: /Root - Mailbox/Drizzle"\n[runtime]: "Name: Shared Data - Node: 8770 - Folder path: /Root - Mailbox/Shared Data"\n[runtime]: "Name: SPAM Search Folder 2 - Node: 8739 - Folder path: /Root - Mailbox/SPAM Search Folder 2"\n[runtime]: "Name: ItemProcSearch - Node: 524323 - Folder path: /Root - Mailbox/ItemProcSearch"\n'})}),"\n",(0,a.jsx)(o.p,{children:"Where Name is the folder name, Node is the folder ID, and Folder path is the\nfull path the the folder."}),"\n",(0,a.jsx)(o.h3,{id:"get-email-messages",children:"Get email messages"}),"\n",(0,a.jsx)(o.p,{children:"So now we can walkthrough and access all folders in an OST file. Now lets get\nthe email messages."}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-typescript",children:'import { WindowsError } from "./artemis-api/src/windows/errors";\nimport { Outlook } from "./artemis-api/src/windows/outlook";\nimport type { SubFolder } from "./artemis-api/types/windows/outlook";\n\nfunction main() {\n  const path = "<path to test.ost>";\n  const reader = new Outlook(path);\n\n  const result = reader.rootFolder();\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  for (const sub of result.subfolders) {\n    console.log(`Name: ${sub.name} - Node: ${sub.node}`);\n    walkFolders(sub, reader, `/${sub.name}`);\n  }\n}\n\n// Read a folder and then read any subfolders\nfunction walkFolders(folder: SubFolder, reader: Outlook, full_path: string) {\n  const result = reader.readFolder(folder.node);\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  // If the folder has messages, lets parse them\n  if (result.message_count != 0) {\n    console.log(`Total messages: ${result.message_count}`);\n    const limit = 200;\n    let offset = 0;\n\n    // message_count is the total messages in a folder\n    let count = result.message_count;\n    while (count != 0) {\n      const emails = reader.readMessages(\n        result.messages_table,\n        offset,\n        limit,\n      );\n      if (emails instanceof WindowsError) {\n        console.log(emails);\n        break;\n      }\n      console.log(`Email messages: ${emails.length}`);\n      for (const email of emails) {\n        console.log(\n          `Subject: ${email.subject} - From: ${email.from} - Folder: ${full_path}`,\n        );\n      }\n      // Done if we do not hit limit\n      if (emails.length < limit) {\n        break;\n      }\n      count = emails.length;\n\n      offset += limit;\n    }\n  }\n\n  for (const sub of result.subfolders) {\n    const path = `${full_path}/${sub.name}`;\n\n    console.log(\n      `Name: ${sub.name} - Node: ${sub.node} - Folder path: ${path}`,\n    );\n    walkFolders(sub, reader, path);\n  }\n}\n\nmain();\n'})}),"\n",(0,a.jsx)(o.p,{children:"We added quite a bit code above."}),"\n",(0,a.jsxs)(o.ol,{children:["\n",(0,a.jsxs)(o.li,{children:["The ",(0,a.jsx)(o.code,{children:"FolderInfo"})," object contains a property called ",(0,a.jsx)(o.code,{children:"message_count"}),". If this\nvalue is 0 then the folder has no messages. If the value is 1 the folder has\n1 message, if 10 then 10 messages, etc"]}),"\n",(0,a.jsx)(o.li,{children:"So we want to start reading messages. Since we do not know the number of\nmessages ahead of time we will set a limit of 200. And only read 200 messages\nat a time."}),"\n"]}),"\n",(0,a.jsxs)(o.admonition,{type:"info",children:[(0,a.jsx)(o.p,{children:"The limit you provide will directly influence memory usage by artemis when\nparsing the OST file. The higher the limit the faster the parsing will be, but\nat the cost of more memory."}),(0,a.jsxs)(o.p,{children:["200 is the default limit of the artemis Rust binary. This means when you run\n",(0,a.jsx)(o.code,{children:"artemis acquire outlook"})," the binary will read 200 message and then output the\nresults. Then read the next 200 messages and repeat the process until all\nmessages are read."]})]}),"\n",(0,a.jsxs)(o.ol,{start:"3",children:["\n",(0,a.jsx)(o.li,{children:"We also provide an offset value of 0. This tells artemis to start at the\nfirst message in the folder. If you only want messages 20-25. You would set\nthe offset to 20 and the limit to 5."}),"\n",(0,a.jsxs)(o.li,{children:["Finally we provide the ",(0,a.jsx)(o.code,{children:"messages_table"})," property associated with the\nFolderInfo object. This is the internal OST structure that artemis requires\nin order to parse messages."]}),"\n",(0,a.jsxs)(o.li,{children:["The function ",(0,a.jsx)(o.code,{children:"readMessages()"})," will return an array of MessageDetails or a\nWindowsError"]}),"\n",(0,a.jsx)(o.li,{children:"We finally loop through the messages and print the Subject and From info.\nThen if if the number of messages we read are below the limit we provided\nthen we are done. Otherwise we have more messages to read and the while loop\ncontinues."}),"\n"]}),"\n",(0,a.jsx)(o.p,{children:"If you transpile the code to JavaScript and run, you should see the following"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{children:'[artemis] Starting artemis collection!\n[runtime]: "Name: Root - Public - Node: 8194"\n[runtime]: "Name: IPM_SUBTREE - Node: 8226 - Folder path: /Root - Public/IPM_SUBTREE"\n[runtime]: "Name: NON_IPM_SUBTREE - Node: 8258 - Folder path: /Root - Public/NON_IPM_SUBTREE"\n[runtime]: "Name: EFORMS REGISTRY - Node: 8290 - Folder path: /Root - Public/NON_IPM_SUBTREE/EFORMS REGISTRY"\n[runtime]: "Name: Organization Forms - Node: 8322 - Folder path: /Root - Public/NON_IPM_SUBTREE/EFORMS REGISTRY/Organization Forms"\n[runtime]: "Name: Root - Mailbox - Node: 8354"\n[runtime]: "Name: Common Views - Node: 8386 - Folder path: /Root - Mailbox/Common Views"\n[runtime]: "Name: Finder - Node: 8418 - Folder path: /Root - Mailbox/Finder"\n[runtime]: "Name: Reminders - Node: 524355 - Folder path: /Root - Mailbox/Finder/Reminders"\n[runtime]: "Name: Tracked Mail Processing - Node: 524387 - Folder path: /Root - Mailbox/Finder/Tracked Mail Processing"\n[runtime]: "Name: To-Do Search - Node: 524419 - Folder path: /Root - Mailbox/Finder/To-Do Search"\n[runtime]: "Name: Shortcuts - Node: 8450 - Folder path: /Root - Mailbox/Shortcuts"\n[runtime]: "Name: Views - Node: 8482 - Folder path: /Root - Mailbox/Views"\n[runtime]: "Name: IPM_SUBTREE - Node: 8514 - Folder path: /Root - Mailbox/IPM_SUBTREE"\n\n[runtime]: "Name: Deleted Items - Node: 8546 - Folder path: /Root - Mailbox/IPM_SUBTREE/Deleted Items"\n[runtime]: "Total messages: 1"\n03:49:19 [WARN] [outlook] Caller asked for too many messages. Caller asked for 200 messages. But there are only 1 available. We will return 1\n[runtime]: "Email messages: 1"\n[runtime]: "Subject: Microsoft account security info was added - From: account-security-noreply@accountprotection.microsoft.com - Folder: /Root - Mailbox/IPM_SUBTREE/Deleted Items"\n\n[runtime]: "Name: Inbox - Node: 8578 - Folder path: /Root - Mailbox/IPM_SUBTREE/Inbox"\n[runtime]: "Total messages: 5"\n03:49:19 [WARN] [outlook] Caller asked for too many messages. Caller asked for 200 messages. But there are only 5 available. We will return 5\n[runtime]: "Email messages: 5"\n\n[runtime]: "Subject:      Get to know your OneDrive \u2013 How to back up your PC and mobile - From: Microsoft@notificationmail.microsoft.com - Folder: /Root - Mailbox/IPM_SUBTREE/Inbox"\n[runtime]: "Subject: Microsoft account security info was added - From: account-security-noreply@accountprotection.microsoft.com - Folder: /Root - Mailbox/IPM_SUBTREE/Inbox"\n[runtime]: "Subject: Microsoft account security info verification - From: account-security-noreply@accountprotection.microsoft.com - Folder: /Root - Mailbox/IPM_SUBTREE/Inbox"\n[runtime]: "Subject: Welcome to your new Outlook.com account - From: no-reply@microsoft.com - Folder: /Root - Mailbox/IPM_SUBTREE/Inbox"\n[runtime]: "Subject: Hi - From: *****@outlook.com - Folder: /Root - Mailbox/IPM_SUBTREE/Inbox"\n\n[runtime]: "Name: Outbox - Node: 8610 - Folder path: /Root - Mailbox/IPM_SUBTREE/Outbox"\n[runtime]: "Name: Sent Items - Node: 8642 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sent Items"\n[runtime]: "Total messages: 1"\n03:49:19 [WARN] [outlook] Caller asked for too many messages. Caller asked for 200 messages. But there are only 1 available. We will return 1\n[runtime]: "Email messages: 1"\n\n[runtime]: "Subject: Hi - From: /O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFF859D663E - Folder: /Root - Mailbox/IPM_SUBTREE/Sent Items"\n\n[runtime]: "Name: Files - Node: 32802 - Folder path: /Root - Mailbox/IPM_SUBTREE/Files"\n[runtime]: "Name: Archive - Node: 32834 - Folder path: /Root - Mailbox/IPM_SUBTREE/Archive"\n[runtime]: "Name: Yammer Root - Node: 32866 - Folder path: /Root - Mailbox/IPM_SUBTREE/Yammer Root"\n[runtime]: "Name: Inbound - Node: 33378 - Folder path: /Root - Mailbox/IPM_SUBTREE/Yammer Root/Inbound"\n[runtime]: "Name: Outbound - Node: 33410 - Folder path: /Root - Mailbox/IPM_SUBTREE/Yammer Root/Outbound"\n[runtime]: "Name: Feeds - Node: 33442 - Folder path: /Root - Mailbox/IPM_SUBTREE/Yammer Root/Feeds"\n[runtime]: "Name: Conversation History - Node: 32898 - Folder path: /Root - Mailbox/IPM_SUBTREE/Conversation History"\n[runtime]: "Name: Team Chat - Node: 33314 - Folder path: /Root - Mailbox/IPM_SUBTREE/Conversation History/Team Chat"\n[runtime]: "Name: Conversation Action Settings - Node: 32930 - Folder path: /Root - Mailbox/IPM_SUBTREE/Conversation Action Settings"\n[runtime]: "Name: ExternalContacts - Node: 32962 - Folder path: /Root - Mailbox/IPM_SUBTREE/ExternalContacts"\n\n[runtime]: "Name: Junk Email - Node: 32994 - Folder path: /Root - Mailbox/IPM_SUBTREE/Junk Email"\n[runtime]: "Total messages: 1"\n03:49:19 [WARN] [outlook] Caller asked for too many messages. Caller asked for 200 messages. But there are only 1 available. We will return 1\n[runtime]: "Email messages: 1"\n\n[runtime]: "Subject: Get started with Microsoft Learn - From: Learn@notifications.microsoft.com - Folder: /Root - Mailbox/IPM_SUBTREE/Junk Email"\n\n[runtime]: "Name: Journal - Node: 33026 - Folder path: /Root - Mailbox/IPM_SUBTREE/Journal"\n[runtime]: "Name: Calendar - Node: 33058 - Folder path: /Root - Mailbox/IPM_SUBTREE/Calendar"\n[runtime]: "Total messages: 2"\n03:49:19 [WARN] [outlook] Caller asked for too many messages. Caller asked for 200 messages. But there are only 2 available. We will return 2\n[runtime]: "Email messages: 2"\n\n[runtime]: "Subject: Deadline!! - From: /O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFF859D663E - Folder: /Root - Mailbox/IPM_SUBTREE/Calendar"\n[runtime]: "Subject: Something Due soon!? - From: /O=FIRST ORGANIZATION/OU=EXCHANGE ADMINISTRATIVE GROUP(FYDIBOHF23SPDLT)/CN=RECIPIENTS/CN=00037FFF859D663E - Folder: /Root - Mailbox/IPM_SUBTREE/Calendar"\n\n[runtime]: "Name: Notes - Node: 33090 - Folder path: /Root - Mailbox/IPM_SUBTREE/Notes"\n[runtime]: "Name: Contacts - Node: 33122 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts"\n[runtime]: "Name: Organizational Contacts - Node: 33218 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/Organizational Contacts"\n[runtime]: "Name: GAL Contacts - Node: 33250 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/GAL Contacts"\n[runtime]: "Name: Companies - Node: 33282 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/Companies"\n[runtime]: "Name: {06967759-274D-40B2-A3EB-D7F9E73727D7} - Node: 33346 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/{06967759-274D-40B2-A3EB-D7F9E73727D7}"\n[runtime]: "Name: Recipient Cache - Node: 33474 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/Recipient Cache"\n[runtime]: "Name: PeopleCentricConversation Buddies - Node: 33506 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/PeopleCentricConversation Buddies"\n[runtime]: "Name: {A9E2BC46-B3A0-4243-B315-60D991004455} - Node: 33538 - Folder path: /Root - Mailbox/IPM_SUBTREE/Contacts/{A9E2BC46-B3A0-4243-B315-60D991004455}"\n\n[runtime]: "Name: Drafts - Node: 33154 - Folder path: /Root - Mailbox/IPM_SUBTREE/Drafts"\n[runtime]: "Total messages: 1"\n03:49:19 [WARN] [outlook] Caller asked for too many messages. Caller asked for 200 messages. But there are only 1 available. We will return 1\n[runtime]: "Email messages: 1"\n[runtime]: "Subject:  - From:  - Folder: /Root - Mailbox/IPM_SUBTREE/Drafts"\n\n[runtime]: "Name: Tasks - Node: 33186 - Folder path: /Root - Mailbox/IPM_SUBTREE/Tasks"\n[runtime]: "Name: Sync Issues - Node: 33570 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sync Issues"\n[runtime]: "Name: Conflicts - Node: 33602 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sync Issues/Conflicts"\n[runtime]: "Name: Local Failures - Node: 33634 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sync Issues/Local Failures"\n[runtime]: "Name: Server Failures - Node: 33666 - Folder path: /Root - Mailbox/IPM_SUBTREE/Sync Issues/Server Failures"\n[runtime]: "Name: Quick Step Settings - Node: 33698 - Folder path: /Root - Mailbox/IPM_SUBTREE/Quick Step Settings"\n[runtime]: "Name: ~MAPISP(Internal) - Node: 8674 - Folder path: /Root - Mailbox/~MAPISP(Internal)"\n[runtime]: "Name: Drizzle - Node: 8706 - Folder path: /Root - Mailbox/Drizzle"\n[runtime]: "Name: Shared Data - Node: 8770 - Folder path: /Root - Mailbox/Shared Data"\n[runtime]: "Name: SPAM Search Folder 2 - Node: 8739 - Folder path: /Root - Mailbox/SPAM Search Folder 2"\n[runtime]: "Name: ItemProcSearch - Node: 524323 - Folder path: /Root - Mailbox/ItemProcSearch"\n'})}),"\n",(0,a.jsx)(o.p,{children:"You should notice some warning messages when running:"}),"\n",(0,a.jsxs)(o.ul,{children:["\n",(0,a.jsx)(o.li,{children:(0,a.jsx)(o.code,{children:"03:49:19 [WARN] [outlook] Caller asked for too many messages. Caller asked for 200 messages. But there are only 1 available. We will return 1"})}),"\n"]}),"\n",(0,a.jsx)(o.p,{children:"Basically, artemis is letting us know that even though we asked for 200 messages\nit only found 1 message in the folder. If we wanted to make the warnings go away\nwe can update our script to the following:"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-typescript",children:"let limit = 200;\nif (limit > result.message_count) {\n  limit = result.message_count;\n}\n"})}),"\n",(0,a.jsx)(o.p,{children:"Otherwise, you should see that artemis was able to extract messages from the\nInbox, Drafts, Junk Email, and even the Calendar!"}),"\n",(0,a.jsx)(o.h3,{id:"output-message-content",children:"Output Message content"}),"\n",(0,a.jsx)(o.p,{children:"Lets output the content of single message based on a Subject line. Update your\nscript with the code below:"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-typescript",children:'import { WindowsError } from "./artemis-api/src/windows/errors";\nimport { Outlook } from "./artemis-api/src/windows/outlook";\nimport type { SubFolder } from "./artemis-api/types/windows/outlook";\n\nfunction main() {\n  const path = "<path to test.ost>";\n  const reader = new Outlook(path);\n\n  const result = reader.rootFolder();\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  for (const sub of result.subfolders) {\n    console.log(`Name: ${sub.name} - Node: ${sub.node}`);\n    walkFolders(sub, reader, `/${sub.name}`);\n  }\n}\n\n// Read a folder and then read any subfolders\nfunction walkFolders(folder: SubFolder, reader: Outlook, full_path: string) {\n  const result = reader.readFolder(folder.node);\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  // If the folder has messages, lets parse them\n  if (result.message_count != 0) {\n    console.log(`Total messages: ${result.message_count}`);\n    const limit = 200;\n    let offset = 0;\n\n    // message_count is the total messages in a folder\n    let count = result.message_count;\n    while (count != 0) {\n      const emails = reader.readMessages(\n        result.messages_table,\n        offset,\n        limit,\n      );\n      if (emails instanceof WindowsError) {\n        console.log(emails);\n        break;\n      }\n      console.log(`Email messages: ${emails.length}`);\n      for (const email of emails) {\n        console.log(\n          `Subject: ${email.subject} - From: ${email.from} - Folder: ${full_path}`,\n        );\n\n        if (email.subject === "Hi") { // <---------- If the email subject equals "Hi", print the message body\n          console.log(email.body);\n        }\n      }\n      // Done if we do not hit limit\n      if (emails.length < limit) {\n        break;\n      }\n      count = emails.length;\n\n      offset += limit;\n    }\n  }\n\n  for (const sub of result.subfolders) {\n    const path = `${full_path}/${sub.name}`;\n\n    console.log(\n      `Name: ${sub.name} - Node: ${sub.node} - Folder path: ${path}`,\n    );\n    walkFolders(sub, reader, path);\n  }\n}\n\nmain();\n'})}),"\n",(0,a.jsx)(o.p,{children:"When you run your script you should get the following in your output:"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{children:'<html><head>\\r\\n<meta http-equiv=\\"Content-Type\\" content=\\"text/html; charset=iso-8859-1\\">\\r\\n<style type=\\"text/css\\" style=\\"display:none;\\"> P {margin-top:0;margin-bottom:0;} </style>\\r\\n</head>\\r\\n<body dir=\\"ltr\\">\\r\\n<div class=\\"elementToProof\\" style=\\"font-family: Aptos, Aptos_EmbeddedFont, Aptos_MSFontService, Calibri, Helvetica, sans-serif; font-size: 12pt; color: rgb(0, 0, 0);\\">\\r\\nWho took artemistest@outlook.com???!?!?!</div>\\r\\n</body>\\r\\n</html>\\r\\n\n'})}),"\n",(0,a.jsx)(o.p,{children:"Once you unescape the string, the message can be rendered as:"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-html",children:'<html>\n  <head>\n    <meta\n      http-equiv="Content-Type"\n      content="text/html; charset=iso-8859-1"\n    />\n    <style type="text/css" style="display: none">\n      p {\n        margin-top: 0;\n        margin-bottom: 0;\n      }\n    </style>\n  </head>\n  <body dir="ltr">\n    <div\n      class="elementToProof"\n      style="font-family:\n  Aptos,\n  Aptos_EmbeddedFont,\n  Aptos_MSFontService,\n  Calibri,\n  Helvetica,\n  sans-serif; font-size: 12pt; color: rgb(0, 0, 0)"\n    >\n      Who took artemistest@outlook.com???!?!?!\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,a.jsx)(o.h3,{id:"read-attachments",children:"Read Attachments"}),"\n",(0,a.jsx)(o.p,{children:"So now we can read all folders and messages! Now lets get the attachments!"}),"\n",(0,a.jsx)(o.p,{children:"Update your TypeScript code with the following:"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-typescript",children:'import { WindowsError } from "./artemis-api/src/windows/errors";\nimport { Outlook } from "./artemis-api/src/windows/outlook";\nimport type { SubFolder } from "./artemis-api/types/windows/outlook";\n\nfunction main() {\n  const path = "<path to test.ost>";\n  const reader = new Outlook(path);\n\n  const result = reader.rootFolder();\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  for (const sub of result.subfolders) {\n    console.log(`Name: ${sub.name} - Node: ${sub.node}`);\n    walkFolders(sub, reader, `/${sub.name}`);\n  }\n}\n\n// Read a folder and then read any subfolders\nfunction walkFolders(folder: SubFolder, reader: Outlook, full_path: string) {\n  const result = reader.readFolder(folder.node);\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  // If the folder has messages, lets parse them\n  if (result.message_count != 0) {\n    console.log(`Total messages: ${result.message_count}`);\n    const limit = 200;\n    let offset = 0;\n\n    // message_count is the total messages in a folder\n    let count = result.message_count;\n    while (count != 0) {\n      const emails = reader.readMessages(\n        result.messages_table,\n        offset,\n        limit,\n      );\n      if (emails instanceof WindowsError) {\n        console.log(emails);\n        break;\n      }\n      console.log(`Email messages: ${emails.length}`);\n      for (const email of emails) {\n        console.log(\n          `Subject: ${email.subject} - From: ${email.from} - Folder: ${full_path}`,\n        );\n\n        if (email.subject === "Hi") {\n          console.log(email.body);\n        }\n\n        // Loop through attachment previews <-------------------------Check for attachments\n        for (const attach of email.attachments) {\n          console.log(`Attachment: ${attach.name}`);\n        }\n      }\n      // Done if we do not hit limit\n      if (emails.length < limit) {\n        break;\n      }\n      count = emails.length;\n\n      offset += limit;\n    }\n  }\n\n  for (const sub of result.subfolders) {\n    const path = `${full_path}/${sub.name}`;\n\n    console.log(\n      `Name: ${sub.name} - Node: ${sub.node} - Folder path: ${path}`,\n    );\n    walkFolders(sub, reader, path);\n  }\n}\n\nmain();\n'})}),"\n",(0,a.jsxs)(o.p,{children:["The MessageDetails object that is returned by ",(0,a.jsx)(o.code,{children:"readMessages()"})," contains quite a\nbit of metadata. It also includes the metadata we require if we want to grab any\nattachments. If you run the code above you see the following:"]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{children:'[runtime]: "Subject: Welcome to your new Outlook.com account - From: no-reply@microsoft.com - Folder: /Root - Mailbox/IPM_SUBTREE/Inbox"\n[runtime]: "Attachment: micros~1.png"\n[runtime]: "Attachment: wm-qrc~1.png"\n[runtime]: "Attachment: wm-cal~1.png"\n[runtime]: "Attachment: wm-sec~1.png"\n[runtime]: "Attachment: wm-sea~1.png"\n[runtime]: "Attachment: wm-per~1.png"\n[runtime]: "Attachment: wm-m365.png"\n[runtime]: "Attachment: wm-hero.png"\n[runtime]: "Attachment: wm-ema~1.png"\n[runtime]: "Attachment: wm-goo~1.png"\n[runtime]: "Attachment: wm-app~1.png"\n[runtime]: "Attachment: wm-her~1.png"\n[runtime]: "Attachment: wm-m36~1.png"\n[runtime]: "Attachment: wm-man~1.png"\n[runtime]: "Attachment: wm-not~1.png"\n[runtime]: "Attachment: wm-qrc~1.png"\n[runtime]: "Attachment: wm-tip~1.png"\n'})}),"\n",(0,a.jsx)(o.p,{children:"We have not read any attachment yet, but we can at least access the names of any\nattachment."}),"\n",(0,a.jsx)(o.h3,{id:"extract-attachments",children:"Extract Attachments"}),"\n",(0,a.jsxs)(o.p,{children:["Extracting email attachments is a very powerful scripting feature, however it is\n",(0,a.jsx)(o.strong,{children:"important"})," to be aware that it can potentially spike memory usage."]}),"\n",(0,a.jsxs)(o.p,{children:["Remeber our limit for reading messages is 200. If we choose to just read all\nattachments (which may be ok), it can potentially spike memory usage alot. For\nexample, if each of the 200 messages we read contain a 2MB attachment and decide\nwe want to read all of them.",(0,a.jsx)(o.br,{}),"\n","Thats already 400MBs of memory just for attachments! That does not even include\nthe message body and properties metadata."]}),"\n",(0,a.jsx)(o.p,{children:"To extract attachments update your code with the following:"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-typescript",children:'import { WindowsError } from "./artemis-api/src/windows/errors";\nimport { Outlook } from "./artemis-api/src/windows/outlook";\nimport type { SubFolder } from "./artemis-api/types/windows/outlook";\n\nfunction main() {\n  const path = "<path to test.ost>";\n  const reader = new Outlook(path);\n\n  const result = reader.rootFolder();\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  for (const sub of result.subfolders) {\n    console.log(`Name: ${sub.name} - Node: ${sub.node}`);\n    walkFolders(sub, reader, `/${sub.name}`);\n  }\n}\n\n// Read a folder and then read any subfolders\nfunction walkFolders(folder: SubFolder, reader: Outlook, full_path: string) {\n  const result = reader.readFolder(folder.node);\n  if (result instanceof WindowsError) {\n    console.log(result);\n    return;\n  }\n\n  // If the folder has messages, lets parse them\n  if (result.message_count != 0) {\n    console.log(`Total messages: ${result.message_count}`);\n    const limit = 200;\n    let offset = 0;\n\n    // message_count is the total messages in a folder\n    let count = result.message_count;\n    while (count != 0) {\n      const emails = reader.readMessages(\n        result.messages_table,\n        offset,\n        limit,\n      );\n      if (emails instanceof WindowsError) {\n        console.log(emails);\n        break;\n      }\n      console.log(`Email messages: ${emails.length}`);\n      for (const email of emails) {\n        console.log(\n          `Subject: ${email.subject} - From: ${email.from} - Folder: ${full_path}`,\n        );\n\n        if (email.subject === "Hi") {\n          console.log(email.body);\n        }\n\n        for (const attach of email.attachments) {\n          console.log(`Attachment: ${attach.name}`);\n\n          // Read the attachment using the attach block and descriptor IDs <------------Access the attachment data\n          const details = reader.readAttachment(\n            attach.block_id,\n            attach.descriptor_id,\n          );\n          if (details instanceof WindowsError) {\n            console.error(details);\n            continue;\n          }\n\n          console.log(details);\n        }\n      }\n      // Done if we do not hit limit\n      if (emails.length < limit) {\n        break;\n      }\n      count = emails.length;\n\n      offset += limit;\n    }\n  }\n\n  for (const sub of result.subfolders) {\n    const path = `${full_path}/${sub.name}`;\n\n    console.log(\n      `Name: ${sub.name} - Node: ${sub.node} - Folder path: ${path}`,\n    );\n    walkFolders(sub, reader, path);\n  }\n}\n\nmain();\n'})}),"\n",(0,a.jsxs)(o.admonition,{type:"info",children:[(0,a.jsx)(o.p,{children:"You may want to redirect your output to a file like below:"}),(0,a.jsx)(o.p,{children:(0,a.jsx)(o.code,{children:"artemis -j <path to script.js> > out.txt"})})]}),"\n",(0,a.jsx)(o.p,{children:"You should see something like the following in your output:"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-json",children:'{\n  "data": "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",\n  "size": 2654,\n  "name": "microsoft-logo.png",\n  "mime": "image/png",\n  "extension": ".png",\n  "method": "ByValue",\n  "props": [\n    {\n      "name": ["PidTagCreationTime"],\n      "property_type": "Time",\n      "prop_id": 12295,\n      "property_number": 64,\n      "reference": 160,\n      "value": "2024-09-10T04:03:30.000Z"\n    },\n    {\n      "name": ["PidTagLastModificationTime"],\n      "property_type": "Time",\n      "prop_id": 12296,\n      "property_number": 64,\n      "reference": 192,\n      "value": "2024-09-10T04:03:30.000Z"\n    },\n    {\n      "name": ["PidTagAttachFilenameW"],\n      "property_type": "String",\n      "prop_id": 14084,\n      "property_number": 31,\n      "reference": 256,\n      "value": "micros~1.png"\n    },\n    {\n      "name": ["PidTagAttachLongFilenameW"],\n      "property_type": "String",\n      "prop_id": 14087,\n      "property_number": 31,\n      "reference": 288,\n      "value": "microsoft-logo.png"\n    },\n    {\n      "name": ["PidTagRenderingPosition"],\n      "property_type": "Int32",\n      "prop_id": 14091,\n      "property_number": 3,\n      "reference": 4294967295,\n      "value": 4294967295\n    },\n    {\n      "name": ["PidTagAttachContentId"],\n      "property_type": "String",\n      "prop_id": 14098,\n      "property_number": 31,\n      "reference": 352,\n      "value": "microsoft-logo"\n    },\n    {\n      "name": ["PidTagAttachFlags"],\n      "property_type": "Int32",\n      "prop_id": 14100,\n      "property_number": 3,\n      "reference": 4,\n      "value": 4\n    },\n    {\n      "name": ["Unknown"],\n      "property_type": "Binary",\n      "prop_id": 14109,\n      "property_number": 258,\n      "reference": 96,\n      "value": "pm3MpYipKEqwWyw2JdU5ig=="\n    },\n    {\n      "name": ["PidTagLanguage"],\n      "property_type": "String",\n      "prop_id": 14860,\n      "property_number": 31,\n      "reference": 384,\n      "value": "EnUs"\n    },\n    {\n      "name": ["PidTagAttachmentHidden"],\n      "property_type": "Bool",\n      "prop_id": 32766,\n      "property_number": 11,\n      "reference": 1,\n      "value": 1\n    },\n    {\n      "name": ["Unknown"],\n      "property_type": "Bool",\n      "prop_id": 32907,\n      "property_number": 11,\n      "reference": 1,\n      "value": 1\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(o.p,{children:"Thats alot of data! And this is just for one attachment thats 2654 bytes in\nsize!"}),"\n",(0,a.jsxs)(o.p,{children:["The actual attachment data is base64 encoded. If you\n",(0,a.jsx)(o.a,{href:"https://gchq.github.io/CyberChef/",children:"decode"})," the data and render it, you should\nget a image!"]})]})}function c(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,a.jsx)(o,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>s,x:()=>l});var t=n(96540);const a={},r=t.createContext(a);function s(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);