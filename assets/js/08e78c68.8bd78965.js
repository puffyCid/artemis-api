"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[6073],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,d=u["".concat(p,".").concat(m)]||u[m]||g[m]||i;return t?r.createElement(d,s(s({ref:n},c),{},{components:t})):r.createElement(d,s({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5783:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:2,description:"Using TypeScript"},s="TypeScript",o={unversionedId:"Intro/Scripting/typescript",id:"Intro/Scripting/typescript",title:"TypeScript",description:"Using TypeScript",source:"@site/docs/Intro/Scripting/typescript.md",sourceDirName:"Intro/Scripting",slug:"/Intro/Scripting/typescript",permalink:"/artemis-api/docs/Intro/Scripting/typescript",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Intro/Scripting/typescript.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Using TypeScript"},sidebar:"artemisStart",previous:{title:"Overview",permalink:"/artemis-api/docs/Intro/Scripting/deno"},next:{title:"Bundling",permalink:"/artemis-api/docs/Intro/Scripting/bundling"}},p={},l=[],c={toc:l},u="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typescript"},"TypeScript"),(0,a.kt)("p",null,"A TypeScrpt library is provided instead of JavaScript due to the enhanced\nfeatures and ease of use TypeScrpt provides over plain JavaScript."),(0,a.kt)("p",null,"Continuing from ",(0,a.kt)("inlineCode",{parentName:"p"},"get_registry(registry_file_path)")," example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Registry {\n  /**\n   * Full path to `Registry` key and name.\n   * Ex: ` ROOT\\...\\CurrentVersion\\Run`\n   */\n  path: string;\n  /**\n   * Path to Key\n   * Ex: ` ROOT\\...\\CurrentVersion`\n   */\n  key: string;\n  /**\n   * Key name\n   * Ex: `Run`\n   */\n  name: string;\n  /**\n   * Values associated with key name\n   * Ex: `Run => Vmware`. Where Run is the `key` name and `Vmware` is the value name\n   */\n  values: Value[];\n  /**Timestamp of when the path was last modified */\n  last_modified: number;\n  /**Depth of key name */\n  depth: number;\n}\n\n/**\n * The value data associated with Registry key\n * References:\n *   https://github.com/libyal/libregf\n *   https://github.com/msuhanov/regf/blob/master/Windows%20registry%20file%20format%20specification.md\n */\nexport interface Value {\n  /**Name of Value */\n  value: string;\n  /**\n   * Data associated with value.  Type can be determiend by `data_type`.\n   * `REG_BINARY` is base64 encoded string\n   */\n  data: string;\n  /**Value type */\n  data_type: string;\n}\n\n/**\n * Function to parse a `Registry` file\n * @param path Full path to a `Registry` file\n * @returns Array of `Registry` entries\n */\nexport function get_registry(path: string): Registry[] {\n  // Array of JSON objects\n  const data = Deno.core.ops.get_registry(path);\n  const reg_array: Registry[] = JSON.parse(data);\n\n  return reg_array;\n}\n")),(0,a.kt)("p",null,"The above TypeScrpt code shows that we can access our registered ",(0,a.kt)("inlineCode",{parentName:"p"},"get_registry"),"\nfunction by calling it via ",(0,a.kt)("inlineCode",{parentName:"p"},"Deno.core.ops.get_registry(path);"),"\\\nTo make scripting even easier a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"artemis-api")," library is available to\nimport into Deno scripts. This allows users to create scripts without needing to\nknow what functions are registered."),(0,a.kt)("p",null,"The example script below shows TypeScrpt code that imports the ",(0,a.kt)("inlineCode",{parentName:"p"},"artemis-api"),"\nlibrary to parse the SOFTWARE ",(0,a.kt)("inlineCode",{parentName:"p"},"Registry")," file to get a list of installed\nprograms"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { getRegistry } from "https://raw.githubusercontent.com/puffycid/artemis-api/master/mod.ts";\nimport { Registry } from "https://raw.githubusercontent.com/puffycid/artemis-api/master/src/windows/registry.ts";\n\ninterface InstalledPrograms {\n  name: string;\n  version: string;\n  install_location: string;\n  install_source: string;\n  language: string;\n  publisher: string;\n  install_string: string;\n  install_date: string;\n  uninstall_string: string;\n  url_info: string;\n  reg_path: string;\n}\n\nfunction grab_info(reg: Registry[]): InstalledPrograms[] {\n  const programs: InstalledPrograms[] = [];\n  const min_size = 3;\n  for (const entries of reg) {\n    if (entries.values.length < min_size) {\n      continue;\n    }\n    const program: InstalledPrograms = {\n      name: "",\n      version: "",\n      install_location: "",\n      install_source: "",\n      language: "",\n      publisher: "",\n      install_string: "",\n      install_date: "",\n      uninstall_string: "",\n      url_info: "",\n      reg_path: entries.path,\n    };\n\n    for (const value of entries.values) {\n      switch (value.value) {\n        case "DisplayName":\n          program.name = value.data;\n          break;\n        case "DisplayVersion":\n          program.version = value.data;\n          break;\n        case "InstallDate":\n          program.install_date = value.data;\n          break;\n        case "InstallLocation":\n          program.install_location = value.data;\n          break;\n        case "InstallSource":\n          program.install_source = value.data;\n          break;\n        case "Language":\n          program.language = value.data;\n          break;\n        case "Publisher":\n          program.publisher = value.data;\n          break;\n        case "UninstallString":\n          program.uninstall_string = value.data;\n          break;\n        case "URLInfoAbout":\n          program.url_info = value.data;\n          break;\n        default:\n          continue;\n      }\n    }\n    programs.push(program);\n  }\n  return programs;\n}\n\nfunction main() {\n  const path = "C:\\\\Windows\\\\System32\\\\config\\\\SOFTWARE";\n\n  const reg = getRegistry(path);\n  const programs: Registry[] = [];\n  for (const entries of reg) {\n    if (\n      !entries.path.includes(\n        "Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall",\n      )\n    ) {\n      continue;\n    }\n    programs.push(entries);\n  }\n  return grab_info(programs);\n}\n\nmain();\n')),(0,a.kt)("p",null,"We can then compile and bundle this TypeScrpt code to JavaScript and execute\nusing artemis!"))}g.isMDXComponent=!0}}]);