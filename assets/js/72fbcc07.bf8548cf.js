"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[5577],{4726:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"API/Artifacts/linux","title":"Linux","description":"Interact with Linux Artifacts","source":"@site/docs/API/Artifacts/linux.md","sourceDirName":"API/Artifacts","slug":"/API/Artifacts/linux","permalink":"/artemis-api/docs/API/Artifacts/linux","draft":false,"unlisted":false,"editUrl":"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/API/Artifacts/linux.md","tags":[],"version":"current","lastUpdatedBy":"puffyCid","lastUpdatedAt":1739135633000,"frontMatter":{"description":"Interact with Linux Artifacts"},"sidebar":"artemisAPI","previous":{"title":"Applications","permalink":"/artemis-api/docs/API/Artifacts/applications"},"next":{"title":"macOS","permalink":"/artemis-api/docs/API/Artifacts/macos"}}');var i=r(4848),s=r(8453);const l={description:"Interact with Linux Artifacts"},a="Linux",d={},o=[{value:"getLogon(path) -&gt; Logon[] | LinuxError",id:"getlogonpath---logon--linuxerror",level:3},{value:"getElf(path) -&gt; ElfInfo | LinuxError",id:"getelfpath---elfinfo--linuxerror",level:3},{value:"getJournal(path) -&gt; Journal[] | LinuxError",id:"getjournalpath---journal--linuxerror",level:3},{value:"getDebInfo(alt_path) -&gt; DebPackages[] | LinuxError",id:"getdebinfoalt_path---debpackages--linuxerror",level:3},{value:"getSudoLogs() -&gt; Journal[]",id:"getsudologs---journal",level:3},{value:"getRpmInfo(path) -&gt; RpmPackages[] | LinuxError",id:"getrpminfopath---rpmpackages--linuxerror",level:3},{value:"getGnomeExtensions(alt_path) -&gt; Extension[] | LinuxError",id:"getgnomeextensionsalt_path---extension--linuxerror",level:3},{value:"gnomeAppUsage(alt_path) -&gt; AppUsage[] | LinuxError",id:"gnomeappusagealt_path---appusage--linuxerror",level:3},{value:"geditRecentFiles(alt_path) -&gt; RecentFiles[] | LinuxError",id:"geditrecentfilesalt_path---recentfiles--linuxerror",level:3},{value:"parseGvfs(alt_path) -&gt; GvfsEntry[] | LinuxError",id:"parsegvfsalt_path---gvfsentry--linuxerror",level:3},{value:"listSnaps() -&gt; Record&lt;string, SnapState&gt; | LinuxError",id:"listsnaps---recordstring-snapstate--linuxerror",level:3}];function h(e){const t={a:"a",admonition:"admonition",br:"br",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"linux",children:"Linux"})}),"\n",(0,i.jsx)(t.p,{children:"These functions can be used to pull data related to Linux artifacts"}),"\n",(0,i.jsx)(t.h3,{id:"getlogonpath---logon--linuxerror",children:"getLogon(path) -> Logon[] | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Parse a single logon related file. The path needs to end with one of the\nfollowing:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"wtmp"}),"\n",(0,i.jsx)(t.li,{children:"btmp"}),"\n",(0,i.jsx)(t.li,{children:"utmp"}),"\n"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Path to wtmp, utmp, or btmp file"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"getelfpath---elfinfo--linuxerror",children:"getElf(path) -> ElfInfo | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Parse an ELF executable file."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Path to ELF file"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"getjournalpath---journal--linuxerror",children:"getJournal(path) -> Journal[] | LinuxError"}),"\n",(0,i.jsxs)(t.p,{children:["Parse a systemd ",(0,i.jsx)(t.a,{href:"/artemis-api/docs/Artifacts/Linux%20Artifacts/journals",children:"Journal"})," file."]}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.p,{children:"This function is for convenience. It will parse the entire Journal file before\nreturning data. The larger the file the more memory artemis will require."}),(0,i.jsxs)(t.p,{children:["You may want to consider using a\n",(0,i.jsx)(t.a,{href:"/artemis-api/docs/Intro/Scripting/filterscripts",children:"filter script"})," if you are concerned\nabout memory usage."]}),(0,i.jsx)(t.p,{children:"By default Journal file max size is 128 MB (compressed!). Once uncompressed you\ncould see memory usage around ~2-4GBs"})]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Path to Journal file"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"getdebinfoalt_path---debpackages--linuxerror",children:"getDebInfo(alt_path) -> DebPackages[] | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Get list of installed deb packages on the system. Can provide an alternative\npath to the dpkg status."}),"\n",(0,i.jsx)(t.p,{children:"Uses /var/lib/dpkg/status by default"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"alt_path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Alt path to dpkg status file"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"getsudologs---journal",children:"getSudoLogs() -> Journal[]"}),"\n",(0,i.jsx)(t.p,{children:"Parse the Journal files and extract entries related to sudo activity."}),"\n",(0,i.jsx)(t.h3,{id:"getrpminfopath---rpmpackages--linuxerror",children:"getRpmInfo(path) -> RpmPackages[] | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Get list of installed rpm packages on the system. May provide an alternative\nfull path to the rpmdb.sqlite file."}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsxs)(t.p,{children:["This function only supports parsing the sqlite database for RPM packages.",(0,i.jsx)(t.br,{}),"\n","Modern versions of RPM use sqlite to store package info. However, older versions\nused the Berkley database."]}),(0,i.jsxs)(t.p,{children:["For example, Fedora 33 switched over to the sqlite format (released 2020-10-27)",(0,i.jsx)(t.br,{}),"\n","Therefore versions older than Fedora 33 would not be supported by this function\nbecause they are still using the Berkley database!"]})]}),"\n",(0,i.jsx)(t.p,{children:"On Fedora based distributions the sqlite file should be located at\n/var/lib/rpm/rpmdb.sqlite"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"alt_path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Optional path to the rpmdb.sqlite file"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"getgnomeextensionsalt_path---extension--linuxerror",children:"getGnomeExtensions(alt_path) -> Extension[] | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Get list of installed GNOME Shell extensions. Can provide an optional\nalternative path to a metadata.json file."}),"\n",(0,i.jsx)(t.p,{children:"Parses user and sytem installed extensions by default"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"alt_path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Alt path to metadata.json file"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"gnomeappusagealt_path---appusage--linuxerror",children:"gnomeAppUsage(alt_path) -> AppUsage[] | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Parse recently used GNOME applications."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"alt_path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Alt path to application_state file"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"geditrecentfilesalt_path---recentfiles--linuxerror",children:"geditRecentFiles(alt_path) -> RecentFiles[] | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Parse recently opened files by gedit."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"alt_path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Alt path to gedit-metadata.xml file"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"parsegvfsalt_path---gvfsentry--linuxerror",children:"parseGvfs(alt_path) -> GvfsEntry[] | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Parse GVFS metadata files. By default artemis will parse all GVFS metadata files\nfor all users."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Param"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"alt_path"}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"Alt path to GVFS metadata file. Can also be a glob"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"listsnaps---recordstring-snapstate--linuxerror",children:"listSnaps() -> Record<string, SnapState> | LinuxError"}),"\n",(0,i.jsx)(t.p,{children:"Get a list of all installed Snap packages"})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>a});var n=r(6540);const i={},s=n.createContext(i);function l(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);