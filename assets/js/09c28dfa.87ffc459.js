"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[5430],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={description:"Primary source of Windows configuration settings",keywords:["windows","registry"]},s="Registry",o={unversionedId:"Artifacts/Windows Artfacts/registry",id:"Artifacts/Windows Artfacts/registry",title:"Registry",description:"Primary source of Windows configuration settings",source:"@site/docs/Artifacts/Windows Artfacts/registry.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/registry",permalink:"/docs/Artifacts/Windows Artfacts/registry",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/registry.md",tags:[],version:"current",frontMatter:{description:"Primary source of Windows configuration settings",keywords:["windows","registry"]},sidebar:"artemisArtifacts",previous:{title:"RecycleBin",permalink:"/docs/Artifacts/Windows Artfacts/recyclebin"},next:{title:"Search",permalink:"/docs/Artifacts/Windows Artfacts/search"}},l={},c=[],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"registry"},"Registry"),(0,i.kt)("p",null,"Windows ",(0,i.kt)("inlineCode",{parentName:"p"},"Registry")," is a collection of binary files that store Windows\nconfiguration settings and OS information. There are multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Registry")," files\non a system such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C:\\Windows\\System32\\config\\SYSTEM")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C:\\Windows\\System32\\config\\SOFTWARE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C:\\Windows\\System32\\config\\SAM")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C:\\Windows\\System32\\config\\SECURITY")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C:\\Users\\%\\NTUSER.DAT")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C:\\Users\\%\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat"))),(0,i.kt)("p",null,"Other Parser:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.velociraptor.app/artifact_references/pages/windows.registry.ntuser/"},"Velociraptor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://ericzimmerman.github.io/#!index.md"},"RegistryExplorer"))),(0,i.kt)("p",null,"References:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/libyal/libregf"},"Libyal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/msuhanov/regf/blob/master/Windows%20registry%20file%20format%20specification.md"},"Registry Format"))),(0,i.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'system = "windows"\n\n[output]\nname = "registry_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "registry" # Parses the whole Registry file\n[artifacts.registry]\nuser_hives = true # All NTUSER.DAT and UsrClass.dat\nsystem_hives = true # SYSTEM, SOFTWARE, SAM, SECURITY\n# Optional\n# alt_drive = \'D\'\n# Optional\n# path_regex = "" # Registry is converted to lowercase before all comparison operations. So any regex input will also be converted to lowercase\n')),(0,i.kt)("h1",{id:"collection-options"},"Collection Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_hives")," Parse all user ",(0,i.kt)("inlineCode",{parentName:"li"},"Registry")," files ",(0,i.kt)("inlineCode",{parentName:"li"},"NTUSER.DAT")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"UsrClass.dat"),".\nThis configuration is ",(0,i.kt)("strong",{parentName:"li"},"required")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"system_hives")," Parse all system ",(0,i.kt)("inlineCode",{parentName:"li"},"Registry")," files ",(0,i.kt)("inlineCode",{parentName:"li"},"SYSTEM"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"SAM"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"SOFTWARE"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"SECURITY"),". This configuration is ",(0,i.kt)("strong",{parentName:"li"},"required")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"alt_drive")," Use an alternative driver. This configuration is ",(0,i.kt)("strong",{parentName:"li"},"optional"),". By\ndefault artemis will use the ",(0,i.kt)("inlineCode",{parentName:"li"},"%systemdrive%")," value (typically ",(0,i.kt)("inlineCode",{parentName:"li"},"C"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path_regex")," Only return ",(0,i.kt)("inlineCode",{parentName:"li"},"Registry")," keys that match provided ",(0,i.kt)("inlineCode",{parentName:"li"},"path_regex"),". All\ncomparisons are first converted to lowercase. This configuration is\n",(0,i.kt)("strong",{parentName:"li"},"optional"),". Default is no Regex")),(0,i.kt)("h1",{id:"output-structure"},"Output Structure"),(0,i.kt)("p",null,"An array of ",(0,i.kt)("inlineCode",{parentName:"p"},"RegistryData")," entries for each parsed ",(0,i.kt)("inlineCode",{parentName:"p"},"Registry")," file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface RegistryData {\n  /**Path to Registry file */\n  registry_path: string;\n  /**Registry file name */\n  registry_file: string;\n  /**Array of Registry entries */\n  registry_entries: Registry[];\n}\n\n/**\n * Inteface representing the parsed `Registry` structure\n */\nexport interface Registry {\n  /**\n   * Full path to `Registry` key and name.\n   * Ex: ` ROOT\\...\\CurrentVersion\\Run`\n   */\n  path: string;\n  /**\n   * Path to Key\n   * Ex: ` ROOT\\...\\CurrentVersion`\n   */\n  key: string;\n  /**\n   * Key name\n   * Ex: `Run`\n   */\n  name: string;\n  /**\n   * Values associated with key name\n   * Ex: `Run => Vmware`. Where Run is the `key` name and `Vmware` is the value name\n   */\n  values: Value[];\n  /**Timestamp of when the path was last modified */\n  last_modified: number;\n  /**Depth of key name */\n  depth: number;\n}\n\n/**\n * The value data associated with Registry key\n * References:\n *   https://github.com/libyal/libregf\n *   https://github.com/msuhanov/regf/blob/master/Windows%20registry%20file%20format%20specification.md\n */\nexport interface Value {\n  /**Name of Value */\n  value: string;\n  /**\n   * Data associated with value. All types are strings by default. The real type can be determined by `data_type`.\n   * `REG_BINARY` is a base64 encoded string\n   */\n  data: string;\n  /**\n   * Value type.\n   * Full list of types at: https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-value-types\n   */\n  data_type: string;\n}\n")))}u.isMDXComponent=!0}}]);