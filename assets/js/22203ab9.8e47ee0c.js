"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[2871],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),f=a,u=m["".concat(l,".").concat(f)]||m[f]||d[f]||r;return n?i.createElement(u,s(s({ref:t},p),{},{components:n})):i.createElement(u,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7590:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={description:"Windows NTFS file metadata",keywords:["windows","file meta"]},s="Raw Files",o={unversionedId:"Artifacts/Windows Artfacts/rawfiles",id:"Artifacts/Windows Artfacts/rawfiles",title:"Raw Files",description:"Windows NTFS file metadata",source:"@site/docs/Artifacts/Windows Artfacts/rawfiles.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/rawfiles",permalink:"/docs/Artifacts/Windows Artfacts/rawfiles",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/rawfiles.md",tags:[],version:"current",frontMatter:{description:"Windows NTFS file metadata",keywords:["windows","file meta"]},sidebar:"artemisArtifacts",previous:{title:"Processes",permalink:"/docs/Artifacts/Windows Artfacts/processes"},next:{title:"RecycleBin",permalink:"/docs/Artifacts/Windows Artfacts/recyclebin"}},l={},c=[],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"raw-files"},"Raw Files"),(0,a.kt)("p",null,"A raw Windows filelisting by parsing the ",(0,a.kt)("inlineCode",{parentName:"p"},"NTFS")," file system using the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ColinFinck/ntfs"},"ntfs")," crate to recursively walk the files\nand directories on the system. If hashing or ",(0,a.kt)("inlineCode",{parentName:"p"},"PE")," parsing is enabled this will\nalso read the file contents. ",(0,a.kt)("inlineCode",{parentName:"p"},"Raw Files")," also supports decompressing compressed\nfiles with the ",(0,a.kt)("inlineCode",{parentName:"p"},"WofCompression")," alternative data stream (ADS) attribute.\\\nSince a filelisting can be extremely large every 100k entries artemis will\noutput the data and then continue."),(0,a.kt)("p",null,"Other Parsers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Any tool that parse the NTFS file system")),(0,a.kt)("p",null,"References:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/libyal/libfsntfs/blob/main/documentation/New%20Technologies%20File%20System%20(NTFS).asciidoc"},"Libyal"))),(0,a.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'system = "windows"\n\n[output]\nname = "ntfs_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "rawfiles"\n[artifacts.rawfiles]\ndrive_letter = \'C\'\nstart_path = "C:\\\\"\ndepth = 20\nrecover_indx = false\n# Optional\nmetadata = true # Get PE metadata\n# Optional\nmd5 = false\n# Optional\nsha1 = false\n# Optional\nsha256 = false\n# Optional\nmetadata = false\n# Optional\npath_regex = ""\n# Optional\nfilename_regex = ""\n')),(0,a.kt)("h1",{id:"collection-options"},"Collection Options"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"drive_letter")," Drive letter to use to parse the NTFS file system. This\nconfiguration is ",(0,a.kt)("strong",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_path")," Directory to start walking the filesystem. This configuration is\n",(0,a.kt)("strong",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"depth")," How many directories to descend from the ",(0,a.kt)("inlineCode",{parentName:"li"},"start_path"),". Must be a\npostive number. Max value is 255. This configuration is ",(0,a.kt)("strong",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"recover_indx")," Boolean value to carve deleted entries from the ",(0,a.kt)("inlineCode",{parentName:"li"},"$INDX"),"\nattribute. Can show evidence of deleted files"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metadata")," Get ",(0,a.kt)("a",{parentName:"li",href:"/docs/Artifacts/Windows%20Artfacts/pe"},"PE")," data from ",(0,a.kt)("inlineCode",{parentName:"li"},"PE")," files. This configuration is\n",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is ",(0,a.kt)("strong",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"md5")," Boolean value to enable MD5 hashing on all files. This configuration is\n",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is ",(0,a.kt)("strong",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sha1")," Boolean value to enable SHA1 hashing on all files. This configuration\nis ",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is ",(0,a.kt)("strong",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sha256")," Boolean value to enable SHA256 hashing on all files. This\nconfiguration is ",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is ",(0,a.kt)("strong",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"path_regex")," Only descend into paths (directories) that match the provided\nregex. This configuration is ",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is no Regex"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"file_regex")," Only return entres that match the provided regex. This\nconfiguration is ",(0,a.kt)("strong",{parentName:"li"},"optional"),". Default is no Regex")),(0,a.kt)("h1",{id:"output-structure"},"Output Structure"),(0,a.kt)("p",null,"An array of ",(0,a.kt)("inlineCode",{parentName:"p"},"WindowsRawFileInfo")," entries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface RawFileInfo {\n  /**Full path to file or directory */\n  full_path: string;\n  /**Directory path */\n  directory: string;\n  /**Filename */\n  filename: string;\n  /**Extension of file if any */\n  extension: string;\n  /**Created timestamp in UNIXEPOCH seconds */\n  created: number;\n  /**Modified timestamp in UNIXEPOCH seconds */\n  modified: number;\n  /**Changed timestamp in UNIXEPOCH seconds */\n  changed: number;\n  /**Accessed timestamp in UNIXEPOCH seconds */\n  accessed: number;\n  /**Filename created timestamp in UNIXEPOCH seconds */\n  filename_created: number;\n  /**Filename modified timestamp in UNIXEPOCH seconds */\n  filename_modified: number;\n  /**Filename accessed timestamp in UNIXEPOCH seconds */\n  filename_accessed: number;\n  /**Filename changed timestamp in UNIXEPOCH seconds */\n  filename_changed: number;\n  /**Size of file in bytes */\n  size: number;\n  /**Size of file if compressed */\n  compressed_size: number;\n  /**Compression type used on file */\n  compression_type: string;\n  /**Inode entry */\n  inode: number;\n  /**Sequence number for entry */\n  sequence_number: number;\n  /**Parent MFT reference for entry */\n  parent_mft_references: number;\n  /**Attributes associated with entry */\n  attributess: string[];\n  /**MD5 of file. Optional */\n  md5: string;\n  /**SHA1 of file. Optional */\n  sha1: string;\n  /**SHA256 of file. Optional */\n  sha256: string;\n  /**Is the entry a file */\n  is_file: boolean;\n  /**Is the entry a directory */\n  is_directory: boolean;\n  /** Is the entry carved from $INDX */\n  is_indx: boolean;\n  /**USN entry */\n  usn: number;\n  /**SID number associated with entry */\n  sid: number;\n  /**SID  string associated with entry*/\n  user_sid: string;\n  /**Group SID associated with enry */\n  group_sid: string;\n  /**Drive letter */\n  drive: string;\n  /**ADS info associated with entry */\n  ads_info: AdsInfo[];\n  /**Depth the file from provided start point*/\n  depth: number;\n  /**PE binary metadata. Optional */\n  binary_info: PeInfo[];\n}\n\n/**\n * Alternative Data Streams (ADS) are a NTFS feature to embed data in another data stream\n */\nexport interface AdsInfo {\n  /**Name of the ADS entry */\n  name: string;\n  /**Size of the ADS entry */\n  size: number;\n}\n")))}d.isMDXComponent=!0}}]);