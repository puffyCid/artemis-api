"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[1996],{1832:(s,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=t(7624),r=t(2172);const a={description:"macOS process metadata",keywords:["macOS","proc meta"]},c="Processes",i={id:"Artifacts/macOS Artifacts/processes",title:"Processes",description:"macOS process metadata",source:"@site/docs/Artifacts/macOS Artifacts/processes.md",sourceDirName:"Artifacts/macOS Artifacts",slug:"/Artifacts/macOS Artifacts/processes",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/processes",draft:!1,unlisted:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/macOS Artifacts/processes.md",tags:[],version:"current",lastUpdatedBy:"puffyCid",lastUpdatedAt:1718072734e3,frontMatter:{description:"macOS process metadata",keywords:["macOS","proc meta"]},sidebar:"artemisArtifacts",previous:{title:"Policies",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/policies"},next:{title:"Quarantine Events",permalink:"/artemis-api/docs/Artifacts/macOS Artifacts/quarantine"}},o={},l=[];function d(s){const e={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.M)(),...s.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"processes",children:"Processes"}),"\n",(0,n.jsx)(e.p,{children:"Gets a standard process listing using the macOS API"}),"\n",(0,n.jsx)(e.p,{children:"Other Parsers:"}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"Any tool that calls the macOS API"}),"\n"]}),"\n",(0,n.jsx)(e.p,{children:"References:"}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"N/A"}),"\n"]}),"\n",(0,n.jsx)(e.h1,{id:"toml-collection",children:"TOML Collection"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-toml",children:'system = "macos"\n\n[output]\nname = "process_collection"\ndirectory = "./tmp"\nformat = "jsonl"\ncompress = false\nendpoint_id = "abdc"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "processes" # Name of artifact\n[artifacts.processes]\n# Get executable metadata\nmetadata = true \n# MD5 hash process binary\nmd5 = true \n # SHA1 hash process binary\nsha1 = false\n# SHA256 hash process binary\nsha256 = false\n'})}),"\n",(0,n.jsx)(e.h1,{id:"collection-options",children:"Collection Options"}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"metadata"})," Get ",(0,n.jsx)(e.a,{href:"/artemis-api/docs/Artifacts/macOS%20Artifacts/macho",children:"Macho"})," data from process binary."]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"md5"})," Boolean value to MD5 hash process binary"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"sha1"})," Boolean value to SHA1 hash process binary"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"sha256"})," Boolean value to SHA256 hash process binary"]}),"\n"]}),"\n",(0,n.jsx)(e.h1,{id:"output-structure",children:"Output Structure"}),"\n",(0,n.jsxs)(e.p,{children:["An array of ",(0,n.jsx)(e.code,{children:"MacosProcessInfo"})," entries"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-typescript",children:"export interface MacosProcessInfo {\n  /**Full path to the process binary */\n  full_path: string;\n  /**Name of process */\n  name: string;\n  /**Path to process binary */\n  path: string;\n  /** Process ID */\n  pid: number;\n  /** Parent Process ID */\n  ppid: number;\n  /**Environment variables associated with process */\n  environment: string;\n  /**Status of the process */\n  status: string;\n  /**Process arguments */\n  arguments: string;\n  /**Process memory usage */\n  memory_usage: number;\n  /**Process virtual memory usage */\n  virtual_memory_usage: number;\n  /**Process start time*/\n  start_time: string;\n  /** User ID associated with process */\n  uid: string;\n  /**Group ID associated with process */\n  gid: string;\n  /**MD5 hash of process binary */\n  md5: string;\n  /**SHA1 hash of process binary */\n  sha1: string;\n  /**SHA256 hash of process binary */\n  sha256: string;\n  /**MACHO metadata asssociated with process binary */\n  binary_info: MachoInfo[];\n}\n"})})]})}function p(s={}){const{wrapper:e}={...(0,r.M)(),...s.components};return e?(0,n.jsx)(e,{...s,children:(0,n.jsx)(d,{...s})}):d(s)}},2172:(s,e,t)=>{t.d(e,{I:()=>i,M:()=>c});var n=t(1504);const r={},a=n.createContext(r);function c(s){const e=n.useContext(a);return n.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function i(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(r):s.components||r:c(s.components),n.createElement(a.Provider,{value:e},s.children)}}}]);