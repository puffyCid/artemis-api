"use strict";(self.webpackChunkartemis_docs=self.webpackChunkartemis_docs||[]).push([[2247],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=l(r),u=i,m=f["".concat(c,".").concat(u)]||f[u]||d[u]||a;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[f]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},992:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const a={description:"Tracks execution of files on workstations",keywords:["windows","binary"]},s="Prefetch",o={unversionedId:"Artifacts/Windows Artfacts/prefetch",id:"Artifacts/Windows Artfacts/prefetch",title:"Prefetch",description:"Tracks execution of files on workstations",source:"@site/docs/Artifacts/Windows Artfacts/prefetch.md",sourceDirName:"Artifacts/Windows Artfacts",slug:"/Artifacts/Windows Artfacts/prefetch",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/prefetch",draft:!1,editUrl:"https://github.com/puffyCid/artemis-api/tree/main/artemis-docs/docs/Artifacts/Windows Artfacts/prefetch.md",tags:[],version:"current",frontMatter:{description:"Tracks execution of files on workstations",keywords:["windows","binary"]},sidebar:"artemisArtifacts",previous:{title:"Portable Executable",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/pe"},next:{title:"Processes",permalink:"/artemis-api/docs/Artifacts/Windows Artfacts/processes"}},c={},l=[],p={toc:l},f="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(f,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prefetch"},"Prefetch"),(0,i.kt)("p",null,"Windows ",(0,i.kt)("inlineCode",{parentName:"p"},"Prefetch")," data tracks execution of applications on Windows\nWorkstations. ",(0,i.kt)("inlineCode",{parentName:"p"},"Prefetch")," files are typically located at ",(0,i.kt)("inlineCode",{parentName:"p"},"C:\\Windows\\Prefetch"),".\nOn Windows servers ",(0,i.kt)("inlineCode",{parentName:"p"},"Prefetch")," is disabled and may also be disabled on systems\nwith SSDs. Starting on Windows 10, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Prefetch")," files are compressed using\n",(0,i.kt)("inlineCode",{parentName:"p"},"LZXPRESS Huffman"),". artemis uses the Windows API to decompress the data before\nparsing ",(0,i.kt)("inlineCode",{parentName:"p"},"Prefetch")," fiels"),(0,i.kt)("p",null,"Other Parsers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.velociraptor.app/artifact_references/pages/windows.forensics.prefetch/"},"Velociraptor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://ericzimmerman.github.io/"},"PECmd"))),(0,i.kt)("p",null,"References:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/libyal/libscca/blob/main/documentation/Windows%20Prefetch%20File%20(PF)%20format.asciidoc"},"Libyal")),(0,i.kt)("h1",{id:"toml-collection"},"TOML Collection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'system = "windows"\n\n[output]\nname = "prefetch_collection"\ndirectory = "./tmp"\nformat = "json"\ncompress = false\nendpoint_id = "6c51b123-1522-4572-9f2a-0bd5abd81b82"\ncollection_id = 1\noutput = "local"\n\n[[artifacts]]\nartifact_name = "prefetch"\n[artifacts.prefetch]\n# Optional\n# alt_drive = \'D\'\n')),(0,i.kt)("h1",{id:"collection-options"},"Collection Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"alt_drive")," Expects a single character value. Will use an alternative drive\nletter when parsing ",(0,i.kt)("inlineCode",{parentName:"li"},"Prefetch"),". This configuration is ",(0,i.kt)("strong",{parentName:"li"},"optional"),". By default\nartemis will use the ",(0,i.kt)("inlineCode",{parentName:"li"},"%systemdrive%")," value (typically ",(0,i.kt)("inlineCode",{parentName:"li"},"C"),")")),(0,i.kt)("h1",{id:"output-structure"},"Output Structure"),(0,i.kt)("p",null,"An array of ",(0,i.kt)("inlineCode",{parentName:"p"},"Prefetch")," entries"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Prefetch {\n  /**Path to prefetch file */\n  path: string;\n  /**Name of executed file */\n  filename: string;\n  /**Prefetch hash */\n  hash: string;\n  /**Most recent execution timestamp in UNIXEPOCH seconds */\n  last_run_time: number;\n  /**Array of up to eight (8) execution timestamps in UNIXEPOCH seconds */\n  all_run_times: number[];\n  /**Number of executions */\n  run_count: number;\n  /**Size of executed file */\n  size: number;\n  /**Array of volume serial numbers associated with accessed files/directories */\n  volume_serial: string[];\n  /**Array of volume creation timestamps in UNIXEPOCH seconds associated with accessed files/directories */\n  volume_creation: number[];\n  /**Array of volumes associated accessed files/directories */\n  volume_path: string[];\n  /**Number of files accessed by executed file */\n  accessed_file_count: number;\n  /**Number of directories accessed by executed file */\n  accessed_directories_count: number;\n  /**Array of accessed files by executed file */\n  accessed_files: string[];\n  /**Array of accessed directories by executed file */\n  accessed_directories: string[];\n}\n")))}d.isMDXComponent=!0}}]);